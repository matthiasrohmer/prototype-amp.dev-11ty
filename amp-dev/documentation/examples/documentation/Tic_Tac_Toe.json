{"filePath":"examples/source/interactivity-dynamic-content/Tic_Tac_Toe.html","source":"<!-- ## Introduction --><!--\nThis is a sample showing how to implement Tic-Tac-Toe. This includes:\n\n    *   How to use `amp-state` to maintain the state of play.\n    *   How to use _expressions_ to detect winning moves.\n    *   How to use _actions_ and _events_ to create interative gameplay.\n--><!-- -->\n<!doctype html>\n<html ⚡>\n<head>\n<meta charset=\"utf-8\">\n    <title>Tic-Tac-Toe</title>\n    <link rel=\"canonical\" href=\"http://localhost:8080/documentation/examples/interactivity-dynamic-content/tic_tac_toe/index.html\">\n    <meta name=\"viewport\" content=\"width=device-width,minimum-scale=1,initial-scale=1\">\n    <script async src=\"https://cdn.ampproject.org/v0.js\"></script>\n    <!-- ## Setup -->\n    <!-- `amp-bind` is required for interactive gameplay. -->\n    <script async custom-element=\"amp-bind\" src=\"https://cdn.ampproject.org/v0/amp-bind-0.1.js\"></script>\n    <style amp-custom>\n      .board-component {\n        margin: 5em auto;\n        max-width: 800px;\n        padding: 0 1em;\n      }\n      .results-component .hide {\n        display: none;\n      }\n      .results-component .show {\n        display: show;\n      }\n      .board-component table {\n        margin: auto;\n        border: 0;\n        border-collapse: collapse;\n      }\n      .board-component td {\n        border: 0;\n        padding: 0;\n      }\n      .board-component .cell {\n        width: 5.25em;\n        height: 5.25em;\n        border-color: #5ADAFD;\n        border-style: solid;\n        border: 0;\n      }\n      .board-component .cell-vert {\n        border-left: 0.25em solid #5ADAFD;\n        border-right: 0.25em solid #5ADAFD;\n      }\n      .board-component .cell-horiz {\n        border-top: 0.25em solid #5ADAFD;\n        border-bottom: 0.25em solid #5ADAFD;\n      }\n      .board-component .win {\n        background: lightgrey;\n      }\n      .board-component .in-play {\n        background: none;\n      }\n      .board-component .grid-button {\n        width: 100%;\n        height: 100%;\n        border: 0;\n        box-shadow: none;\n        border-radius: 0px;\n        font-size: 2em;\n        padding: 0;\n        margin: 0;\n      }\n      .board-component .grid-button:active {\n        border: 0;\n      }\n      .reset-component {\n        margin: 2em auto;\n        display: flex;\n        justify-content: center;\n      }\n      .reset-component .reset-button {\n        font-size: 1rem;\n        line-height: 1.125rem;\n        padding: .7em .8em;\n        text-decoration: none;\n        white-space: nowrap;\n        word-wrap: normal;\n        vertical-align: middle;\n        cursor: pointer;\n        background-color: #fff;\n        color: #5ADAFD;\n        border: 1px solid #5ADAFD\n      }\n    </style>\n    <style amp-boilerplate>body{-webkit-animation:-amp-start 8s steps(1,end) 0s 1 normal both;-moz-animation:-amp-start 8s steps(1,end) 0s 1 normal both;-ms-animation:-amp-start 8s steps(1,end) 0s 1 normal both;animation:-amp-start 8s steps(1,end) 0s 1 normal both}@-webkit-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-moz-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-ms-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-o-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}</style>\n    <noscript>\n      <style amp-boilerplate>body{-webkit-animation:none;-moz-animation:none;-ms-animation:none;animation:none}</style>\n    </noscript>\n\n  </head>\n  <body>\n    <!-- ## Initial game state -->\n    <!-- We use an `amp-state` called `gameState` to keep the state of play. Additionally, some state values are not initialized but are explained below: -->\n    <!--\n             *   `currentPlayer`: Can be 1 or -1, for ⚡ and O respectively.\n             *   `board`: Stores the state of the board. This object has 9 properties, from `a` to `i`, for the tiles from top-left to bottom-right.\n             *   `tr`,`mr`,`br`,`lc`,`mc`,`rc`,`fd`,`bd`: Read as **T**op **R**ow, **M**iddle **R**ow, and so on, these 8 values hold the _tallies_ towards each of the possible winning states.\n    -->\n    <amp-state id=\"gameState\">\n      <script type=\"application/json\">\n        {\n          \"currentPlayer\": 1,\n          \"displayValues\": {\n            \"-1\": \"O\",\n            \"1\": \"⚡\"\n          }\n        }\n      </script>\n    </amp-state>\n\n    <!-- ## Showing a win -->\n    <!-- To detect a win, we check whether any of the tallies has reached positive or negative 3. -->\n    <div class=\"results-component\">\n      <h1 [class]=\"max(abs(tr),abs(br),abs(lc),abs(rc),abs(fd),abs(bd),abs(mc),abs(mr)) == 3 ? 'hide' : 'show'\">Let's play!</h1>\n      <h1 [class]=\"max(tr,br,lc,rc,fd,bd,mc,mr) == 3 ? 'show' : 'hide'\" class=\"hide\">⚡ wins!!!</h1>\n      <h1 [class]=\"min(tr,br,lc,rc,fd,bd,mc,mr) == -3 ? 'show' : 'hide'\" class=\"hide\">O wins!!!</h1>\n    </div>\n\n    <!-- ## Handling a player's turn -->\n    <!-- Each tile of the playing board is a button. When a move is played, state is updated:\n\n             *   The appropriate tallies are incremented or decremented. For example, playing top-left alters the tally for 3 possible winning states: `tr`,`lc` and `bd` (top row, left column and backward diagonal).\n             *   The state of the `board` is updated, to record that this tile has been filled.\n             *   The game play is switched to the other play by multiplying the current player by `-1`.\n\n         Display attributes for each tile are updated based on this change in state:\n\n             *   `[text]`: Each tile either contains nothing, or the appropriate value from `board`.\n             *   `[class]`: If any of the winning states for this tile has been reached, the background is changed accordingly.\n             *   `[disabled]`: This button must be disabled if either a win has occurred, or the tile already played.\n    -->\n    <div class=\"board-component\">\n      <table>\n        <tbody><tr>\n          <td class=\"cell\">\n            <button on=\"tap:AMP.setState({\n                          tr: tr + gameState.currentPlayer,\n                          lc: lc + gameState.currentPlayer,\n                          bd: bd + gameState.currentPlayer,\n                          board: {\n                            a: gameState.displayValues[gameState.currentPlayer]\n                          },\n                          gameState: {\n                            currentPlayer: gameState.currentPlayer * -1\n                          }\n                        })\" [text]=\"board.a ? board.a : ''\" [class]=\"max(abs(tr),abs(lc),abs(bd)) == 3 ? 'grid-button win' : 'grid-button in-play'\" [disabled]=\"board.a || max(abs(tr),abs(br),abs(lc),abs(rc),abs(fd),abs(bd),abs(mc),abs(mr)) == 3\" class=\"grid-button in-play\">\n            </button>\n          </td>\n          <td class=\"cell cell-vert\">\n            <button on=\"tap:AMP.setState({\n                          tr: tr + gameState.currentPlayer,\n                          mc: mc + gameState.currentPlayer,\n                          board: {\n                            b: gameState.displayValues[gameState.currentPlayer]\n                          },\n                          gameState: {\n                            currentPlayer: gameState.currentPlayer * -1\n                          }\n                        })\" [text]=\"board.b ? board.b : ''\" [class]=\"max(abs(tr),abs(mc)) == 3 ? 'grid-button win' : 'grid-button in-play'\" [disabled]=\"board.b || max(abs(tr),abs(br),abs(lc),abs(rc),abs(fd),abs(bd),abs(mc),abs(mr)) == 3\" class=\"grid-button in-play\">\n            </button>\n          </td>\n          <td class=\"cell\">\n            <button on=\"tap:AMP.setState({\n                          tr: tr + gameState.currentPlayer,\n                          rc: rc + gameState.currentPlayer,\n                          fd: fd + gameState.currentPlayer,\n                          board: {\n                            c: gameState.displayValues[gameState.currentPlayer]\n                          },\n                          gameState: {\n                            currentPlayer: gameState.currentPlayer * -1\n                          }\n                        })\" [text]=\"board.c ? board.c : ''\" [class]=\"max(abs(tr),abs(rc),abs(fd)) == 3 ? 'grid-button win' : 'grid-button in-play'\" [disabled]=\"board.c || max(abs(tr),abs(br),abs(lc),abs(rc),abs(fd),abs(bd),abs(mc),abs(mr)) == 3\" class=\"grid-button in-play\">\n            </button>\n          </td>\n        </tr>\n        <tr>\n          <td class=\"cell cell-horiz\">\n            <button on=\"tap:AMP.setState({\n                          mr: mr + gameState.currentPlayer,\n                          lc: lc + gameState.currentPlayer,\n                          board: {\n                            d: gameState.displayValues[gameState.currentPlayer]\n                          },\n                          gameState: {\n                            currentPlayer: gameState.currentPlayer * -1\n                          }\n                        })\" [text]=\"board.d ? board.d : ''\" [class]=\"max(abs(mr),abs(lc)) == 3 ? 'grid-button win' : 'grid-button in-play'\" [disabled]=\"board.d || max(abs(tr),abs(br),abs(lc),abs(rc),abs(fd),abs(bd),abs(mc),abs(mr)) == 3\" class=\"grid-button in-play\">\n            </button>\n          </td>\n          <td class=\"cell cell-horiz cell-vert\">\n            <button on=\"tap:AMP.setState({\n                          mr: mr + gameState.currentPlayer,\n                          mc: mc + gameState.currentPlayer,\n                          fd: fd + gameState.currentPlayer,bd: bd + gameState.currentPlayer,\n                          board: {\n                            e: gameState.displayValues[gameState.currentPlayer]\n                          },\n                          gameState: {\n                            currentPlayer: gameState.currentPlayer * -1\n                          }\n                        })\" [text]=\"board.e ? board.e : ''\" [class]=\"max(abs(mr),abs(mc),abs(fd),abs(bd)) == 3 ? 'grid-button win' : 'grid-button in-play'\" [disabled]=\"board.e || max(abs(tr),abs(br),abs(lc),abs(rc),abs(fd),abs(bd),abs(mc),abs(mr)) == 3\" class=\"grid-button in-play\">\n            </button>\n          </td>\n          <td class=\"cell cell-horiz\">\n            <button on=\"tap:AMP.setState({\n                          mr: mr + gameState.currentPlayer,\n                          rc: rc + gameState.currentPlayer,\n                          board: {\n                            f: gameState.displayValues[gameState.currentPlayer]\n                          },\n                          gameState: {\n                            currentPlayer: gameState.currentPlayer * -1\n                          }\n                        })\" [text]=\"board.f ? board.f : ''\" [class]=\"max(abs(mr),abs(rc)) == 3 ? 'grid-button win' : 'grid-button in-play'\" [disabled]=\"board.f || max(abs(tr),abs(br),abs(lc),abs(rc),abs(fd),abs(bd),abs(mc),abs(mr)) == 3\" class=\"grid-button in-play\">\n            </button>\n          </td>\n        </tr>\n        <tr>\n          <td class=\"cell\">\n            <button on=\"tap:AMP.setState({\n                          br: br + gameState.currentPlayer,\n                          lc: lc + gameState.currentPlayer,\n                          fd: fd + gameState.currentPlayer,\n                          board: {\n                            g: gameState.displayValues[gameState.currentPlayer]\n                          },\n                          gameState: {\n                            currentPlayer: gameState.currentPlayer * -1\n                          }\n                        })\" [text]=\"board.g ? board.g : ''\" [class]=\"max(abs(br),abs(lc),abs(fd)) == 3 ? 'grid-button win' : 'grid-button in-play'\" [disabled]=\"board.g || max(abs(tr),abs(br),abs(lc),abs(rc),abs(fd),abs(bd),abs(mc),abs(mr)) == 3\" class=\"grid-button in-play\">\n            </button>\n          </td>\n          <td class=\"cell cell-vert\">\n            <button on=\"tap:AMP.setState({\n                          br: br + gameState.currentPlayer,\n                          mc: mc + gameState.currentPlayer,\n                          board: {\n                            h: gameState.displayValues[gameState.currentPlayer]\n                          },\n                          gameState: {\n                            currentPlayer: gameState.currentPlayer * -1\n                          }\n                        })\" [text]=\"board.h ? board.h : ''\" [class]=\"max(abs(br),abs(mc)) == 3 ? 'grid-button win' : 'grid-button in-play'\" [disabled]=\"board.h || max(abs(tr),abs(br),abs(lc),abs(rc),abs(fd),abs(bd),abs(mc),abs(mr)) == 3\" class=\"grid-button in-play\">\n            </button>\n          </td>\n          <td class=\"cell\">\n            <button on=\"tap:AMP.setState({\n                          br: br + gameState.currentPlayer,\n                          rc: rc + gameState.currentPlayer,\n                          bd: bd + gameState.currentPlayer,\n                          board: {\n                            i: gameState.displayValues[gameState.currentPlayer]\n                          },\n                          gameState: {\n                            currentPlayer: gameState.currentPlayer * -1\n                          }\n                        })\" [text]=\"board.i ? board.i : ''\" [class]=\"max(abs(br),abs(rc), abs(bd)) == 3 ? 'grid-button win' : 'grid-button in-play'\" [disabled]=\"board.i || max(abs(tr),abs(br),abs(lc),abs(rc),abs(fd),abs(bd),abs(mc),abs(mr)) == 3\" class=\"grid-button in-play\">\n            </button>\n          </td>\n        </tr>\n      </tbody></table>\n    </div>\n\n    <!-- ## Resetting the game state -->\n    <!-- To start a new game, the `board` and 8 tallies are reset to `null` and the `currentPlayer` reset to `⚡`. -->\n    <div class=\"reset-component\">\n      <button class=\"reset-button\" on=\"tap:AMP.setState({\n                  gameState: {\n                    currentPlayer: 1,\n                    displayValues: {\n                      '-1': 'O',\n                      '1': '⚡'\n                    }\n                  },\n                  tr: null,\n                  mr: null,\n                  br: null,\n                  lc: null,\n                  mc: null,\n                  rc: null,\n                  fd: null,\n                  bd: null,\n                  board: null\n                })\">\n        Restart game\n      </button>\n    </div>\n    <!-- ## Top tips-->\n    <!-- Put ⚡ in the center square! -->\n</body></html>","document":{"sections":[{"doc_":"## Introduction\n","code":"","preview":"","inBody":false,"id":0,"cachedMarkedDoc":"<h2 id=\"introduction\" class=\"www-heading pb4 mb2 relative h3\">Introduction</h2>","isLastSection":false,"isFirstSection":true,"commentOffset":0,"codeOffset":0,"headings":[{"id":"introduction","name":"Introduction"}],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"## Introduction\n"},{"doc_":"\nThis is a sample showing how to implement Tic-Tac-Toe. This includes:\n\n*   How to use `amp-state` to maintain the state of play.\n\n*   How to use _expressions_ to detect winning moves.\n\n*   How to use _actions_ and _events_ to create interative gameplay.\n\n","code":"","preview":"","inBody":false,"id":1,"cachedMarkedDoc":"<p class=\"mb2 px1\">This is a sample showing how to implement Tic-Tac-Toe. This includes:</p><pre><code>*   How <span class=\"hljs-keyword\">to</span> use `amp-state` <span class=\"hljs-keyword\">to</span> maintain the <span class=\"hljs-keyword\">state</span> of play.\n*   How <span class=\"hljs-keyword\">to</span> use _expressions_ <span class=\"hljs-keyword\">to</span> detect winning moves.\n*   How <span class=\"hljs-keyword\">to</span> use _actions_ and _events_ <span class=\"hljs-keyword\">to</span> create interative gameplay.</code></pre>","isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":0,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"\nThis is a sample showing how to implement Tic-Tac-Toe. This includes:\n\n    *   How to use `amp-state` to maintain the state of play.\n    *   How to use _expressions_ to detect winning moves.\n    *   How to use _actions_ and _events_ to create interative gameplay.\n\n"},{"doc_":"\n","code":"<!doctype html>\n<html ⚡>\n<head>\n<meta charset=\"utf-8\">\n    <title>Tic-Tac-Toe</title>\n    <link rel=\"canonical\" href=\"http://localhost:8080/documentation/examples/interactivity-dynamic-content/tic_tac_toe/index.html\">\n    <meta name=\"viewport\" content=\"width=device-width,minimum-scale=1,initial-scale=1\">\n    <script async src=\"https://cdn.ampproject.org/v0.js\"></script>\n","preview":"","inBody":false,"id":2,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":0,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":" \n"},{"doc_":"## Setup\n","code":"","preview":"","inBody":false,"id":3,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":0,"headings":[{"id":"setup","name":"Setup"}],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"## Setup\n"},{"doc_":"`amp-bind` is required for interactive gameplay. \n","code":"<script async custom-element=\"amp-bind\" src=\"https://cdn.ampproject.org/v0/amp-bind-0.1.js\"></script>\n","preview":"","inBody":false,"id":4,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":4,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"`amp-bind` is required for interactive gameplay. \n"},{"doc_":"","code":"<style amp-custom>\n  .board-component {\n    margin: 5em auto;\n    max-width: 800px;\n    padding: 0 1em;\n  }\n  .results-component .hide {\n    display: none;\n  }\n  .results-component .show {\n    display: show;\n  }\n  .board-component table {\n    margin: auto;\n    border: 0;\n    border-collapse: collapse;\n  }\n  .board-component td {\n    border: 0;\n    padding: 0;\n  }\n  .board-component .cell {\n    width: 5.25em;\n    height: 5.25em;\n    border-color: #5ADAFD;\n    border-style: solid;\n    border: 0;\n  }\n  .board-component .cell-vert {\n    border-left: 0.25em solid #5ADAFD;\n    border-right: 0.25em solid #5ADAFD;\n  }\n  .board-component .cell-horiz {\n    border-top: 0.25em solid #5ADAFD;\n    border-bottom: 0.25em solid #5ADAFD;\n  }\n  .board-component .win {\n    background: lightgrey;\n  }\n  .board-component .in-play {\n    background: none;\n  }\n  .board-component .grid-button {\n    width: 100%;\n    height: 100%;\n    border: 0;\n    box-shadow: none;\n    border-radius: 0px;\n    font-size: 2em;\n    padding: 0;\n    margin: 0;\n  }\n  .board-component .grid-button:active {\n    border: 0;\n  }\n  .reset-component {\n    margin: 2em auto;\n    display: flex;\n    justify-content: center;\n  }\n  .reset-component .reset-button {\n    font-size: 1rem;\n    line-height: 1.125rem;\n    padding: .7em .8em;\n    text-decoration: none;\n    white-space: nowrap;\n    word-wrap: normal;\n    vertical-align: middle;\n    cursor: pointer;\n    background-color: #fff;\n    color: #5ADAFD;\n    border: 1px solid #5ADAFD\n  }\n</style>\n<style amp-boilerplate>body{-webkit-animation:-amp-start 8s steps(1,end) 0s 1 normal both;-moz-animation:-amp-start 8s steps(1,end) 0s 1 normal both;-ms-animation:-amp-start 8s steps(1,end) 0s 1 normal both;animation:-amp-start 8s steps(1,end) 0s 1 normal both}@-webkit-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-moz-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-ms-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-o-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}</style>\n<noscript>\n  <style amp-boilerplate>body{-webkit-animation:none;-moz-animation:none;-ms-animation:none;animation:none}</style>\n</noscript>\n\n</head>\n<body>\n","preview":"","inBody":false,"id":5,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":4,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":""},{"doc_":"## Initial game state\n","code":"","preview":"","inBody":true,"id":6,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":0,"headings":[{"id":"initial-game-state","name":"Initial game state"}],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"## Initial game state\n"},{"doc_":"We use an `amp-state` called `gameState` to keep the state of play. Additionally, some state values are not initialized but are explained below: \n","code":"","preview":"","inBody":true,"id":7,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":0,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"We use an `amp-state` called `gameState` to keep the state of play. Additionally, some state values are not initialized but are explained below: \n"},{"doc_":"\n*   `currentPlayer`: Can be 1 or -1, for ⚡ and O respectively.\n*   `board`: Stores the state of the board. This object has 9 properties, from `a` to `i`, for the tiles from top-left to bottom-right.\n*   `tr`,`mr`,`br`,`lc`,`mc`,`rc`,`fd`,`bd`: Read as **T**op **R**ow, **M**iddle **R**ow, and so on, these 8 values hold the _tallies_ towards each of the possible winning states.\n\n","code":"<amp-state id=\"gameState\">\n  <script type=\"application/json\">\n    {\n      \"currentPlayer\": 1,\n      \"displayValues\": {\n        \"-1\": \"O\",\n        \"1\": \"⚡\"\n      }\n    }\n  </script>\n</amp-state>\n","preview":"  <amp-state id=\"gameState\">\n    <script type=\"application/json\">\n      {\n        \"currentPlayer\": 1,\n        \"displayValues\": {\n          \"-1\": \"O\",\n          \"1\": \"⚡\"\n        }\n      }\n    </script>\n  </amp-state>\n","inBody":true,"id":8,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":2,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"\n*   `currentPlayer`: Can be 1 or -1, for ⚡ and O respectively.\n*   `board`: Stores the state of the board. This object has 9 properties, from `a` to `i`, for the tiles from top-left to bottom-right.\n*   `tr`,`mr`,`br`,`lc`,`mc`,`rc`,`fd`,`bd`: Read as **T**op **R**ow, **M**iddle **R**ow, and so on, these 8 values hold the _tallies_ towards each of the possible winning states.\n\n"},{"doc_":"","code":"\n","preview":"\n","inBody":true,"id":9,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":0,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":""},{"doc_":"## Showing a win\n","code":"","preview":"","inBody":true,"id":10,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":0,"headings":[{"id":"showing-a-win","name":"Showing a win"}],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"## Showing a win\n"},{"doc_":"To detect a win, we check whether any of the tallies has reached positive or negative 3. \n","code":"<div class=\"results-component\">\n  <h1 [class]=\"max(abs(tr),abs(br),abs(lc),abs(rc),abs(fd),abs(bd),abs(mc),abs(mr)) == 3 ? 'hide' : 'show'\">Let's play!</h1>\n  <h1 [class]=\"max(tr,br,lc,rc,fd,bd,mc,mr) == 3 ? 'show' : 'hide'\"\n    class=\"hide\">⚡ wins!!!</h1>\n  <h1 [class]=\"min(tr,br,lc,rc,fd,bd,mc,mr) == -3 ? 'show' : 'hide'\"\n    class=\"hide\">O wins!!!</h1>\n</div>\n","preview":"  <div class=\"results-component\">\n    <h1 [class]=\"max(abs(tr),abs(br),abs(lc),abs(rc),abs(fd),abs(bd),abs(mc),abs(mr)) == 3 ? 'hide' : 'show'\">Let's play!</h1>\n    <h1 [class]=\"max(tr,br,lc,rc,fd,bd,mc,mr) == 3 ? 'show' : 'hide'\"\n      class=\"hide\">⚡ wins!!!</h1>\n    <h1 [class]=\"min(tr,br,lc,rc,fd,bd,mc,mr) == -3 ? 'show' : 'hide'\"\n      class=\"hide\">O wins!!!</h1>\n  </div>\n","inBody":true,"id":11,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":2,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"To detect a win, we check whether any of the tallies has reached positive or negative 3. \n"},{"doc_":"","code":"\n","preview":"\n","inBody":true,"id":12,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":0,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":""},{"doc_":"## Handling a player's turn\n","code":"","preview":"","inBody":true,"id":13,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":0,"headings":[{"id":"handling-a-player's-turn","name":"Handling a player's turn"}],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"## Handling a player's turn\n"},{"doc_":"Each tile of the playing board is a button. When a move is played, state is updated:\n\n*   The appropriate tallies are incremented or decremented. For example, playing top-left alters the tally for 3 possible winning states: `tr`,`lc` and `bd` (top row, left column and backward diagonal).\n\n*   The state of the `board` is updated, to record that this tile has been filled.\n\n*   The game play is switched to the other play by multiplying the current player by `-1`.\n\nDisplay attributes for each tile are updated based on this change in state:\n\n*   `[text]`: Each tile either contains nothing, or the appropriate value from `board`.\n\n*   `[class]`: If any of the winning states for this tile has been reached, the background is changed accordingly.\n\n*   `[disabled]`: This button must be disabled if either a win has occurred, or the tile already played.\n\n","code":"<div class=\"board-component\">\n  <table>\n    <tbody>\n      <tr>\n        <td class=\"cell\">\n          <button on=\"tap:AMP.setState({\n                        tr: tr + gameState.currentPlayer,\n                        lc: lc + gameState.currentPlayer,\n                        bd: bd + gameState.currentPlayer,\n                        board: {\n                          a: gameState.displayValues[gameState.currentPlayer]\n                        },\n                        gameState: {\n                          currentPlayer: gameState.currentPlayer * -1\n                        }\n                      })\"\n            [text]=\"board.a ? board.a : ''\"\n            [class]=\"max(abs(tr),abs(lc),abs(bd)) == 3 ? 'grid-button win' : 'grid-button in-play'\"\n            [disabled]=\"board.a || max(abs(tr),abs(br),abs(lc),abs(rc),abs(fd),abs(bd),abs(mc),abs(mr)) == 3\"\n            class=\"grid-button in-play\">\n          </button>\n        </td>\n        <td class=\"cell cell-vert\">\n          <button on=\"tap:AMP.setState({\n                        tr: tr + gameState.currentPlayer,\n                        mc: mc + gameState.currentPlayer,\n                        board: {\n                          b: gameState.displayValues[gameState.currentPlayer]\n                        },\n                        gameState: {\n                          currentPlayer: gameState.currentPlayer * -1\n                        }\n                      })\"\n            [text]=\"board.b ? board.b : ''\"\n            [class]=\"max(abs(tr),abs(mc)) == 3 ? 'grid-button win' : 'grid-button in-play'\"\n            [disabled]=\"board.b || max(abs(tr),abs(br),abs(lc),abs(rc),abs(fd),abs(bd),abs(mc),abs(mr)) == 3\"\n            class=\"grid-button in-play\">\n          </button>\n        </td>\n        <td class=\"cell\">\n          <button on=\"tap:AMP.setState({\n                        tr: tr + gameState.currentPlayer,\n                        rc: rc + gameState.currentPlayer,\n                        fd: fd + gameState.currentPlayer,\n                        board: {\n                          c: gameState.displayValues[gameState.currentPlayer]\n                        },\n                        gameState: {\n                          currentPlayer: gameState.currentPlayer * -1\n                        }\n                      })\"\n            [text]=\"board.c ? board.c : ''\"\n            [class]=\"max(abs(tr),abs(rc),abs(fd)) == 3 ? 'grid-button win' : 'grid-button in-play'\"\n            [disabled]=\"board.c || max(abs(tr),abs(br),abs(lc),abs(rc),abs(fd),abs(bd),abs(mc),abs(mr)) == 3\"\n            class=\"grid-button in-play\">\n          </button>\n        </td>\n      </tr>\n      <tr>\n        <td class=\"cell cell-horiz\">\n          <button on=\"tap:AMP.setState({\n                        mr: mr + gameState.currentPlayer,\n                        lc: lc + gameState.currentPlayer,\n                        board: {\n                          d: gameState.displayValues[gameState.currentPlayer]\n                        },\n                        gameState: {\n                          currentPlayer: gameState.currentPlayer * -1\n                        }\n                      })\"\n            [text]=\"board.d ? board.d : ''\"\n            [class]=\"max(abs(mr),abs(lc)) == 3 ? 'grid-button win' : 'grid-button in-play'\"\n            [disabled]=\"board.d || max(abs(tr),abs(br),abs(lc),abs(rc),abs(fd),abs(bd),abs(mc),abs(mr)) == 3\"\n            class=\"grid-button in-play\">\n          </button>\n        </td>\n        <td class=\"cell cell-horiz cell-vert\">\n          <button on=\"tap:AMP.setState({\n                        mr: mr + gameState.currentPlayer,\n                        mc: mc + gameState.currentPlayer,\n                        fd: fd + gameState.currentPlayer,bd: bd + gameState.currentPlayer,\n                        board: {\n                          e: gameState.displayValues[gameState.currentPlayer]\n                        },\n                        gameState: {\n                          currentPlayer: gameState.currentPlayer * -1\n                        }\n                      })\"\n            [text]=\"board.e ? board.e : ''\"\n            [class]=\"max(abs(mr),abs(mc),abs(fd),abs(bd)) == 3 ? 'grid-button win' : 'grid-button in-play'\"\n            [disabled]=\"board.e || max(abs(tr),abs(br),abs(lc),abs(rc),abs(fd),abs(bd),abs(mc),abs(mr)) == 3\"\n            class=\"grid-button in-play\">\n          </button>\n        </td>\n        <td class=\"cell cell-horiz\">\n          <button on=\"tap:AMP.setState({\n                        mr: mr + gameState.currentPlayer,\n                        rc: rc + gameState.currentPlayer,\n                        board: {\n                          f: gameState.displayValues[gameState.currentPlayer]\n                        },\n                        gameState: {\n                          currentPlayer: gameState.currentPlayer * -1\n                        }\n                      })\"\n            [text]=\"board.f ? board.f : ''\"\n            [class]=\"max(abs(mr),abs(rc)) == 3 ? 'grid-button win' : 'grid-button in-play'\"\n            [disabled]=\"board.f || max(abs(tr),abs(br),abs(lc),abs(rc),abs(fd),abs(bd),abs(mc),abs(mr)) == 3\"\n            class=\"grid-button in-play\">\n          </button>\n        </td>\n      </tr>\n      <tr>\n        <td class=\"cell\">\n          <button on=\"tap:AMP.setState({\n                        br: br + gameState.currentPlayer,\n                        lc: lc + gameState.currentPlayer,\n                        fd: fd + gameState.currentPlayer,\n                        board: {\n                          g: gameState.displayValues[gameState.currentPlayer]\n                        },\n                        gameState: {\n                          currentPlayer: gameState.currentPlayer * -1\n                        }\n                      })\"\n            [text]=\"board.g ? board.g : ''\"\n            [class]=\"max(abs(br),abs(lc),abs(fd)) == 3 ? 'grid-button win' : 'grid-button in-play'\"\n            [disabled]=\"board.g || max(abs(tr),abs(br),abs(lc),abs(rc),abs(fd),abs(bd),abs(mc),abs(mr)) == 3\"\n            class=\"grid-button in-play\">\n          </button>\n        </td>\n        <td class=\"cell cell-vert\">\n          <button on=\"tap:AMP.setState({\n                        br: br + gameState.currentPlayer,\n                        mc: mc + gameState.currentPlayer,\n                        board: {\n                          h: gameState.displayValues[gameState.currentPlayer]\n                        },\n                        gameState: {\n                          currentPlayer: gameState.currentPlayer * -1\n                        }\n                      })\"\n            [text]=\"board.h ? board.h : ''\"\n            [class]=\"max(abs(br),abs(mc)) == 3 ? 'grid-button win' : 'grid-button in-play'\"\n            [disabled]=\"board.h || max(abs(tr),abs(br),abs(lc),abs(rc),abs(fd),abs(bd),abs(mc),abs(mr)) == 3\"\n            class=\"grid-button in-play\">\n          </button>\n        </td>\n        <td class=\"cell\">\n          <button on=\"tap:AMP.setState({\n                        br: br + gameState.currentPlayer,\n                        rc: rc + gameState.currentPlayer,\n                        bd: bd + gameState.currentPlayer,\n                        board: {\n                          i: gameState.displayValues[gameState.currentPlayer]\n                        },\n                        gameState: {\n                          currentPlayer: gameState.currentPlayer * -1\n                        }\n                      })\"\n            [text]=\"board.i ? board.i : ''\"\n            [class]=\"max(abs(br),abs(rc), abs(bd)) == 3 ? 'grid-button win' : 'grid-button in-play'\"\n            [disabled]=\"board.i || max(abs(tr),abs(br),abs(lc),abs(rc),abs(fd),abs(bd),abs(mc),abs(mr)) == 3\"\n            class=\"grid-button in-play\">\n          </button>\n        </td>\n      </tr>\n    </tbody>\n  </table>\n</div>\n","preview":"  <div class=\"board-component\">\n    <table>\n      <tbody>\n        <tr>\n          <td class=\"cell\">\n            <button on=\"tap:AMP.setState({\n                          tr: tr + gameState.currentPlayer,\n                          lc: lc + gameState.currentPlayer,\n                          bd: bd + gameState.currentPlayer,\n                          board: {\n                            a: gameState.displayValues[gameState.currentPlayer]\n                          },\n                          gameState: {\n                            currentPlayer: gameState.currentPlayer * -1\n                          }\n                        })\"\n              [text]=\"board.a ? board.a : ''\"\n              [class]=\"max(abs(tr),abs(lc),abs(bd)) == 3 ? 'grid-button win' : 'grid-button in-play'\"\n              [disabled]=\"board.a || max(abs(tr),abs(br),abs(lc),abs(rc),abs(fd),abs(bd),abs(mc),abs(mr)) == 3\"\n              class=\"grid-button in-play\">\n            </button>\n          </td>\n          <td class=\"cell cell-vert\">\n            <button on=\"tap:AMP.setState({\n                          tr: tr + gameState.currentPlayer,\n                          mc: mc + gameState.currentPlayer,\n                          board: {\n                            b: gameState.displayValues[gameState.currentPlayer]\n                          },\n                          gameState: {\n                            currentPlayer: gameState.currentPlayer * -1\n                          }\n                        })\"\n              [text]=\"board.b ? board.b : ''\"\n              [class]=\"max(abs(tr),abs(mc)) == 3 ? 'grid-button win' : 'grid-button in-play'\"\n              [disabled]=\"board.b || max(abs(tr),abs(br),abs(lc),abs(rc),abs(fd),abs(bd),abs(mc),abs(mr)) == 3\"\n              class=\"grid-button in-play\">\n            </button>\n          </td>\n          <td class=\"cell\">\n            <button on=\"tap:AMP.setState({\n                          tr: tr + gameState.currentPlayer,\n                          rc: rc + gameState.currentPlayer,\n                          fd: fd + gameState.currentPlayer,\n                          board: {\n                            c: gameState.displayValues[gameState.currentPlayer]\n                          },\n                          gameState: {\n                            currentPlayer: gameState.currentPlayer * -1\n                          }\n                        })\"\n              [text]=\"board.c ? board.c : ''\"\n              [class]=\"max(abs(tr),abs(rc),abs(fd)) == 3 ? 'grid-button win' : 'grid-button in-play'\"\n              [disabled]=\"board.c || max(abs(tr),abs(br),abs(lc),abs(rc),abs(fd),abs(bd),abs(mc),abs(mr)) == 3\"\n              class=\"grid-button in-play\">\n            </button>\n          </td>\n        </tr>\n        <tr>\n          <td class=\"cell cell-horiz\">\n            <button on=\"tap:AMP.setState({\n                          mr: mr + gameState.currentPlayer,\n                          lc: lc + gameState.currentPlayer,\n                          board: {\n                            d: gameState.displayValues[gameState.currentPlayer]\n                          },\n                          gameState: {\n                            currentPlayer: gameState.currentPlayer * -1\n                          }\n                        })\"\n              [text]=\"board.d ? board.d : ''\"\n              [class]=\"max(abs(mr),abs(lc)) == 3 ? 'grid-button win' : 'grid-button in-play'\"\n              [disabled]=\"board.d || max(abs(tr),abs(br),abs(lc),abs(rc),abs(fd),abs(bd),abs(mc),abs(mr)) == 3\"\n              class=\"grid-button in-play\">\n            </button>\n          </td>\n          <td class=\"cell cell-horiz cell-vert\">\n            <button on=\"tap:AMP.setState({\n                          mr: mr + gameState.currentPlayer,\n                          mc: mc + gameState.currentPlayer,\n                          fd: fd + gameState.currentPlayer,bd: bd + gameState.currentPlayer,\n                          board: {\n                            e: gameState.displayValues[gameState.currentPlayer]\n                          },\n                          gameState: {\n                            currentPlayer: gameState.currentPlayer * -1\n                          }\n                        })\"\n              [text]=\"board.e ? board.e : ''\"\n              [class]=\"max(abs(mr),abs(mc),abs(fd),abs(bd)) == 3 ? 'grid-button win' : 'grid-button in-play'\"\n              [disabled]=\"board.e || max(abs(tr),abs(br),abs(lc),abs(rc),abs(fd),abs(bd),abs(mc),abs(mr)) == 3\"\n              class=\"grid-button in-play\">\n            </button>\n          </td>\n          <td class=\"cell cell-horiz\">\n            <button on=\"tap:AMP.setState({\n                          mr: mr + gameState.currentPlayer,\n                          rc: rc + gameState.currentPlayer,\n                          board: {\n                            f: gameState.displayValues[gameState.currentPlayer]\n                          },\n                          gameState: {\n                            currentPlayer: gameState.currentPlayer * -1\n                          }\n                        })\"\n              [text]=\"board.f ? board.f : ''\"\n              [class]=\"max(abs(mr),abs(rc)) == 3 ? 'grid-button win' : 'grid-button in-play'\"\n              [disabled]=\"board.f || max(abs(tr),abs(br),abs(lc),abs(rc),abs(fd),abs(bd),abs(mc),abs(mr)) == 3\"\n              class=\"grid-button in-play\">\n            </button>\n          </td>\n        </tr>\n        <tr>\n          <td class=\"cell\">\n            <button on=\"tap:AMP.setState({\n                          br: br + gameState.currentPlayer,\n                          lc: lc + gameState.currentPlayer,\n                          fd: fd + gameState.currentPlayer,\n                          board: {\n                            g: gameState.displayValues[gameState.currentPlayer]\n                          },\n                          gameState: {\n                            currentPlayer: gameState.currentPlayer * -1\n                          }\n                        })\"\n              [text]=\"board.g ? board.g : ''\"\n              [class]=\"max(abs(br),abs(lc),abs(fd)) == 3 ? 'grid-button win' : 'grid-button in-play'\"\n              [disabled]=\"board.g || max(abs(tr),abs(br),abs(lc),abs(rc),abs(fd),abs(bd),abs(mc),abs(mr)) == 3\"\n              class=\"grid-button in-play\">\n            </button>\n          </td>\n          <td class=\"cell cell-vert\">\n            <button on=\"tap:AMP.setState({\n                          br: br + gameState.currentPlayer,\n                          mc: mc + gameState.currentPlayer,\n                          board: {\n                            h: gameState.displayValues[gameState.currentPlayer]\n                          },\n                          gameState: {\n                            currentPlayer: gameState.currentPlayer * -1\n                          }\n                        })\"\n              [text]=\"board.h ? board.h : ''\"\n              [class]=\"max(abs(br),abs(mc)) == 3 ? 'grid-button win' : 'grid-button in-play'\"\n              [disabled]=\"board.h || max(abs(tr),abs(br),abs(lc),abs(rc),abs(fd),abs(bd),abs(mc),abs(mr)) == 3\"\n              class=\"grid-button in-play\">\n            </button>\n          </td>\n          <td class=\"cell\">\n            <button on=\"tap:AMP.setState({\n                          br: br + gameState.currentPlayer,\n                          rc: rc + gameState.currentPlayer,\n                          bd: bd + gameState.currentPlayer,\n                          board: {\n                            i: gameState.displayValues[gameState.currentPlayer]\n                          },\n                          gameState: {\n                            currentPlayer: gameState.currentPlayer * -1\n                          }\n                        })\"\n              [text]=\"board.i ? board.i : ''\"\n              [class]=\"max(abs(br),abs(rc), abs(bd)) == 3 ? 'grid-button win' : 'grid-button in-play'\"\n              [disabled]=\"board.i || max(abs(tr),abs(br),abs(lc),abs(rc),abs(fd),abs(bd),abs(mc),abs(mr)) == 3\"\n              class=\"grid-button in-play\">\n            </button>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n","inBody":true,"id":14,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":2,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"Each tile of the playing board is a button. When a move is played, state is updated:\n\n          *   The appropriate tallies are incremented or decremented. For example, playing top-left alters the tally for 3 possible winning states: `tr`,`lc` and `bd` (top row, left column and backward diagonal).\n          *   The state of the `board` is updated, to record that this tile has been filled.\n          *   The game play is switched to the other play by multiplying the current player by `-1`.\n\n      Display attributes for each tile are updated based on this change in state:\n\n          *   `[text]`: Each tile either contains nothing, or the appropriate value from `board`.\n          *   `[class]`: If any of the winning states for this tile has been reached, the background is changed accordingly.\n          *   `[disabled]`: This button must be disabled if either a win has occurred, or the tile already played.\n \n"},{"doc_":"","code":"\n","preview":"\n","inBody":true,"id":15,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":0,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":""},{"doc_":"## Resetting the game state\n","code":"","preview":"","inBody":true,"id":16,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":0,"headings":[{"id":"resetting-the-game-state","name":"Resetting the game state"}],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"## Resetting the game state\n"},{"doc_":"To start a new game, the `board` and 8 tallies are reset to `null` and the `currentPlayer` reset to `⚡`. \n","code":"<div class=\"reset-component\">\n  <button class=\"reset-button\"\n    on=\"tap:AMP.setState({\n                gameState: {\n                  currentPlayer: 1,\n                  displayValues: {\n                    '-1': 'O',\n                    '1': '⚡'\n                  }\n                },\n                tr: null,\n                mr: null,\n                br: null,\n                lc: null,\n                mc: null,\n                rc: null,\n                fd: null,\n                bd: null,\n                board: null\n              })\">\n    Restart game\n  </button>\n</div>\n","preview":"  <div class=\"reset-component\">\n    <button class=\"reset-button\"\n      on=\"tap:AMP.setState({\n                  gameState: {\n                    currentPlayer: 1,\n                    displayValues: {\n                      '-1': 'O',\n                      '1': '⚡'\n                    }\n                  },\n                  tr: null,\n                  mr: null,\n                  br: null,\n                  lc: null,\n                  mc: null,\n                  rc: null,\n                  fd: null,\n                  bd: null,\n                  board: null\n                })\">\n      Restart game\n    </button>\n  </div>\n","inBody":true,"id":17,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":2,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"To start a new game, the `board` and 8 tallies are reset to `null` and the `currentPlayer` reset to `⚡`. \n"},{"doc_":"## Top tips\n","code":"","preview":"","inBody":true,"id":18,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":0,"headings":[{"id":"top-tips","name":"Top tips"}],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"## Top tips\n"},{"doc_":"Put ⚡ in the center square! \n","code":"","preview":"","inBody":true,"id":19,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":0,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"Put ⚡ in the center square! \n"},{"doc_":"","code":"</body>\n</html>\n","preview":"","inBody":false,"id":20,"cachedMarkedDoc":false,"isLastSection":true,"isFirstSection":false,"commentOffset":0,"codeOffset":0,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":""}],"head":"<meta charset=\"utf-8\">\n    <title>Tic-Tac-Toe</title>\n    <link rel=\"canonical\" href=\"http://localhost:8080/documentation/examples/interactivity-dynamic-content/tic_tac_toe/index.html\">\n    <meta name=\"viewport\" content=\"width=device-width,minimum-scale=1,initial-scale=1\">\n    <script async src=\"https://cdn.ampproject.org/v0.js\"></script>\n    <script async custom-element=\"amp-bind\" src=\"https://cdn.ampproject.org/v0/amp-bind-0.1.js\"></script>\n    <style amp-boilerplate>body{-webkit-animation:-amp-start 8s steps(1,end) 0s 1 normal both;-moz-animation:-amp-start 8s steps(1,end) 0s 1 normal both;-ms-animation:-amp-start 8s steps(1,end) 0s 1 normal both;animation:-amp-start 8s steps(1,end) 0s 1 normal both}@-webkit-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-moz-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-ms-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-o-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}</style>\n    <noscript>\n      <style amp-boilerplate>body{-webkit-animation:none;-moz-animation:none;-ms-animation:none;animation:none}</style>\n    </noscript>\n\n","styles":"      .board-component {\n        margin: 5em auto;\n        max-width: 800px;\n        padding: 0 1em;\n      }\n      .results-component .hide {\n        display: none;\n      }\n      .results-component .show {\n        display: show;\n      }\n      .board-component table {\n        margin: auto;\n        border: 0;\n        border-collapse: collapse;\n      }\n      .board-component td {\n        border: 0;\n        padding: 0;\n      }\n      .board-component .cell {\n        width: 5.25em;\n        height: 5.25em;\n        border-color: #5ADAFD;\n        border-style: solid;\n        border: 0;\n      }\n      .board-component .cell-vert {\n        border-left: 0.25em solid #5ADAFD;\n        border-right: 0.25em solid #5ADAFD;\n      }\n      .board-component .cell-horiz {\n        border-top: 0.25em solid #5ADAFD;\n        border-bottom: 0.25em solid #5ADAFD;\n      }\n      .board-component .win {\n        background: lightgrey;\n      }\n      .board-component .in-play {\n        background: none;\n      }\n      .board-component .grid-button {\n        width: 100%;\n        height: 100%;\n        border: 0;\n        box-shadow: none;\n        border-radius: 0px;\n        font-size: 2em;\n        padding: 0;\n        margin: 0;\n      }\n      .board-component .grid-button:active {\n        border: 0;\n      }\n      .reset-component {\n        margin: 2em auto;\n        display: flex;\n        justify-content: center;\n      }\n      .reset-component .reset-button {\n        font-size: 1rem;\n        line-height: 1.125rem;\n        padding: .7em .8em;\n        text-decoration: none;\n        white-space: nowrap;\n        word-wrap: normal;\n        vertical-align: middle;\n        cursor: pointer;\n        background-color: #fff;\n        color: #5ADAFD;\n        border: 1px solid #5ADAFD\n      }\n","title":"Tic-Tac-Toe","metadata":{"preview":"default","teaserImage":"/static/samples/img/teaser/tictactoe.png","author":"garanj"},"body":"<body>","elementsAfterBody":"","isAmpStory":false,"isAmpWeb":true,"isAmpAds":false,"isAmpEmail":false,"firstImage":"/favicons/android-chrome-256x256.png","lang":"en","_description":"This is a sample showing how to implement Tic-Tac-Toe."},"route":"/documentation/examples/interactivity-dynamic-content/tic_tac_toe/index.html"}