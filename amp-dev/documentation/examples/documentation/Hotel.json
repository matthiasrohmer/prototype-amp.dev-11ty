{"filePath":"examples/source/e-commerce/Hotel/index.html","source":"<!--\n  ## Introduction\n\n  This is a sample showing how to implement a hotel page. It features room availability based on date selection and a pet-friendly filter on page data. The room list resizes automatically after filtering and the user is shown a message in case of no results. The user can enlarge photos and swipe rooms by using a gallery.\n\n--><!-- -->\n<!doctype html>\n<html ‚ö°>\n<head>\n<meta charset=\"utf-8\">\n  <title>Hotel</title>\n<script async src=\"https://cdn.ampproject.org/v0.js\"></script>\n<!-- ## Setup -->\n<!--\n  We use a few AMP extensions to dynamically render a list of rooms. We use `amp-form` to send a filter request to the server.\n-->\n<script async custom-element=\"amp-form\" src=\"https://cdn.ampproject.org/v0/amp-form-0.1.js\"></script>\n<!--\n  We use `amp-mustache` as a template rendering engine for `amp-list`.\n-->\n<script async custom-template=\"amp-mustache\" src=\"https://cdn.ampproject.org/v0/amp-mustache-0.2.js\"></script>\n<!--\n  We use `amp-list` to dynamically show a list of rooms.\n-->\n<script async custom-element=\"amp-list\" src=\"https://cdn.ampproject.org/v0/amp-list-0.1.js\"></script>\n<!--\n  We use `amp-bind` to filter rooms based on their availability.\n-->\n<script async custom-element=\"amp-bind\" src=\"https://cdn.ampproject.org/v0/amp-bind-0.1.js\"></script>\n<!--\n  We use `amp-date-picker` to simplify entering dates for checking room availability.\n-->\n<script async custom-element=\"amp-date-picker\" src=\"https://cdn.ampproject.org/v0/amp-date-picker-0.1.js\"></script>\n<!--\n  We use `amp-lightbox-gallery` to make it possible enlarge an image upon clicking ans swipe throughout all the images.\n-->\n<script async custom-element=\"amp-lightbox-gallery\" src=\"https://cdn.ampproject.org/v0/amp-lightbox-gallery-0.1.js\"></script>\n<!--\n  We use `amp-fit-text` to fit the hotel name to the available space.\n-->\n<script async custom-element=\"amp-fit-text\" src=\"https://cdn.ampproject.org/v0/amp-fit-text-0.1.js\"></script>\n<link rel=\"canonical\" href=\"http://localhost:8080/documentation/examples/e-commerce/hotel/index.html\">\n<meta name=\"viewport\" content=\"width=device-width,minimum-scale=1,initial-scale=1\">\n<style amp-boilerplate>body{-webkit-animation:-amp-start 8s steps(1,end) 0s 1 normal both;-moz-animation:-amp-start 8s steps(1,end) 0s 1 normal both;-ms-animation:-amp-start 8s steps(1,end) 0s 1 normal both;animation:-amp-start 8s steps(1,end) 0s 1 normal both}@-webkit-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-moz-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-ms-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-o-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}</style><noscript><style amp-boilerplate>body{-webkit-animation:none;-moz-animation:none;-ms-animation:none;animation:none}</style></noscript>\n\n<style amp-custom>\n  .rooms [role=listitem] {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n  }\n  .rooms [role=listitem] > * {\n    margin-right: 16px\n  }\n  .rooms [role=listitem] button {\n    margin-left: auto;\n  }\n</style>\n</head>\n<body>\n  <h1>\n    <amp-fit-text width=\"300\" height=\"45\" layout=\"responsive\" max-font-size=\"45\">\n      The Ampsterdam\n    </amp-fit-text>\n  </h1>\n  <p>The fastest hotel in town</p>\n  <h2>When do you want to travel?</h2>\n  <!-- ## Searching for available rooms -->\n  <!--\n  This sample shows how to search for available rooms based on date selection. You can implement an availability search by using the `amp-date-picker` as input of a form.\n\n  Here we are using `type=range` as we need 2 dates: the arriving and leaving date of an hotel reservation. Upon receiving a `submit-succes` event from the form response, we set the value of a global variable `rooms` to the form response. We are using the variable `rooms` throughout the sample to access the response from other AMP components.\n  -->\n  <form method=\"GET\" action-xhr=\"/documentation/examples/e-commerce/hotel/rooms\" target=\"_top\" on=\"submit-success:AMP.setState({\n              rooms: event.response\n          })\">\n      <amp-date-picker id=\"picker\" layout=\"container\" type=\"range\" mode=\"overlay\" locale=\"en\" format=\"YYYY-MM-DD\" min=\"2017-10-26\" month-format=\"MMM\" start-input-selector=\"#arriving\" end-input-selector=\"#leaving\">\n          <input name=\"start\" id=\"arriving\">\n          <input name=\"end\" id=\"leaving\">\n          <button on=\"tap: picker.clear\">Clear</button>\n      </amp-date-picker>\n      <input type=\"submit\" value=\"Check Availability\">\n    </form>\n\n    <!-- ## Client-side filtering -->\n    <!--\n    We want to make it possible for the user to filter rooms by pet friendliness. The filter shouldn't require an additional network request, instead it should work client-side. We implement a filter by adding a checkbox which sets a new variable, `filterPetFriendly`, whenever the value changes.\n    -->\n    <label>Show only pet friendly rooms:\n      <input type=\"checkbox\" on=\"change:AMP.setState({\n        showPetFriendlyOnly: event.checked\n      })\">\n    </label>\n\n   <!-- ## Filter implementation -->\n    <!--\n    We use `amp-bind-macro` to implement a function which filters the `amp-list` content based on the pet-friendly variable. By using `amp-bind-macro` we avoid duplicating the filter expression across the page.\n  -->\n  <amp-bind-macro id=\"filteredRooms\" expression=\"rooms.filter(room => showPetFriendlyOnly ? room.petFriendly : true)\">\n  </amp-bind-macro>\n\n  <!-- ## Room list initial state -->\n  <!--\n    We are using `amp-state` to set the initial value of the variable `rooms` to the list of rooms returned by the server.\n\n    This is necessary for client-side filtering to work after the initial page load. We are using the variable `rooms` throughout the sample to access this list from other AMP components.\n\n    Both, `amp-list` and `amp-state`, use the same endpoint.\n  -->\n  <amp-state id=\"rooms\" src=\"/documentation/examples/e-commerce/hotel/rooms\"></amp-state>\n\n  <!-- ## Room list -->\n  <!--\n    We are using `amp-list` to show a list of rooms. We bind the value of the `src` variable to the result of the function `filterRooms` so that we can show the available rooms based on the user selection.\n\n    The user can view an enlarged version of each image by clicking on it. This can be implemented using the `amp-lightbox-gallery` by adding the `lightbox` attribute to every `amp-img`; the `alt` parameter content adds also a caption for every image in the lightbox gallery.</p>\n\n    `amp-list` content takes the entire height on the page from the `height` attribute; after filtering, it could take unused space: we are resizing by binding the `height` attribute to the result of the height of the image plus the margins multiplied by the length of the list.\n  -->\n  <amp-list class=\"rooms\" layout=\"fixed-height\" height=\"800\" src=\"/documentation/examples/e-commerce/hotel/rooms\" [src]=\"filteredRooms()\" items=\".\" [height]=\"(80 + (16*2)) * filteredRooms().length\" binding=\"refresh\">\n    <template type=\"amp-mustache\">\n      <amp-img width=\"108\" height=\"80\" src=\"/static/samples/{{img}}\" lightbox alt=\"{{name}}-{{desc}}\"></amp-img>\n      <div>{{name}} {{#petFriendly}}üêæ{{/petFriendly}}</div>\n      <button>book</button>\n    </template>\n  </amp-list>\n    <!-- ## Handling empty list content -->\n    <!-- In case no rooms are available, we are showing a message to inform the user. We hide the\n      message by default and show it when the list is not empty. We are calling `filteredRooms()` function\n      from the `amp-bind-macro` to get the list of rooms filtered by user selection. -->\n  <p hidden [hidden]=\"filteredRooms().length > 0\">Sorry, no rooms available</p>\n</body></html>","document":{"sections":[{"doc_":"\n## Introduction\n\nThis is a sample showing how to implement a hotel page. It features room availability based on date selection and a pet-friendly filter on page data. The room list resizes automatically after filtering and the user is shown a message in case of no results. The user can enlarge photos and swipe rooms by using a gallery.\n\n","code":"","preview":"","inBody":false,"id":0,"cachedMarkedDoc":"<h2 id=\"introduction\" class=\"www-heading pb4 mb2 relative h3\">Introduction</h2><p class=\"mb2 px1\">This is a sample showing how to implement a hotel page. It features room availability based on date selection and a pet-friendly filter on page data. The room list resizes automatically after filtering and the user is shown a message in case of no results. The user can enlarge photos and swipe rooms by using a gallery.</p>","isLastSection":false,"isFirstSection":true,"commentOffset":0,"codeOffset":0,"headings":[{"id":"introduction","name":"Introduction"}],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"\n## Introduction\n\nThis is a sample showing how to implement a hotel page. It features room availability based on date selection and a pet-friendly filter on page data. The room list resizes automatically after filtering and the user is shown a message in case of no results. The user can enlarge photos and swipe rooms by using a gallery.\n\n\n"},{"doc_":"\n","code":"<!doctype html>\n<html ‚ö°>\n<head>\n<meta charset=\"utf-8\">\n  <title>Hotel</title>\n<script async src=\"https://cdn.ampproject.org/v0.js\"></script>\n","preview":"","inBody":false,"id":1,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":0,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":" \n"},{"doc_":"## Setup\n","code":"","preview":"","inBody":false,"id":2,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":0,"headings":[{"id":"setup","name":"Setup"}],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"## Setup\n"},{"doc_":"\nWe use a few AMP extensions to dynamically render a list of rooms. We use `amp-form` to send a filter request to the server.\n\n","code":"<script async custom-element=\"amp-form\" src=\"https://cdn.ampproject.org/v0/amp-form-0.1.js\"></script>\n","preview":"","inBody":false,"id":3,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":0,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"\nWe use a few AMP extensions to dynamically render a list of rooms. We use `amp-form` to send a filter request to the server.\n\n"},{"doc_":"\nWe use `amp-mustache` as a template rendering engine for `amp-list`.\n\n","code":"<script async custom-template=\"amp-mustache\" src=\"https://cdn.ampproject.org/v0/amp-mustache-0.2.js\"></script>\n","preview":"","inBody":false,"id":4,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":0,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"\nWe use `amp-mustache` as a template rendering engine for `amp-list`.\n\n"},{"doc_":"\nWe use `amp-list` to dynamically show a list of rooms.\n\n","code":"<script async custom-element=\"amp-list\" src=\"https://cdn.ampproject.org/v0/amp-list-0.1.js\"></script>\n","preview":"","inBody":false,"id":5,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":0,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"\nWe use `amp-list` to dynamically show a list of rooms.\n\n"},{"doc_":"\nWe use `amp-bind` to filter rooms based on their availability.\n\n","code":"<script async custom-element=\"amp-bind\" src=\"https://cdn.ampproject.org/v0/amp-bind-0.1.js\"></script>\n","preview":"","inBody":false,"id":6,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":0,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"\nWe use `amp-bind` to filter rooms based on their availability.\n\n"},{"doc_":"\nWe use `amp-date-picker` to simplify entering dates for checking room availability.\n\n","code":"<script async custom-element=\"amp-date-picker\" src=\"https://cdn.ampproject.org/v0/amp-date-picker-0.1.js\"></script>\n","preview":"","inBody":false,"id":7,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":0,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"\nWe use `amp-date-picker` to simplify entering dates for checking room availability.\n\n"},{"doc_":"\nWe use `amp-lightbox-gallery` to make it possible enlarge an image upon clicking ans swipe throughout all the images.\n\n","code":"<script async custom-element=\"amp-lightbox-gallery\" src=\"https://cdn.ampproject.org/v0/amp-lightbox-gallery-0.1.js\"></script>\n","preview":"","inBody":false,"id":8,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":0,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"\nWe use `amp-lightbox-gallery` to make it possible enlarge an image upon clicking ans swipe throughout all the images.\n\n"},{"doc_":"\nWe use `amp-fit-text` to fit the hotel name to the available space.\n\n","code":"<script async custom-element=\"amp-fit-text\" src=\"https://cdn.ampproject.org/v0/amp-fit-text-0.1.js\"></script>\n","preview":"","inBody":false,"id":9,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":0,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"\nWe use `amp-fit-text` to fit the hotel name to the available space.\n\n"},{"doc_":"","code":"<link rel=\"canonical\" href=\"http://localhost:8080/documentation/examples/e-commerce/hotel/index.html\">\n<meta name=\"viewport\" content=\"width=device-width,minimum-scale=1,initial-scale=1\">\n<style amp-boilerplate>body{-webkit-animation:-amp-start 8s steps(1,end) 0s 1 normal both;-moz-animation:-amp-start 8s steps(1,end) 0s 1 normal both;-ms-animation:-amp-start 8s steps(1,end) 0s 1 normal both;animation:-amp-start 8s steps(1,end) 0s 1 normal both}@-webkit-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-moz-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-ms-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-o-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}</style><noscript><style amp-boilerplate>body{-webkit-animation:none;-moz-animation:none;-ms-animation:none;animation:none}</style></noscript>\n\n<style amp-custom>\n  .rooms [role=listitem] {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n  }\n  .rooms [role=listitem] > * {\n    margin-right: 16px\n  }\n  .rooms [role=listitem] button {\n    margin-left: auto;\n  }\n</style>\n</head>\n<body>\n  <h1>\n    <amp-fit-text width=\"300\"\n      height=\"45\"\n      layout=\"responsive\"\n      max-font-size=\"45\">\n      The Ampsterdam\n    </amp-fit-text>\n  </h1>\n  <p>The fastest hotel in town</p>\n  <h2>When do you want to travel?</h2>\n","preview":"  <h1>\n    <amp-fit-text width=\"300\"\n      height=\"45\"\n      layout=\"responsive\"\n      max-font-size=\"45\">\n      The Ampsterdam\n    </amp-fit-text>\n  </h1>\n  <p>The fastest hotel in town</p>\n  <h2>When do you want to travel?</h2>\n","inBody":false,"id":10,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":0,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":""},{"doc_":"## Searching for available rooms\n","code":"","preview":"","inBody":true,"id":11,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":0,"headings":[{"id":"searching-for-available-rooms","name":"Searching for available rooms"}],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"## Searching for available rooms\n"},{"doc_":"\nThis sample shows how to search for available rooms based on date selection. You can implement an availability search by using the `amp-date-picker` as input of a form.\n\nHere we are using `type=range` as we need 2 dates: the arriving and leaving date of an hotel reservation. Upon receiving a `submit-succes` event from the form response, we set the value of a global variable `rooms` to the form response. We are using the variable `rooms` throughout the sample to access the response from other AMP components.\n\n","code":"<form method=\"GET\"\n  action-xhr=\"/documentation/examples/e-commerce/hotel/rooms\"\n  target=\"_top\"\n  on=\"submit-success:AMP.setState({\n            rooms: event.response\n        })\">\n  <amp-date-picker id=\"picker\"\n    layout=\"container\"\n    type=\"range\"\n    mode=\"overlay\"\n    locale=\"en\"\n    format=\"YYYY-MM-DD\"\n    min=\"2017-10-26\"\n    month-format=\"MMM\"\n    start-input-selector=\"#arriving\"\n    end-input-selector=\"#leaving\">\n    <input name=\"start\"\n      id=\"arriving\">\n    <input name=\"end\"\n      id=\"leaving\">\n    <button on=\"tap: picker.clear\">Clear</button>\n  </amp-date-picker>\n  <input type=\"submit\"\n    value=\"Check Availability\">\n</form>\n","preview":"  <form method=\"GET\"\n    action-xhr=\"/documentation/examples/e-commerce/hotel/rooms\"\n    target=\"_top\"\n    on=\"submit-success:AMP.setState({\n              rooms: event.response\n          })\">\n    <amp-date-picker id=\"picker\"\n      layout=\"container\"\n      type=\"range\"\n      mode=\"overlay\"\n      locale=\"en\"\n      format=\"YYYY-MM-DD\"\n      min=\"2017-10-26\"\n      month-format=\"MMM\"\n      start-input-selector=\"#arriving\"\n      end-input-selector=\"#leaving\">\n      <input name=\"start\"\n        id=\"arriving\">\n      <input name=\"end\"\n        id=\"leaving\">\n      <button on=\"tap: picker.clear\">Clear</button>\n    </amp-date-picker>\n    <input type=\"submit\"\n      value=\"Check Availability\">\n  </form>\n","inBody":true,"id":12,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":2,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"\nThis sample shows how to search for available rooms based on date selection. You can implement an availability search by using the `amp-date-picker` as input of a form.\n\nHere we are using `type=range` as we need 2 dates: the arriving and leaving date of an hotel reservation. Upon receiving a `submit-succes` event from the form response, we set the value of a global variable `rooms` to the form response. We are using the variable `rooms` throughout the sample to access the response from other AMP components.\n\n"},{"doc_":"","code":"\n","preview":"\n","inBody":true,"id":13,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":0,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":""},{"doc_":"## Client-side filtering\n","code":"","preview":"","inBody":true,"id":14,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":0,"headings":[{"id":"client-side-filtering","name":"Client-side filtering"}],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"## Client-side filtering\n"},{"doc_":"\nWe want to make it possible for the user to filter rooms by pet friendliness. The filter shouldn't require an additional network request, instead it should work client-side. We implement a filter by adding a checkbox which sets a new variable, `filterPetFriendly`, whenever the value changes.\n\n","code":"<label>Show only pet friendly rooms:\n  <input type=\"checkbox\"\n    on=\"change:AMP.setState({\n      showPetFriendlyOnly: event.checked\n    })\">\n</label>\n","preview":"  <label>Show only pet friendly rooms:\n    <input type=\"checkbox\"\n      on=\"change:AMP.setState({\n        showPetFriendlyOnly: event.checked\n      })\">\n  </label>\n","inBody":true,"id":15,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":2,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"\nWe want to make it possible for the user to filter rooms by pet friendliness. The filter shouldn't require an additional network request, instead it should work client-side. We implement a filter by adding a checkbox which sets a new variable, `filterPetFriendly`, whenever the value changes.\n\n"},{"doc_":"","code":"\n","preview":"\n","inBody":true,"id":16,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":0,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":""},{"doc_":"## Filter implementation\n","code":"","preview":"","inBody":true,"id":17,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":0,"headings":[{"id":"filter-implementation","name":"Filter implementation"}],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"## Filter implementation\n"},{"doc_":"\nWe use `amp-bind-macro` to implement a function which filters the `amp-list` content based on the pet-friendly variable. By using `amp-bind-macro` we avoid duplicating the filter expression across the page.\n\n","code":"<amp-bind-macro id=\"filteredRooms\"\n  expression=\"rooms.filter(room => showPetFriendlyOnly ? room.petFriendly : true)\">\n</amp-bind-macro>\n","preview":"  <amp-bind-macro id=\"filteredRooms\"\n    expression=\"rooms.filter(room => showPetFriendlyOnly ? room.petFriendly : true)\">\n  </amp-bind-macro>\n","inBody":true,"id":18,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":2,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"\nWe use `amp-bind-macro` to implement a function which filters the `amp-list` content based on the pet-friendly variable. By using `amp-bind-macro` we avoid duplicating the filter expression across the page.\n\n"},{"doc_":"","code":"\n","preview":"\n","inBody":true,"id":19,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":0,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":""},{"doc_":"## Room list initial state\n","code":"","preview":"","inBody":true,"id":20,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":0,"headings":[{"id":"room-list-initial-state","name":"Room list initial state"}],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"## Room list initial state\n"},{"doc_":"\nWe are using `amp-state` to set the initial value of the variable `rooms` to the list of rooms returned by the server.\n\nThis is necessary for client-side filtering to work after the initial page load. We are using the variable `rooms` throughout the sample to access this list from other AMP components.\n\nBoth, `amp-list` and `amp-state`, use the same endpoint.\n\n","code":"<amp-state id=\"rooms\"\n  src=\"/documentation/examples/e-commerce/hotel/rooms\"></amp-state>\n","preview":"  <amp-state id=\"rooms\"\n    src=\"/documentation/examples/e-commerce/hotel/rooms\"></amp-state>\n","inBody":true,"id":21,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":2,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"\nWe are using `amp-state` to set the initial value of the variable `rooms` to the list of rooms returned by the server.\n\nThis is necessary for client-side filtering to work after the initial page load. We are using the variable `rooms` throughout the sample to access this list from other AMP components.\n\nBoth, `amp-list` and `amp-state`, use the same endpoint.\n\n"},{"doc_":"","code":"\n","preview":"\n","inBody":true,"id":22,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":0,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":""},{"doc_":"## Room list\n","code":"","preview":"","inBody":true,"id":23,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":0,"headings":[{"id":"room-list","name":"Room list"}],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"## Room list\n"},{"doc_":"\nWe are using `amp-list` to show a list of rooms. We bind the value of the `src` variable to the result of the function `filterRooms` so that we can show the available rooms based on the user selection.\n\nThe user can view an enlarged version of each image by clicking on it. This can be implemented using the `amp-lightbox-gallery` by adding the `lightbox` attribute to every `amp-img`; the `alt` parameter content adds also a caption for every image in the lightbox gallery.</p>\n\n`amp-list` content takes the entire height on the page from the `height` attribute; after filtering, it could take unused space: we are resizing by binding the `height` attribute to the result of the height of the image plus the margins multiplied by the length of the list.\n\n","code":"<amp-list class=\"rooms\"\n  layout=\"fixed-height\"\n  height=\"800\"\n  src=\"/documentation/examples/e-commerce/hotel/rooms\"\n  [src]=\"filteredRooms()\"\n  items=\".\"\n  [height]=\"(80 + (16*2)) * filteredRooms().length\"\n  binding=\"refresh\">\n  <template type=\"amp-mustache\">\n    <amp-img width=\"108\"\n      height=\"80\"\n      src=\"/static/samples/{{img}}\"\n      lightbox\n      alt=\"{{name}}-{{desc}}\"></amp-img>\n    <div>{{name}} {{#petFriendly}}üêæ{{/petFriendly}}</div>\n    <button>book</button>\n  </template>\n</amp-list>\n","preview":"  <amp-list class=\"rooms\"\n    layout=\"fixed-height\"\n    height=\"800\"\n    src=\"/documentation/examples/e-commerce/hotel/rooms\"\n    [src]=\"filteredRooms()\"\n    items=\".\"\n    [height]=\"(80 + (16*2)) * filteredRooms().length\"\n    binding=\"refresh\">\n    <template type=\"amp-mustache\">\n      <amp-img width=\"108\"\n        height=\"80\"\n        src=\"/static/samples/{{img}}\"\n        lightbox\n        alt=\"{{name}}-{{desc}}\"></amp-img>\n      <div>{{name}} {{#petFriendly}}üêæ{{/petFriendly}}</div>\n      <button>book</button>\n    </template>\n  </amp-list>\n","inBody":true,"id":24,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":2,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"\nWe are using `amp-list` to show a list of rooms. We bind the value of the `src` variable to the result of the function `filterRooms` so that we can show the available rooms based on the user selection.\n\nThe user can view an enlarged version of each image by clicking on it. This can be implemented using the `amp-lightbox-gallery` by adding the `lightbox` attribute to every `amp-img`; the `alt` parameter content adds also a caption for every image in the lightbox gallery.</p>\n\n`amp-list` content takes the entire height on the page from the `height` attribute; after filtering, it could take unused space: we are resizing by binding the `height` attribute to the result of the height of the image plus the margins multiplied by the length of the list.\n\n"},{"doc_":"## Handling empty list content\n","code":"","preview":"","inBody":true,"id":25,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":0,"headings":[{"id":"handling-empty-list-content","name":"Handling empty list content"}],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"## Handling empty list content\n"},{"doc_":"In case no rooms are available, we are showing a message to inform the user. We hide the\n\nmessage by default and show it when the list is not empty. We are calling `filteredRooms()` function\n\nfrom the `amp-bind-macro` to get the list of rooms filtered by user selection. \n","code":"<p hidden\n  [hidden]=\"filteredRooms().length > 0\">Sorry, no rooms available</p>\n","preview":"  <p hidden\n    [hidden]=\"filteredRooms().length > 0\">Sorry, no rooms available</p>\n","inBody":true,"id":26,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":2,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"In case no rooms are available, we are showing a message to inform the user. We hide the\n   message by default and show it when the list is not empty. We are calling `filteredRooms()` function\n   from the `amp-bind-macro` to get the list of rooms filtered by user selection. \n"},{"doc_":"","code":"</body>\n</html>\n","preview":"","inBody":false,"id":27,"cachedMarkedDoc":false,"isLastSection":true,"isFirstSection":false,"commentOffset":0,"codeOffset":0,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":""}],"head":"<meta charset=\"utf-8\">\n  <title>Hotel</title>\n<script async src=\"https://cdn.ampproject.org/v0.js\"></script>\n<script async custom-element=\"amp-form\" src=\"https://cdn.ampproject.org/v0/amp-form-0.1.js\"></script>\n<script async custom-template=\"amp-mustache\" src=\"https://cdn.ampproject.org/v0/amp-mustache-0.2.js\"></script>\n<script async custom-element=\"amp-list\" src=\"https://cdn.ampproject.org/v0/amp-list-0.1.js\"></script>\n<script async custom-element=\"amp-bind\" src=\"https://cdn.ampproject.org/v0/amp-bind-0.1.js\"></script>\n<script async custom-element=\"amp-date-picker\" src=\"https://cdn.ampproject.org/v0/amp-date-picker-0.1.js\"></script>\n<script async custom-element=\"amp-lightbox-gallery\" src=\"https://cdn.ampproject.org/v0/amp-lightbox-gallery-0.1.js\"></script>\n<script async custom-element=\"amp-fit-text\" src=\"https://cdn.ampproject.org/v0/amp-fit-text-0.1.js\"></script>\n<link rel=\"canonical\" href=\"http://localhost:8080/documentation/examples/e-commerce/hotel/index.html\">\n<meta name=\"viewport\" content=\"width=device-width,minimum-scale=1,initial-scale=1\">\n<style amp-boilerplate>body{-webkit-animation:-amp-start 8s steps(1,end) 0s 1 normal both;-moz-animation:-amp-start 8s steps(1,end) 0s 1 normal both;-ms-animation:-amp-start 8s steps(1,end) 0s 1 normal both;animation:-amp-start 8s steps(1,end) 0s 1 normal both}@-webkit-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-moz-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-ms-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-o-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}</style><noscript><style amp-boilerplate>body{-webkit-animation:none;-moz-animation:none;-ms-animation:none;animation:none}</style></noscript>\n\n","styles":"  .rooms [role=listitem] {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n  }\n  .rooms [role=listitem] > * {\n    margin-right: 16px\n  }\n  .rooms [role=listitem] button {\n    margin-left: auto;\n  }\n","title":"Hotel","metadata":{"preview":"default","experiments":["amp-date-picker","amp-lightbox-gallery"],"teaserImage":"/static/samples/img/teaser/hotel.jpg","author":"aghassemi"},"body":"<body>","elementsAfterBody":"","isAmpStory":false,"isAmpWeb":true,"isAmpAds":false,"isAmpEmail":false,"firstImage":"/favicons/android-chrome-256x256.png","lang":"en","_description":"This is a sample showing how to implement a hotel page."},"route":"/documentation/examples/e-commerce/hotel/index.html"}