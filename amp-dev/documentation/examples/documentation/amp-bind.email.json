{"filePath":"examples/source/1.components/amp-bind.html","source":"<!--\n  ## Introduction\n\n  [`amp-bind`](/amp-dev/documentation/components/reference/amp-bind-v0.1.md) allows you to add custom interactivity to your pages beyond using AMP's pre-built components.\n--><!-- -->\n<!doctype html>\n<html ⚡4email>\n<head>\n<meta charset=\"utf-8\">\n    <script async src=\"https://cdn.ampproject.org/v0.js\"></script>\n\n    <!--\n      ## Setup\n\n      Import the amp-bind component in the header.\n    -->\n    <script async custom-element=\"amp-bind\" src=\"https://cdn.ampproject.org/v0/amp-bind-0.1.js\"></script>\n    <style amp4email-boilerplate>body{visibility:hidden}</style>\n      <style amp-custom>\n        .background-green {\n          background: green;\n        }\n        .background-red {\n          background: red;\n        }\n      </style>\n  </head>\n  <body>\n\n    <!--\n      ## Basic usage\n\n      With `amp-bind`, you can update element attributes and values via bindings. Here we update the [`hidden`](/amp-dev/documentation/guides-and-tutorials/learn/amp-actions-and-events.md#globally-defined-events-and-actions) attribute based on a state variable called `hideGreeting`. On button press, we use the [`AMP.setState()`](/amp-dev/documentation/components/reference/amp-bind.md#state) action to update the state.\n    -->\n    <div>\n      <div hidden [hidden]=\"hideGreeting\">Hello World</div>\n      <button on=\"tap:AMP.setState({ hideGreeting: false })\">Show greeting</button>\n    </div>\n\n    <!--\n      ## Binding text\n\n      You can dynamically change the text value of an element by declaring a binding to the `[text]` attribute.\n    -->\n    <div>\n      <div>Hello <span [text]=\"myText\">World</span></div>\n      <button on=\"tap:AMP.setState({ myText: 'AMP' })\">Change text</button>\n    </div>\n\n    <!--\n      ## Binding CSS classes\n\n      You can dynamically change the CSS classes of an element by adding a binding to the `[class]` attribute.\n    -->\n    <div>\n      <div class=\"background-red\" [class]=\"myClass\">Hello World</div>\n      <button on=\"tap:AMP.setState({ myClass: 'background-green' })\">Change class</button>\n    </div>\n\n    <!--\n      ## Binding width and height\n\n      Basic element properties such as `width` and `height` can be updated as well.\n    -->\n    <div>\n      <amp-img src=\"https://unsplash.it/400/200\" width=\"200\" [width]=\"myImageDimension.width\" height=\"100\" [height]=\"myImageDimension.height\">\n      </amp-img>\n      <button on=\"tap:AMP.setState({\n                        myImageDimension: {\n                          width: 400,\n                          height: 200\n                        }\n                      })\">\n        Change size\n      </button>\n    </div>\n\n    <!--\n      ## Hiding & showing\n\n      This sample toggles the visibility of two divs based on a input selection. AMP provides the [`hidden` attribute](/documentation/guides-and-tutorials/learn/amp-actions-and-events#globally-defined-events-and-actions), which we use to hide and show the two divs. Some elements, such as the `select` element, fire [events](/documentation/guides-and-tutorials/learn/amp-actions-and-events#element-specific-events) we can use to update state. -->\n\n      <div>\n        <select on=\"change:AMP.setState({ option: event.value })\">\n          <option value=\"0\">No selection</option>\n          <option value=\"1\">Option 1</option>\n          <option value=\"2\">Option 2</option>\n        </select>\n        <div hidden [hidden]=\"option != 1\">\n          Option 1\n        </div>\n        <div hidden [hidden]=\"option != 2\">\n          Option 2\n        </div>\n      </div>\n\n      <!--\n        ## Initializing state\n\n        The initial value of an `amp-state` variable is `null`. However, bindings are not evaluated on page load, but on subsequent user actions. This can lead to unwanted side effects if `amp-state` variables are not correctly initialized.\n\n        In this sample, both greetings bind to different `amp-state` variables. One is initialized via an JSON string inside an `amp-state` element, the other is not. When the user triggers an `AMP.setState(...)` action, both bindings will be evaluated resulting in the first binding displaying a `null` value.\n      -->\n      <div>\n        <amp-state id=\"myText\"><script type=\"application/json\"> \"World\" </script></amp-state>\n          <div>1. Hello <span [text]=\"undefinedText\">World</span></div>\n          <div>2. Hello <span [text]=\"myText\">World</span></div>\n          <button on=\"tap:AMP.setState({ myText: 'AMP' })\">Change state</button>\n      </div>\n        <!--\n          ## Push State\n\n          `AMP.pushState()` writes state changes to the history. Navigating back, will restore the previous state.\n          To test this, increase the count and use your browser's back button to decrease the count.\n        -->\n        <div>\n          <amp-state id=\"count\"><script type=\"application/json\">1</script></amp-state>\n            <div>Item <span [text]=\"count\">1</span></div>\n            <button on=\"tap:AMP.pushState({ count: count + 1 })\">Increase count</button>\n        </div>\n\n        <!--\n          ## Debounce input events\n\n          For text input, it's a good idea to debounce the input using the `input-throttled` event.  For a more in-depth example, see [autosuggest](https://amp.dev/documentation/examples/interactivity-dynamic-content/simple_autosuggest/). -->\n        <div>\n          <amp-state id=\"name\"><script type=\"application/json\"> \"?\" </script></amp-state>\n            <input id=\"name-input\" placeholder=\"Enter a name\" on=\"input-throttled:AMP.setState({ name: event.value })\">\n            <div>Hello <span [text]=\"name\">?</span></div>\n        </div>\n\n        <!--\n         ## amp-bind-macro\n\n         [`amp-bind-macro`](/amp-dev/documentation/components/reference/amp-bind.md#defining-macros-with-amp-bind-macro) makes it possible to reuse expressions across different actions. -->\n          <div>\n            <amp-bind-macro id=\"circleArea\" arguments=\"radius\" expression=\"3.14 * radius * radius\">\n              <input type=\"number\" min=\"0\" max=\"100\" value=\"0\" on=\"input-throttled:AMP.setState({ radius: event.value })\">\n              <div>\n                The circle has an area of <span [text]=\"circleArea(radius)\">0</span>.\n              </div>\n          </amp-bind-macro></div>\n</body></html>","document":{"sections":[{"doc_":"\n## Introduction\n\n[`amp-bind`](/amp-dev/documentation/components/reference/amp-bind-v0.1.md) allows you to add custom interactivity to your pages beyond using AMP's pre-built components.\n\n","code":"","preview":"","inBody":false,"id":0,"cachedMarkedDoc":"<h2 id=\"introduction\" class=\"www-heading pb4 mb2 relative h3\">Introduction</h2><p class=\"mb2 px1\"><a href=\"/amp-dev/documentation/components/reference/amp-bind-v0.1.md\"><code>amp-bind</code></a> allows you to add custom interactivity to your pages beyond using AMP&#39;s pre-built components.</p>","isLastSection":false,"isFirstSection":true,"commentOffset":0,"codeOffset":0,"headings":[{"id":"introduction","name":"Introduction"}],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"\n## Introduction\n\n[`amp-bind`](/amp-dev/documentation/components/reference/amp-bind-v0.1.md) allows you to add custom interactivity to your pages beyond using AMP's pre-built components.\n\n"},{"doc_":"\n","code":"<!doctype html>\n<html ⚡4email>\n<head>\n<meta charset=\"utf-8\">\n    <script async src=\"https://cdn.ampproject.org/v0.js\"></script>\n\n","preview":"","inBody":false,"id":1,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":0,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":" \n"},{"doc_":"\n## Setup\n\nImport the amp-bind component in the header.\n\n","code":"<script async custom-element=\"amp-bind\" src=\"https://cdn.ampproject.org/v0/amp-bind-0.1.js\"></script>\n","preview":"","inBody":false,"id":2,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":4,"headings":[{"id":"setup","name":"Setup"}],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"\n## Setup\n\nImport the amp-bind component in the header.\n\n"},{"doc_":"","code":"<style amp4email-boilerplate>body{visibility:hidden}</style>\n  <style amp-custom>\n    .background-green {\n      background: green;\n    }\n    .background-red {\n      background: red;\n    }\n  </style>\n</head>\n<body>\n\n","preview":"\n","inBody":false,"id":3,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":4,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":""},{"doc_":"\n## Basic usage\n\nWith `amp-bind`, you can update element attributes and values via bindings. Here we update the [`hidden`](/amp-dev/documentation/guides-and-tutorials/learn/amp-actions-and-events.md#globally-defined-events-and-actions) attribute based on a state variable called `hideGreeting`. On button press, we use the [`AMP.setState()`](/amp-dev/documentation/components/reference/amp-bind.md#state) action to update the state.\n\n","code":"<div hidden\n  [hidden]=\"hideGreeting\">Hello World</div>\n<button on=\"tap:AMP.setState({ hideGreeting: false })\">Show greeting</button>","preview":"  <div>\n    <div hidden\n      [hidden]=\"hideGreeting\">Hello World</div>\n    <button on=\"tap:AMP.setState({ hideGreeting: false })\">Show greeting</button>\n  </div>\n","inBody":true,"id":4,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":2,"headings":[{"id":"basic-usage","name":"Basic usage"}],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"\n## Basic usage\n\nWith `amp-bind`, you can update element attributes and values via bindings. Here we update the [`hidden`](/amp-dev/documentation/guides-and-tutorials/learn/amp-actions-and-events.md#globally-defined-events-and-actions) attribute based on a state variable called `hideGreeting`. On button press, we use the [`AMP.setState()`](/amp-dev/documentation/components/reference/amp-bind.md#state) action to update the state.\n\n"},{"doc_":"","code":"\n","preview":"\n","inBody":true,"id":5,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":0,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":""},{"doc_":"\n## Binding text\n\nYou can dynamically change the text value of an element by declaring a binding to the `[text]` attribute.\n\n","code":"<div>Hello <span [text]=\"myText\">World</span></div>\n<button on=\"tap:AMP.setState({ myText: 'AMP' })\">Change text</button>","preview":"  <div>\n    <div>Hello <span [text]=\"myText\">World</span></div>\n    <button on=\"tap:AMP.setState({ myText: 'AMP' })\">Change text</button>\n  </div>\n\n","inBody":true,"id":6,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":2,"headings":[{"id":"binding-text","name":"Binding text"}],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"\n## Binding text\n\nYou can dynamically change the text value of an element by declaring a binding to the `[text]` attribute.\n\n"},{"doc_":"\n## Binding CSS classes\n\nYou can dynamically change the CSS classes of an element by adding a binding to the `[class]` attribute.\n\n","code":"<div class=\"background-red\"\n  [class]=\"myClass\">Hello World</div>\n<button on=\"tap:AMP.setState({ myClass: 'background-green' })\">Change class</button>","preview":"  <div>\n    <div class=\"background-red\"\n      [class]=\"myClass\">Hello World</div>\n    <button on=\"tap:AMP.setState({ myClass: 'background-green' })\">Change class</button>\n  </div>\n","inBody":true,"id":7,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":2,"headings":[{"id":"binding-css-classes","name":"Binding CSS classes"}],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"\n## Binding CSS classes\n\nYou can dynamically change the CSS classes of an element by adding a binding to the `[class]` attribute.\n\n"},{"doc_":"","code":"\n","preview":"\n","inBody":true,"id":8,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":0,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":""},{"doc_":"\n## Binding width and height\n\nBasic element properties such as `width` and `height` can be updated as well.\n\n","code":"<amp-img src=\"https://unsplash.it/400/200\"\n  width=\"200\"\n  [width]=\"myImageDimension.width\"\n  height=\"100\"\n  [height]=\"myImageDimension.height\">\n</amp-img>\n<button on=\"tap:AMP.setState({\n                    myImageDimension: {\n                      width: 400,\n                      height: 200\n                    }\n                  })\">\n  Change size\n</button>","preview":"  <div>\n    <amp-img src=\"https://unsplash.it/400/200\"\n      width=\"200\"\n      [width]=\"myImageDimension.width\"\n      height=\"100\"\n      [height]=\"myImageDimension.height\">\n    </amp-img>\n    <button on=\"tap:AMP.setState({\n                        myImageDimension: {\n                          width: 400,\n                          height: 200\n                        }\n                      })\">\n      Change size\n    </button>\n  </div>\n","inBody":true,"id":9,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":2,"headings":[{"id":"binding-width-and-height","name":"Binding width and height"}],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"\n## Binding width and height\n\nBasic element properties such as `width` and `height` can be updated as well.\n\n"},{"doc_":"","code":"\n","preview":"\n","inBody":true,"id":10,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":0,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":""},{"doc_":"\n## Hiding & showing\n\nThis sample toggles the visibility of two divs based on a input selection. AMP provides the [`hidden` attribute](/documentation/guides-and-tutorials/learn/amp-actions-and-events#globally-defined-events-and-actions), which we use to hide and show the two divs. Some elements, such as the `select` element, fire [events](/documentation/guides-and-tutorials/learn/amp-actions-and-events#element-specific-events) we can use to update state. \n","code":"<select on=\"change:AMP.setState({ option: event.value })\">\n  <option value=\"0\">No selection</option>\n  <option value=\"1\">Option 1</option>\n  <option value=\"2\">Option 2</option>\n</select>\n<div hidden\n  [hidden]=\"option != 1\">\n  Option 1\n</div>\n<div hidden\n  [hidden]=\"option != 2\">\n  Option 2\n</div>","preview":"\n  <div>\n    <select on=\"change:AMP.setState({ option: event.value })\">\n      <option value=\"0\">No selection</option>\n      <option value=\"1\">Option 1</option>\n      <option value=\"2\">Option 2</option>\n    </select>\n    <div hidden\n      [hidden]=\"option != 1\">\n      Option 1\n    </div>\n    <div hidden\n      [hidden]=\"option != 2\">\n      Option 2\n    </div>\n  </div>\n","inBody":true,"id":11,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":0,"headings":[{"id":"hiding-&-showing","name":"Hiding & showing"}],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"\n## Hiding & showing\n\nThis sample toggles the visibility of two divs based on a input selection. AMP provides the [`hidden` attribute](/documentation/guides-and-tutorials/learn/amp-actions-and-events#globally-defined-events-and-actions), which we use to hide and show the two divs. Some elements, such as the `select` element, fire [events](/documentation/guides-and-tutorials/learn/amp-actions-and-events#element-specific-events) we can use to update state. \n"},{"doc_":"","code":"\n","preview":"\n","inBody":true,"id":12,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":0,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":""},{"doc_":"\n## Initializing state\n\nThe initial value of an `amp-state` variable is `null`. However, bindings are not evaluated on page load, but on subsequent user actions. This can lead to unwanted side effects if `amp-state` variables are not correctly initialized.\n\nIn this sample, both greetings bind to different `amp-state` variables. One is initialized via an JSON string inside an `amp-state` element, the other is not. When the user triggers an `AMP.setState(...)` action, both bindings will be evaluated resulting in the first binding displaying a `null` value.\n\n","code":"<amp-state id=\"myText\">\n  <script type=\"application/json\">\n    \"World\"\n  </script>\n</amp-state>\n<div>1. Hello <span [text]=\"undefinedText\">World</span></div>\n<div>2. Hello <span [text]=\"myText\">World</span></div>\n<button on=\"tap:AMP.setState({ myText: 'AMP' })\">Change state</button>","preview":"  <div>\n    <amp-state id=\"myText\">\n      <script type=\"application/json\">\n        \"World\"\n      </script>\n    </amp-state>\n    <div>1. Hello <span [text]=\"undefinedText\">World</span></div>\n    <div>2. Hello <span [text]=\"myText\">World</span></div>\n    <button on=\"tap:AMP.setState({ myText: 'AMP' })\">Change state</button>\n  </div>\n","inBody":true,"id":13,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":2,"headings":[{"id":"initializing-state","name":"Initializing state"}],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"\n## Initializing state\n\nThe initial value of an `amp-state` variable is `null`. However, bindings are not evaluated on page load, but on subsequent user actions. This can lead to unwanted side effects if `amp-state` variables are not correctly initialized.\n\nIn this sample, both greetings bind to different `amp-state` variables. One is initialized via an JSON string inside an `amp-state` element, the other is not. When the user triggers an `AMP.setState(...)` action, both bindings will be evaluated resulting in the first binding displaying a `null` value.\n\n"},{"doc_":"\n## Push State\n\n`AMP.pushState()` writes state changes to the history. Navigating back, will restore the previous state.\nTo test this, increase the count and use your browser's back button to decrease the count.\n\n","code":"<amp-state id=\"count\">\n  <script type=\"application/json\">\n    1\n  </script>\n</amp-state>\n<div>Item <span [text]=\"count\">1</span></div>\n<button on=\"tap:AMP.pushState({ count: count + 1 })\">Increase count</button>","preview":"  <div>\n    <amp-state id=\"count\">\n      <script type=\"application/json\">\n        1\n      </script>\n    </amp-state>\n    <div>Item <span [text]=\"count\">1</span></div>\n    <button on=\"tap:AMP.pushState({ count: count + 1 })\">Increase count</button>\n  </div>\n\n","inBody":true,"id":14,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":2,"headings":[{"id":"push-state","name":"Push State"}],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"\n## Push State\n\n`AMP.pushState()` writes state changes to the history. Navigating back, will restore the previous state.\nTo test this, increase the count and use your browser's back button to decrease the count.\n\n"},{"doc_":"\n## Debounce input events\n\nFor text input, it's a good idea to debounce the input using the `input-throttled` event.  For a more in-depth example, see [autosuggest](https://amp.dev/documentation/examples/interactivity-dynamic-content/simple_autosuggest/). \n","code":"<amp-state id=\"name\">\n  <script type=\"application/json\">\n    \"?\"\n  </script>\n</amp-state>\n<input id=\"name-input\"\n  placeholder=\"Enter a name\"\n  on=\"input-throttled:AMP.setState({ name: event.value })\">\n<div>Hello <span [text]=\"name\">?</span></div>","preview":"  <div>\n    <amp-state id=\"name\">\n      <script type=\"application/json\">\n        \"?\"\n      </script>\n    </amp-state>\n    <input id=\"name-input\"\n      placeholder=\"Enter a name\"\n      on=\"input-throttled:AMP.setState({ name: event.value })\">\n    <div>Hello <span [text]=\"name\">?</span></div>\n  </div>\n\n","inBody":true,"id":15,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":2,"headings":[{"id":"debounce-input-events","name":"Debounce input events"}],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"\n## Debounce input events\n\nFor text input, it's a good idea to debounce the input using the `input-throttled` event.  For a more in-depth example, see [autosuggest](https://amp.dev/documentation/examples/interactivity-dynamic-content/simple_autosuggest/). \n"},{"doc_":"\n## amp-bind-macro\n\n[`amp-bind-macro`](/amp-dev/documentation/components/reference/amp-bind.md#defining-macros-with-amp-bind-macro) makes it possible to reuse expressions across different actions. \n","code":"<amp-bind-macro id=\"circleArea\"\n  arguments=\"radius\"\n  expression=\"3.14 * radius * radius\">\n  <input type=\"number\"\n    min=\"0\"\n    max=\"100\"\n    value=\"0\"\n    on=\"input-throttled:AMP.setState({ radius: event.value })\">\n  <div>\n    The circle has an area of <span [text]=\"circleArea(radius)\">0</span>.\n  </div>\n</amp-bind-macro>","preview":"  <div>\n    <amp-bind-macro id=\"circleArea\"\n      arguments=\"radius\"\n      expression=\"3.14 * radius * radius\">\n      <input type=\"number\"\n        min=\"0\"\n        max=\"100\"\n        value=\"0\"\n        on=\"input-throttled:AMP.setState({ radius: event.value })\">\n      <div>\n        The circle has an area of <span [text]=\"circleArea(radius)\">0</span>.\n      </div>\n    </amp-bind-macro>\n  </div>\n","inBody":true,"id":16,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":2,"headings":[{"id":"amp-bind-macro","name":"amp-bind-macro"}],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"\n## amp-bind-macro\n\n[`amp-bind-macro`](/amp-dev/documentation/components/reference/amp-bind.md#defining-macros-with-amp-bind-macro) makes it possible to reuse expressions across different actions. \n"},{"doc_":"","code":"</body>\n</html>\n","preview":"","inBody":false,"id":17,"cachedMarkedDoc":false,"isLastSection":true,"isFirstSection":false,"commentOffset":0,"codeOffset":0,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":""}],"head":"<meta charset=\"utf-8\">\n    <script async src=\"https://cdn.ampproject.org/v0.js\"></script>\n\n    <script async custom-element=\"amp-bind\" src=\"https://cdn.ampproject.org/v0/amp-bind-0.1.js\"></script>\n    <meta name=\"viewport\" content=\"width=device-width,minimum-scale=1,initial-scale=1\"><style amp-boilerplate>body{-webkit-animation:-amp-start 8s steps(1,end) 0s 1 normal both;-moz-animation:-amp-start 8s steps(1,end) 0s 1 normal both;-ms-animation:-amp-start 8s steps(1,end) 0s 1 normal both;animation:-amp-start 8s steps(1,end) 0s 1 normal both}@-webkit-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-moz-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-ms-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-o-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}</style><noscript><style amp-boilerplate>body{-webkit-animation:none;-moz-animation:none;-ms-animation:none;animation:none}</style></noscript>\n","styles":"        .background-green {\n          background: green;\n        }\n        .background-red {\n          background: red;\n        }\n","title":"amp-bind","metadata":{"author":"choumx"},"body":"<body>","elementsAfterBody":"","isAmpStory":false,"isAmpWeb":false,"isAmpAds":false,"isAmpEmail":true,"firstImage":"/favicons/android-chrome-256x256.png","lang":"en","_description":"amp-bind allows you to add custom interactivity to your pages beyond using AMP's pre-built components."},"route":"/documentation/examples/components/amp-bind.email/index.html"}