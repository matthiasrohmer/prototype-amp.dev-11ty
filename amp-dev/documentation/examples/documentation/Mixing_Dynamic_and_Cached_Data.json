{"filePath":"examples/source/interactivity-dynamic-content/Mixing_Dynamic_and_Cached_Data.html","source":"<!-- ## Introduction -->\n<!--\n  This is a sample showing how to integrate product data details such as description, price, availability etc with different data freshness requirements. AMPs can be served from the AMP Cache. Due to the AMP Cache's stale-while-invalide caching strategy, one user will see stale data until the latest version has been fetched. This might be a problem if product data needs always to be up-to-date, for example, product availability. This sample demonstrates one approach how to avoid stale data on cached AMPs.\n-->\n<!-- -->\n<!doctype html>\n<html ⚡>\n<head>\n  <meta charset=\"utf-8\">\n  <script async src=\"https://cdn.ampproject.org/v0.js\"></script>\n\n  <!-- ## Setup -->\n  <!--\n    We use `amp-list` for retrieving latest data from the server.\n  -->\n  <script async custom-element=\"amp-list\" src=\"https://cdn.ampproject.org/v0/amp-list-0.1.js\"></script>\n  <!-- We use `amp-mustache` as a templating for `amp-list` -->\n  <script async custom-template=\"amp-mustache\" src=\"https://cdn.ampproject.org/v0/amp-mustache-0.2.js\"></script>\n\n  <link rel=\"canonical\" href=\"http://localhost:8080/documentation/examples/interactivity-dynamic-content/mixing_dynamic_and_cached_data/index.html\">\n  <title>Mixing Dynamic and Cached Data</title>\n\n  <meta name=\"viewport\" content=\"width=device-width,minimum-scale=1,initial-scale=1\">\n\n  <style amp-boilerplate>body{-webkit-animation:-amp-start 8s steps(1,end) 0s 1 normal both;-moz-animation:-amp-start 8s steps(1,end) 0s 1 normal both;-ms-animation:-amp-start 8s steps(1,end) 0s 1 normal both;animation:-amp-start 8s steps(1,end) 0s 1 normal both}@-webkit-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-moz-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-ms-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-o-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}</style><noscript><style amp-boilerplate>body{-webkit-animation:none;-moz-animation:none;-ms-animation:none;animation:none}</style></noscript>\n\n</head>\n<body>\n  <!-- ## How to implement dynamic and cached product data details -->\n  <!--\n  For product details such a descriptionb or title, where are unlikely to change frequently, you don't need to do anything special.\n  To ensure that users always see the latest content, you can use the `amp-list` component which will fetch and render content directly from your server.\n   -->\n   <div>\n     <h3>My product</h3>\n     <p>This is a really great product.</p>\n     <amp-list height=\"24\"\n               layout=\"fixed-height\"\n               src=\"/static/samples/json/product.json\"\n               binding=\"no\">\n       <template type=\"amp-mustache\">\n         Price: ${{price}}\n       </template>\n     </amp-list>\n   </div>\n  <!-- if you need to make multiple calls to get all the data, that is not a problem in AMP since if multiple `amp-list` with the same `src` are found in the page, only one network call is actually made by the AMP runtime.\n\n  By checking the network tab of the Chrome dev console, you can check that this second `amp-list` does not cause a second network call.\n\n  Since we are using a [service-worker](/amp-dev/documentation/components/reference/amp-install-serviceworker-v0.1.md) you may see two similar calls one after the other to the same endpoint, so to better verify this behaviour, go to Application -> Service workers and click on Unregister.-->\n  <amp-list height=\"24\"\n            layout=\"fixed-height\"\n            src=\"/static/samples/json/product.json\"\n            binding=\"no\">\n    <template type=\"amp-mustache\">\n      Availability: {{availability}}\n    </template>\n  </amp-list>\n\n</body>\n</html>","document":{"sections":[{"doc_":"","code":"\n","preview":"","inBody":false,"id":0,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":true,"commentOffset":0,"codeOffset":0,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":""},{"doc_":"## Introduction\n","code":"","preview":"","inBody":false,"id":1,"cachedMarkedDoc":"<h2 id=\"introduction\" class=\"www-heading pb4 mb2 relative h3\">Introduction</h2>","isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":0,"headings":[{"id":"introduction","name":"Introduction"}],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"## Introduction\n"},{"doc_":"\nThis is a sample showing how to integrate product data details such as description, price, availability etc with different data freshness requirements. AMPs can be served from the AMP Cache. Due to the AMP Cache's stale-while-invalide caching strategy, one user will see stale data until the latest version has been fetched. This might be a problem if product data needs always to be up-to-date, for example, product availability. This sample demonstrates one approach how to avoid stale data on cached AMPs.\n\n","code":"","preview":"","inBody":false,"id":2,"cachedMarkedDoc":"<p class=\"mb2 px1\">This is a sample showing how to integrate product data details such as description, price, availability etc with different data freshness requirements. AMPs can be served from the AMP Cache. Due to the AMP Cache&#39;s stale-while-invalide caching strategy, one user will see stale data until the latest version has been fetched. This might be a problem if product data needs always to be up-to-date, for example, product availability. This sample demonstrates one approach how to avoid stale data on cached AMPs.</p>","isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":0,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"\nThis is a sample showing how to integrate product data details such as description, price, availability etc with different data freshness requirements. AMPs can be served from the AMP Cache. Due to the AMP Cache's stale-while-invalide caching strategy, one user will see stale data until the latest version has been fetched. This might be a problem if product data needs always to be up-to-date, for example, product availability. This sample demonstrates one approach how to avoid stale data on cached AMPs.\n\n"},{"doc_":"\n","code":"<!doctype html>\n<html ⚡>\n<head>\n  <meta charset=\"utf-8\">\n  <script async src=\"https://cdn.ampproject.org/v0.js\"></script>\n\n","preview":"","inBody":false,"id":3,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":0,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":" \n"},{"doc_":"## Setup\n","code":"","preview":"","inBody":false,"id":4,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":0,"headings":[{"id":"setup","name":"Setup"}],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"## Setup\n"},{"doc_":"\nWe use `amp-list` for retrieving latest data from the server.\n\n","code":"<script async custom-element=\"amp-list\" src=\"https://cdn.ampproject.org/v0/amp-list-0.1.js\"></script>\n","preview":"","inBody":false,"id":5,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":2,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"\nWe use `amp-list` for retrieving latest data from the server.\n\n"},{"doc_":"We use `amp-mustache` as a templating for `amp-list` \n","code":"<script async custom-template=\"amp-mustache\" src=\"https://cdn.ampproject.org/v0/amp-mustache-0.2.js\"></script>\n","preview":"","inBody":false,"id":6,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":2,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"We use `amp-mustache` as a templating for `amp-list` \n"},{"doc_":"","code":"\n  <link rel=\"canonical\" href=\"http://localhost:8080/documentation/examples/interactivity-dynamic-content/mixing_dynamic_and_cached_data/index.html\">\n  <title>Mixing Dynamic and Cached Data</title>\n\n  <meta name=\"viewport\" content=\"width=device-width,minimum-scale=1,initial-scale=1\">\n\n  <style amp-boilerplate>body{-webkit-animation:-amp-start 8s steps(1,end) 0s 1 normal both;-moz-animation:-amp-start 8s steps(1,end) 0s 1 normal both;-ms-animation:-amp-start 8s steps(1,end) 0s 1 normal both;animation:-amp-start 8s steps(1,end) 0s 1 normal both}@-webkit-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-moz-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-ms-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-o-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}</style><noscript><style amp-boilerplate>body{-webkit-animation:none;-moz-animation:none;-ms-animation:none;animation:none}</style></noscript>\n\n</head>\n<body>\n","preview":"","inBody":false,"id":7,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":0,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":""},{"doc_":"## How to implement dynamic and cached product data details\n","code":"","preview":"","inBody":true,"id":8,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":0,"headings":[{"id":"how-to-implement-dynamic-and-cached-product-data-details","name":"How to implement dynamic and cached product data details"}],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"## How to implement dynamic and cached product data details\n"},{"doc_":"\nFor product details such a descriptionb or title, where are unlikely to change frequently, you don't need to do anything special.\nTo ensure that users always see the latest content, you can use the `amp-list` component which will fetch and render content directly from your server.\n\n","code":"<h3>My product</h3>\n<p>This is a really great product.</p>\n<amp-list height=\"24\"\n  layout=\"fixed-height\"\n  src=\"/static/samples/json/product.json\"\n  binding=\"no\">\n  <template type=\"amp-mustache\">\n    Price: ${{price}}\n  </template>\n</amp-list>","preview":"  <div>\n    <h3>My product</h3>\n    <p>This is a really great product.</p>\n    <amp-list height=\"24\"\n      layout=\"fixed-height\"\n      src=\"/static/samples/json/product.json\"\n      binding=\"no\">\n      <template type=\"amp-mustache\">\n        Price: ${{price}}\n      </template>\n    </amp-list>\n  </div>\n","inBody":true,"id":9,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":2,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"\nFor product details such a descriptionb or title, where are unlikely to change frequently, you don't need to do anything special.\nTo ensure that users always see the latest content, you can use the `amp-list` component which will fetch and render content directly from your server.\n \n"},{"doc_":"\nif you need to make multiple calls to get all the data, that is not a problem in AMP since if multiple `amp-list` with the same `src` are found in the page, only one network call is actually made by the AMP runtime.\n\nBy checking the network tab of the Chrome dev console, you can check that this second `amp-list` does not cause a second network call.\n\nSince we are using a [service-worker](/amp-dev/documentation/components/reference/amp-install-serviceworker-v0.1.md) you may see two similar calls one after the other to the same endpoint, so to better verify this behaviour, go to Application -> Service workers and click on Unregister.\n","code":"<amp-list height=\"24\"\n  layout=\"fixed-height\"\n  src=\"/static/samples/json/product.json\"\n  binding=\"no\">\n  <template type=\"amp-mustache\">\n    Availability: {{availability}}\n  </template>\n</amp-list>\n","preview":"  <amp-list height=\"24\"\n    layout=\"fixed-height\"\n    src=\"/static/samples/json/product.json\"\n    binding=\"no\">\n    <template type=\"amp-mustache\">\n      Availability: {{availability}}\n    </template>\n  </amp-list>\n","inBody":true,"id":10,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":2,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":" if you need to make multiple calls to get all the data, that is not a problem in AMP since if multiple `amp-list` with the same `src` are found in the page, only one network call is actually made by the AMP runtime.\n\nBy checking the network tab of the Chrome dev console, you can check that this second `amp-list` does not cause a second network call.\n\nSince we are using a [service-worker](/amp-dev/documentation/components/reference/amp-install-serviceworker-v0.1.md) you may see two similar calls one after the other to the same endpoint, so to better verify this behaviour, go to Application -> Service workers and click on Unregister.\n"},{"doc_":"","code":"\n","preview":"\n","inBody":true,"id":11,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":0,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":""},{"doc_":"","code":"</body>\n</html>\n","preview":"","inBody":false,"id":12,"cachedMarkedDoc":false,"isLastSection":true,"isFirstSection":false,"commentOffset":0,"codeOffset":0,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":""}],"head":"  <meta charset=\"utf-8\">\n  <script async src=\"https://cdn.ampproject.org/v0.js\"></script>\n\n  <script async custom-element=\"amp-list\" src=\"https://cdn.ampproject.org/v0/amp-list-0.1.js\"></script>\n  <script async custom-template=\"amp-mustache\" src=\"https://cdn.ampproject.org/v0/amp-mustache-0.2.js\"></script>\n\n  <link rel=\"canonical\" href=\"http://localhost:8080/documentation/examples/interactivity-dynamic-content/mixing_dynamic_and_cached_data/index.html\">\n  <title>Mixing Dynamic and Cached Data</title>\n\n  <meta name=\"viewport\" content=\"width=device-width,minimum-scale=1,initial-scale=1\">\n\n  <style amp-boilerplate>body{-webkit-animation:-amp-start 8s steps(1,end) 0s 1 normal both;-moz-animation:-amp-start 8s steps(1,end) 0s 1 normal both;-ms-animation:-amp-start 8s steps(1,end) 0s 1 normal both;animation:-amp-start 8s steps(1,end) 0s 1 normal both}@-webkit-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-moz-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-ms-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-o-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}</style><noscript><style amp-boilerplate>body{-webkit-animation:none;-moz-animation:none;-ms-animation:none;animation:none}</style></noscript>\n\n","styles":"","title":"Mixing Dynamic and Cached Data","metadata":{"teaserImage":"/static/samples/img/teaser/mixing_dynamic_and_cached_data.jpg","author":"kul3r4","disableTransform":true},"body":"<body>","elementsAfterBody":"","isAmpStory":false,"isAmpWeb":true,"isAmpAds":false,"isAmpEmail":false,"firstImage":"/favicons/android-chrome-256x256.png","lang":"en","_description":"This is a sample showing how to integrate product data details such as description, price, availability etc with different data freshness requirements."},"route":"/documentation/examples/interactivity-dynamic-content/mixing_dynamic_and_cached_data/index.html"}