{"filePath":"examples/source/user-consent/Client_Side_User_Consent_Flow.html","source":"<!--\n  ## Introduction\n\n  Users today want additional control over their online experience. Additionally, publishers are faced with a variety of different demands on how they provide notice and choice to their users - from vendor policies to evolving legal requirements. The open source AMP Project is working to give publishers and tech vendors tools to implement their preferred user controls and to support their varied individual compliance requirements on their AMP pages.\n\n  This page demonstrates how a basic blocking consent flow can be built, which would just show a simple blocking popup with an accept and reject button. On reject some content in the page will be blocked.\n\n  Important: The consent is saved to localstorage - after accepting/rejecting it once you will only get the popup dialog again after deleting the localstorage content for this host, for example via [Chrome Dev Tools](https://developers.google.com/web/tools/chrome-devtools/manage-data/local-storage#local-storage).\n--><!-- -->\n<!doctype html>\n<html âš¡>\n<head>\n<meta charset=\"utf-8\">\n  <link rel=\"canonical\" href=\"http://localhost:8080/documentation/examples/user-consent/client_side_user_consent_flow/index.html\">\n  <meta name=\"viewport\" content=\"width=device-width,minimum-scale=1,initial-scale=1\">\n  <script async src=\"https://cdn.ampproject.org/v0.js\"></script>\n  <title>Client Side User Consent Flow</title>\n  <!-- ## Setup -->\n  <!-- Import the consent component in the header. -->\n  <script async custom-element=\"amp-consent\" src=\"https://cdn.ampproject.org/v0/amp-consent-0.1.js\"></script>\n  <!-- for this example we use `amp-ad` as well as... -->\n  <script async custom-element=\"amp-ad\" src=\"https://cdn.ampproject.org/v0/amp-ad-0.1.js\"></script>\n  <!-- ... `amp-list` together with... -->\n  <script async custom-element=\"amp-list\" src=\"https://cdn.ampproject.org/v0/amp-list-0.1.js\"></script>\n  <!-- ... `amp-mustache`. -->\n  <script async custom-template=\"amp-mustache\" src=\"https://cdn.ampproject.org/v0/amp-mustache-0.2.js\"></script>\n  <style amp-boilerplate>body{-webkit-animation:-amp-start 8s steps(1,end) 0s 1 normal both;-moz-animation:-amp-start 8s steps(1,end) 0s 1 normal both;-ms-animation:-amp-start 8s steps(1,end) 0s 1 normal both;animation:-amp-start 8s steps(1,end) 0s 1 normal both}@-webkit-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-moz-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-ms-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-o-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}</style><noscript><style amp-boilerplate>body{-webkit-animation:none;-moz-animation:none;-ms-animation:none;animation:none}</style></noscript>\n  <style amp-custom>\n    :root {\n      --space-2: 1rem;   /* 16px */\n      --space-3: 1.5rem; /* 24px */\n    }\n    .consentPopup {\n      padding: var(--space-3);\n      margin: 0 auto;\n      background: #fff;\n      border-radius: 5px;\n      position: relative;\n      max-width: 700px;\n      width: 95%;\n    }\n    .consentPopup > h2, /* overwrite ABE style */\n    .consentPopup > * {\n      margin: 0;\n      margin-bottom: var(--space-2);\n    }\n    .consentPopup > button {\n      margin-right: var(--space-2);\n    }\n    .popupOverlay {\n      height: 100vh;\n      width: 100vw;\n      background: rgba(0, 0, 0, 0.7);\n      padding: 5% 0;\n    }\n    .dismiss-button {\n      position: absolute;\n      right: var(--space-3);\n      top: var(--space-2);\n      cursor: pointer;\n    }\n    #post-consent-ui {\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      padding: var(--space-3);\n    }\n  </style>\n</head>\n<body>\n  <!--\n  ## Basic usage\n\n  The [`amp-consent`](/content/amp-dev/documentation/components/reference/amp-consent.md) component allows to specify the required user consent for this page using the required 'consentRequired' flag. A CORS endpoints can be specified via the `checkConsentHref` attribute. The `amp-consent` component then will check via a POST request if the consent UI needs to be shown. The response should look like this:\n\n  ```json\n  {\n    \"consentRequired\": boolean (required),\n    \"consentStateValue\": enum (accepted/rejected/unknown) (optional),\n    \"consentString\": string (optional),\n    \"expireCache\": boolean (default false),\n  }\n  ```\n  It is possible, to re-trigger the consent dialog using the `myConsent.prompt()` action. One use case for this is giving users the option to change their settings after consent dialog has been dismissed. For this to work, the post consent UI needs to be specified in the `amp-consent` JSON config: `\"promptUI\": \"consentDialog\"`.\n  If `consentRequired` was set to `true` in the incline script config, then `amp-consent` will first check localstorage for an existing consent decision and use it if present. Otherwise it will show the promptUi (if configured). If `consentRequired` was set to false, `amp-consent` will immediately unblock all elements. \n  -->\n  <amp-consent id=\"myUserConsent\" layout=\"nodisplay\">\n    <script type=\"application/json\">{\n      \"consentInstanceId\": \"consent-id\",\n      \"consentRequired\": true,\n      \"promptUI\": \"consentDialog\",\n      \"postPromptUI\": \"post-consent-ui\"\n    }</script>\n    <div class=\"popupOverlay\" id=\"consentDialog\">\n      <div class=\"consentPopup\">\n        <div class=\"dismiss-button\" role=\"button\" tabindex=\"0\" on=\"tap:myUserConsent.dismiss\">X</div>\n        <h2>Headline</h2>\n        <p>This is an important message requiring you to make a choice.</p>\n        <p>This is some more information about this choice. Here's a list of items related to this choice.</p>\n        <amp-list height=\"132\" layout=\"fixed-height\" src=\"/static/samples/json/consent-items.json\" binding=\"no\">\n          <template type=\"amp-mustache\">\n            <li>{{.}}</li>\n          </template>\n        </amp-list>\n        <button on=\"tap:myUserConsent.accept\">Accept</button>\n        <button on=\"tap:myUserConsent.reject\">Reject</button>\n      </div>\n    </div>\n    <div id=\"post-consent-ui\">\n      <button on=\"tap:myUserConsent.prompt()\">Update Consent</button>\n    </div>\n  </amp-consent>\n\n  <!--\n    Use `data-block-on-consent` attribute to block AMP components until consent is given.\n    Individual AMP components can override  blocking behavior and implement blocking logic themselves.\n\n    Here is an image which is blocked until consent is given:\n  -->\n  <amp-img data-block-on-consent src=\"/static/samples/img/landscape_lake_300x201.jpg\" width=\"300\" height=\"201\">\n  </amp-img>\n\n  <!--\n  Ads can also be blocked until consent is given, but ad networks can implement own behavior\n  (e.g. default to non-personalized ads without consent, as seen <a href=\"https://support.google.com/dfp_premium/answer/7678538#amp-pages\" target=\"_blank\">\n  documented here</a> for Doubleclick). Note that you may see the same ad when accepting or rejecting consent for this specific example and that's because the example doesn't use personalized information even when accepting consent.<br/>\n  Here is an example of `amp-ad` depending on `amp-consent`:\n -->\n <amp-ad data-block-on-consent data-slot=\"/30497360/a4a/a4a_native\" height=\"250\" type=\"doubleclick\" width=\"300\">\n  </amp-ad>\n</body></html>","document":{"sections":[{"doc_":"\n## Introduction\n\nUsers today want additional control over their online experience. Additionally, publishers are faced with a variety of different demands on how they provide notice and choice to their users - from vendor policies to evolving legal requirements. The open source AMP Project is working to give publishers and tech vendors tools to implement their preferred user controls and to support their varied individual compliance requirements on their AMP pages.\n\nThis page demonstrates how a basic blocking consent flow can be built, which would just show a simple blocking popup with an accept and reject button. On reject some content in the page will be blocked.\n\nImportant: The consent is saved to localstorage - after accepting/rejecting it once you will only get the popup dialog again after deleting the localstorage content for this host, for example via [Chrome Dev Tools](https://developers.google.com/web/tools/chrome-devtools/manage-data/local-storage#local-storage).\n\n","code":"","preview":"","inBody":false,"id":0,"cachedMarkedDoc":"<h2 id=\"introduction\" class=\"www-heading pb4 mb2 relative h3\">Introduction</h2><p class=\"mb2 px1\">Users today want additional control over their online experience. Additionally, publishers are faced with a variety of different demands on how they provide notice and choice to their users - from vendor policies to evolving legal requirements. The open source AMP Project is working to give publishers and tech vendors tools to implement their preferred user controls and to support their varied individual compliance requirements on their AMP pages.</p><p class=\"mb2 px1\">This page demonstrates how a basic blocking consent flow can be built, which would just show a simple blocking popup with an accept and reject button. On reject some content in the page will be blocked.</p><p class=\"mb2 px1\">Important: The consent is saved to localstorage - after accepting/rejecting it once you will only get the popup dialog again after deleting the localstorage content for this host, for example via <a href=\"https://developers.google.com/web/tools/chrome-devtools/manage-data/local-storage#local-storage\">Chrome Dev Tools</a>.</p>","isLastSection":false,"isFirstSection":true,"commentOffset":0,"codeOffset":0,"headings":[{"id":"introduction","name":"Introduction"}],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"\n## Introduction\n\nUsers today want additional control over their online experience. Additionally, publishers are faced with a variety of different demands on how they provide notice and choice to their users - from vendor policies to evolving legal requirements. The open source AMP Project is working to give publishers and tech vendors tools to implement their preferred user controls and to support their varied individual compliance requirements on their AMP pages.\n\nThis page demonstrates how a basic blocking consent flow can be built, which would just show a simple blocking popup with an accept and reject button. On reject some content in the page will be blocked.\n\nImportant: The consent is saved to localstorage - after accepting/rejecting it once you will only get the popup dialog again after deleting the localstorage content for this host, for example via [Chrome Dev Tools](https://developers.google.com/web/tools/chrome-devtools/manage-data/local-storage#local-storage).\n\n"},{"doc_":"\n","code":"<!doctype html>\n<html âš¡>\n<head>\n<meta charset=\"utf-8\">\n  <link rel=\"canonical\" href=\"http://localhost:8080/documentation/examples/user-consent/client_side_user_consent_flow/index.html\">\n  <meta name=\"viewport\" content=\"width=device-width,minimum-scale=1,initial-scale=1\">\n  <script async src=\"https://cdn.ampproject.org/v0.js\"></script>\n  <title>Client Side User Consent Flow</title>\n","preview":"","inBody":false,"id":1,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":0,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":" \n"},{"doc_":"## Setup\n","code":"","preview":"","inBody":false,"id":2,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":0,"headings":[{"id":"setup","name":"Setup"}],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"## Setup\n"},{"doc_":"Import the consent component in the header. \n","code":"<script async custom-element=\"amp-consent\" src=\"https://cdn.ampproject.org/v0/amp-consent-0.1.js\"></script>\n","preview":"","inBody":false,"id":3,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":2,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"Import the consent component in the header. \n"},{"doc_":"for this example we use `amp-ad` as well as... \n","code":"<script async custom-element=\"amp-ad\" src=\"https://cdn.ampproject.org/v0/amp-ad-0.1.js\"></script>\n","preview":"","inBody":false,"id":4,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":2,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"for this example we use `amp-ad` as well as... \n"},{"doc_":"... `amp-list` together with... \n","code":"<script async custom-element=\"amp-list\" src=\"https://cdn.ampproject.org/v0/amp-list-0.1.js\"></script>\n","preview":"","inBody":false,"id":5,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":2,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"... `amp-list` together with... \n"},{"doc_":"... `amp-mustache`. \n","code":"<script async custom-template=\"amp-mustache\" src=\"https://cdn.ampproject.org/v0/amp-mustache-0.2.js\"></script>\n","preview":"","inBody":false,"id":6,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":2,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"... `amp-mustache`. \n"},{"doc_":"","code":"<style amp-boilerplate>body{-webkit-animation:-amp-start 8s steps(1,end) 0s 1 normal both;-moz-animation:-amp-start 8s steps(1,end) 0s 1 normal both;-ms-animation:-amp-start 8s steps(1,end) 0s 1 normal both;animation:-amp-start 8s steps(1,end) 0s 1 normal both}@-webkit-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-moz-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-ms-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-o-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}</style><noscript><style amp-boilerplate>body{-webkit-animation:none;-moz-animation:none;-ms-animation:none;animation:none}</style></noscript>\n<style amp-custom>\n  :root {\n    --space-2: 1rem;   /* 16px */\n    --space-3: 1.5rem; /* 24px */\n  }\n  .consentPopup {\n    padding: var(--space-3);\n    margin: 0 auto;\n    background: #fff;\n    border-radius: 5px;\n    position: relative;\n    max-width: 700px;\n    width: 95%;\n  }\n  .consentPopup > h2, /* overwrite ABE style */\n  .consentPopup > * {\n    margin: 0;\n    margin-bottom: var(--space-2);\n  }\n  .consentPopup > button {\n    margin-right: var(--space-2);\n  }\n  .popupOverlay {\n    height: 100vh;\n    width: 100vw;\n    background: rgba(0, 0, 0, 0.7);\n    padding: 5% 0;\n  }\n  .dismiss-button {\n    position: absolute;\n    right: var(--space-3);\n    top: var(--space-2);\n    cursor: pointer;\n  }\n  #post-consent-ui {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    padding: var(--space-3);\n  }\n</style>\n</head>\n<body>\n","preview":"","inBody":false,"id":7,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":2,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":""},{"doc_":"\n## Basic usage\n\nThe [`amp-consent`](/content/amp-dev/documentation/components/reference/amp-consent.md) component allows to specify the required user consent for this page using the required 'consentRequired' flag. A CORS endpoints can be specified via the `checkConsentHref` attribute. The `amp-consent` component then will check via a POST request if the consent UI needs to be shown. The response should look like this:\n\n[sourcecode:json]\n{\n  \"consentRequired\": boolean (required),\n  \"consentStateValue\": enum (accepted/rejected/unknown) (optional),\n  \"consentString\": string (optional),\n  \"expireCache\": boolean (default false),\n}\n[/sourcecode]\nIt is possible, to re-trigger the consent dialog using the `myConsent.prompt()` action. One use case for this is giving users the option to change their settings after consent dialog has been dismissed. For this to work, the post consent UI needs to be specified in the `amp-consent` JSON config: `\"promptUI\": \"consentDialog\"`.\nIf `consentRequired` was set to `true` in the incline script config, then `amp-consent` will first check localstorage for an existing consent decision and use it if present. Otherwise it will show the promptUi (if configured). If `consentRequired` was set to false, `amp-consent` will immediately unblock all elements. \n\n","code":"<amp-consent id=\"myUserConsent\"\n  layout=\"nodisplay\">\n  <script type=\"application/json\">\n    {\n      \"consentInstanceId\": \"consent-id\",\n      \"consentRequired\": true,\n      \"promptUI\": \"consentDialog\",\n      \"postPromptUI\": \"post-consent-ui\"\n    }\n  </script>\n  <div class=\"popupOverlay\"\n    id=\"consentDialog\">\n    <div class=\"consentPopup\">\n      <div class=\"dismiss-button\"\n        role=\"button\"\n        tabindex=\"0\"\n        on=\"tap:myUserConsent.dismiss\">X</div>\n      <h2>Headline</h2>\n      <p>This is an important message requiring you to make a choice.</p>\n      <p>This is some more information about this choice. Here's a list of items related to this choice.</p>\n      <amp-list height=\"132\"\n        layout=\"fixed-height\"\n        src=\"/static/samples/json/consent-items.json\"\n        binding=\"no\">\n        <template type=\"amp-mustache\">\n          <li>{{.}}</li>\n        </template>\n      </amp-list>\n      <button on=\"tap:myUserConsent.accept\">Accept</button>\n      <button on=\"tap:myUserConsent.reject\">Reject</button>\n    </div>\n  </div>\n  <div id=\"post-consent-ui\">\n    <button on=\"tap:myUserConsent.prompt()\">Update Consent</button>\n  </div>\n</amp-consent>\n","preview":"  <amp-consent id=\"myUserConsent\"\n    layout=\"nodisplay\">\n    <script type=\"application/json\">\n      {\n        \"consentInstanceId\": \"consent-id\",\n        \"consentRequired\": true,\n        \"promptUI\": \"consentDialog\",\n        \"postPromptUI\": \"post-consent-ui\"\n      }\n    </script>\n    <div class=\"popupOverlay\"\n      id=\"consentDialog\">\n      <div class=\"consentPopup\">\n        <div class=\"dismiss-button\"\n          role=\"button\"\n          tabindex=\"0\"\n          on=\"tap:myUserConsent.dismiss\">X</div>\n        <h2>Headline</h2>\n        <p>This is an important message requiring you to make a choice.</p>\n        <p>This is some more information about this choice. Here's a list of items related to this choice.</p>\n        <amp-list height=\"132\"\n          layout=\"fixed-height\"\n          src=\"/static/samples/json/consent-items.json\"\n          binding=\"no\">\n          <template type=\"amp-mustache\">\n            <li>{{.}}</li>\n          </template>\n        </amp-list>\n        <button on=\"tap:myUserConsent.accept\">Accept</button>\n        <button on=\"tap:myUserConsent.reject\">Reject</button>\n      </div>\n    </div>\n    <div id=\"post-consent-ui\">\n      <button on=\"tap:myUserConsent.prompt()\">Update Consent</button>\n    </div>\n  </amp-consent>\n","inBody":true,"id":8,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":2,"headings":[{"id":"basic-usage","name":"Basic usage"}],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"\n## Basic usage\n\nThe [`amp-consent`](/content/amp-dev/documentation/components/reference/amp-consent.md) component allows to specify the required user consent for this page using the required 'consentRequired' flag. A CORS endpoints can be specified via the `checkConsentHref` attribute. The `amp-consent` component then will check via a POST request if the consent UI needs to be shown. The response should look like this:\n\n```json\n{\n  \"consentRequired\": boolean (required),\n  \"consentStateValue\": enum (accepted/rejected/unknown) (optional),\n  \"consentString\": string (optional),\n  \"expireCache\": boolean (default false),\n}\n```\nIt is possible, to re-trigger the consent dialog using the `myConsent.prompt()` action. One use case for this is giving users the option to change their settings after consent dialog has been dismissed. For this to work, the post consent UI needs to be specified in the `amp-consent` JSON config: `\"promptUI\": \"consentDialog\"`.\nIf `consentRequired` was set to `true` in the incline script config, then `amp-consent` will first check localstorage for an existing consent decision and use it if present. Otherwise it will show the promptUi (if configured). If `consentRequired` was set to false, `amp-consent` will immediately unblock all elements. \n\n"},{"doc_":"","code":"\n","preview":"\n","inBody":true,"id":9,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":0,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":""},{"doc_":"\nUse `data-block-on-consent` attribute to block AMP components until consent is given.\nIndividual AMP components can override  blocking behavior and implement blocking logic themselves.\n\nHere is an image which is blocked until consent is given:\n\n","code":"<amp-img data-block-on-consent\n  src=\"/static/samples/img/landscape_lake_300x201.jpg\"\n  width=\"300\"\n  height=\"201\">\n</amp-img>\n","preview":"  <amp-img data-block-on-consent\n    src=\"/static/samples/img/landscape_lake_300x201.jpg\"\n    width=\"300\"\n    height=\"201\">\n  </amp-img>\n","inBody":true,"id":10,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":2,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"\nUse `data-block-on-consent` attribute to block AMP components until consent is given.\nIndividual AMP components can override  blocking behavior and implement blocking logic themselves.\n\nHere is an image which is blocked until consent is given:\n\n"},{"doc_":"","code":"\n","preview":"\n","inBody":true,"id":11,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":0,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":""},{"doc_":"\nAds can also be blocked until consent is given, but ad networks can implement own behavior\n(e.g. default to non-personalized ads without consent, as seen <a href=\"https://support.google.com/dfp_premium/answer/7678538#amp-pages\" target=\"_blank\">\ndocumented here</a> for Doubleclick). Note that you may see the same ad when accepting or rejecting consent for this specific example and that's because the example doesn't use personalized information even when accepting consent.<br/>\nHere is an example of `amp-ad` depending on `amp-consent`:\n\n","code":"<amp-ad data-block-on-consent\n  data-slot=\"/30497360/a4a/a4a_native\"\n  height=\"250\"\n  type=\"doubleclick\"\n  width=\"300\">\n</amp-ad>\n","preview":"  <amp-ad data-block-on-consent\n    data-slot=\"/30497360/a4a/a4a_native\"\n    height=\"250\"\n    type=\"doubleclick\"\n    width=\"300\">\n  </amp-ad>\n","inBody":true,"id":12,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":2,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"\nAds can also be blocked until consent is given, but ad networks can implement own behavior\n(e.g. default to non-personalized ads without consent, as seen <a href=\"https://support.google.com/dfp_premium/answer/7678538#amp-pages\" target=\"_blank\">\ndocumented here</a> for Doubleclick). Note that you may see the same ad when accepting or rejecting consent for this specific example and that's because the example doesn't use personalized information even when accepting consent.<br/>\nHere is an example of `amp-ad` depending on `amp-consent`:\n\n"},{"doc_":"","code":"</body>\n</html>\n","preview":"","inBody":false,"id":13,"cachedMarkedDoc":false,"isLastSection":true,"isFirstSection":false,"commentOffset":0,"codeOffset":0,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":""}],"head":"<meta charset=\"utf-8\">\n  <link rel=\"canonical\" href=\"http://localhost:8080/documentation/examples/user-consent/client_side_user_consent_flow/index.html\">\n  <meta name=\"viewport\" content=\"width=device-width,minimum-scale=1,initial-scale=1\">\n  <script async src=\"https://cdn.ampproject.org/v0.js\"></script>\n  <title>Client Side User Consent Flow</title>\n  <script async custom-element=\"amp-consent\" src=\"https://cdn.ampproject.org/v0/amp-consent-0.1.js\"></script>\n  <script async custom-element=\"amp-ad\" src=\"https://cdn.ampproject.org/v0/amp-ad-0.1.js\"></script>\n  <script async custom-element=\"amp-list\" src=\"https://cdn.ampproject.org/v0/amp-list-0.1.js\"></script>\n  <script async custom-template=\"amp-mustache\" src=\"https://cdn.ampproject.org/v0/amp-mustache-0.2.js\"></script>\n  <style amp-boilerplate>body{-webkit-animation:-amp-start 8s steps(1,end) 0s 1 normal both;-moz-animation:-amp-start 8s steps(1,end) 0s 1 normal both;-ms-animation:-amp-start 8s steps(1,end) 0s 1 normal both;animation:-amp-start 8s steps(1,end) 0s 1 normal both}@-webkit-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-moz-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-ms-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-o-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}</style><noscript><style amp-boilerplate>body{-webkit-animation:none;-moz-animation:none;-ms-animation:none;animation:none}</style></noscript>\n","styles":"    :root {\n      --space-2: 1rem;   /* 16px */\n      --space-3: 1.5rem; /* 24px */\n    }\n    .consentPopup {\n      padding: var(--space-3);\n      margin: 0 auto;\n      background: #fff;\n      border-radius: 5px;\n      position: relative;\n      max-width: 700px;\n      width: 95%;\n    }\n    .consentPopup > h2, /* overwrite ABE style */\n    .consentPopup > * {\n      margin: 0;\n      margin-bottom: var(--space-2);\n    }\n    .consentPopup > button {\n      margin-right: var(--space-2);\n    }\n    .popupOverlay {\n      height: 100vh;\n      width: 100vw;\n      background: rgba(0, 0, 0, 0.7);\n      padding: 5% 0;\n    }\n    .dismiss-button {\n      position: absolute;\n      right: var(--space-3);\n      top: var(--space-2);\n      cursor: pointer;\n    }\n    #post-consent-ui {\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      padding: var(--space-3);\n    }\n","title":"Client Side User Consent Flow","metadata":{"preview":"default","teaserImage":"/static/samples/img/teaser/basic_user_consent_flow.jpg"},"body":"<body>","elementsAfterBody":"","isAmpStory":false,"isAmpWeb":true,"isAmpAds":false,"isAmpEmail":false,"firstImage":"/favicons/android-chrome-256x256.png","lang":"en","_description":"Users today want additional control over their online experience."},"route":"/documentation/examples/user-consent/client_side_user_consent_flow/index.html"}