{"filePath":"examples/source/1.components/amp-script/index.html","source":"<!--\n  An [amp-script](/content/amp-dev/documentation/components/reference/amp-script.md) hello world example.\n--><!-- -->\n<!doctype html>\n<html ⚡>\n<head>\n<meta charset=\"utf-8\">\n    <title>amp-script</title>\n    <link rel=\"canonical\" href=\"self.html\">\n    <meta name=\"viewport\" content=\"width=device-width,minimum-scale=1,initial-scale=1\">\n    <style amp-boilerplate>body{-webkit-animation:-amp-start 8s steps(1,end) 0s 1 normal both;-moz-animation:-amp-start 8s steps(1,end) 0s 1 normal both;-ms-animation:-amp-start 8s steps(1,end) 0s 1 normal both;animation:-amp-start 8s steps(1,end) 0s 1 normal both}@-webkit-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-moz-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-ms-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-o-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}</style><noscript><style amp-boilerplate>body{-webkit-animation:none;-moz-animation:none;-ms-animation:none;animation:none}</style></noscript>\n      <script async src=\"https://cdn.ampproject.org/v0.js\"></script>\n      <!--\n\n        ## Setup\n\n        First, you need to import the `amp-script` extension.\n      -->\n      <script async custom-element=\"amp-script\" src=\"https://cdn.ampproject.org/v0/amp-script-0.1.js\"></script>\n      <style amp-custom>\n        .amp-script-sample {\n          padding: 8px;\n        }\n        .amp-script-sample button {\n          background-color: #005AF0;\n          font-size: 16px;\n          font-weight: 700;\n          color: white;\n          border: none;\n          padding: 8px;\n          margin: 8px 0;\n        }\n        .amp-script-sample button[disabled] {\n          background-color: #f3f3f3;\n          color: #ccc;\n        }\n      </style>\n\n      <!--\n        For inline scripts you need to generate a CSP header. Read more about this in the [component documentation](/content/amp-dev/documentation/components/reference/amp-script-v0.1.md).\n      -->\n      <meta name=\"amp-script-src\" content=\"sha384-X8xW7VFd-a-kgeKjsR4wgFSUlffP7x8zpVmqC6lm2DPadWUnwfdCBJ2KbwQn6ADE sha384-nNFaDRiLzgQEgiC5kP28pgiJVfNLVuw-nP3VBV-e2s3fOh0grENnhllLfygAuU_M sha384-u7NPnrcs7p4vsbGLhlYHsId_iDJbcOWxmBd9bhVuPoA_gM_he4vyK6GsuvFvr2ym\">\n  </head>\n  <body>\n      <!--\n        ## Basic usage\n\n        An amp-script element can load a JavaScript file from a URL. This is usually the best way to integrate a script as the browser needs to download the script only once.\n      -->\n      <amp-script layout=\"container\" src=\"http://localhost:8080/documentation/examples/components/amp-script/hello-world.js\" class=\"amp-script-sample\">\n        <button id=\"hello\">Click!</button>\n      </amp-script>\n\n      <!--\n        This is the script in [hello-world.js](hello-world.js):\n\n        ```js\nconst button = document.getElementById('hello');\nbutton.addEventListener('click', () => {\n  const h1 = document.createElement('h1');\n  h1.textContent = 'Hello World!';\n  document.body.appendChild(h1);\n});```\n\n        ## Inline Scripts\n\n        You can also declare scripts inline and reference them by `id`.\n      -->\n      <amp-script layout=\"container\" script=\"hello-world\" class=\"amp-script-sample\">\n        <button id=\"hello2\">Click!</button>\n      </amp-script>\n\n      <!--\n        This is the inlined script. Note that the type needs to be `type=text/plain` and the `target=amp-script`.\n\n      -->\n      <script id=\"hello-world\" type=\"text/plain\" target=\"amp-script\">\n    const button = document.getElementById('hello2');\n    button.addEventListener('click', () => {\n      const h1 = document.createElement('h1');\n      h1.textContent = 'Hello World 2!';\n      document.body.appendChild(h1);\n    });\n  </script>\n\n  <!-- Note: `document.body` refers to the `amp-script` tag and not the actual `body` tag. `document.body.appendChild(...)` actually adds an element inside the `amp-script` element. -->\n\n  <!--\n      ## Using the fetch API\n\n      `amp-script` supports using the fetch API. To be able to update the page on load, we need to use the `fixed-height` layout instead of the `container` layout (and the height needs to be less than `300px`).\n  -->\n  <amp-script layout=\"fixed-height\" height=\"32\" script=\"time-script\" class=\"amp-script-sample\">\n    <div>The time is: <span id=\"time\"></span></div>\n  </amp-script>\n\n  <!-- As `amp-script` code is executed inside a web worker, fetch only works with absolute URLs. -->\n  <script id=\"time-script\" type=\"text/plain\" target=\"amp-script\">\n    const fetchCurrentTime = async () => {\n      const response = await fetch('http://localhost:8080/documentation/examples/api/time');\n      const data = await response.json();\n      const div = document.getElementById('time');\n      div.textContent = data.time;\n    }\n    fetchCurrentTime();\n  </script>\n  <!--\n      ## Custom form validation\n\n      You can also use `amp-script` to implement custom form validation. Here we set the \n      `disabled` state of a button based on the input value.\n  -->\n<amp-script layout=\"container\" script=\"form-validation-script\" class=\"amp-script-sample\" sandbox=\"allow-forms\">\n  <input id=\"validated-input\" placeholder=\"Only upper case letters allowed...\">\n  <button id=\"validated-input-submit\" disabled>Submit</button>\n</amp-script>\n\n<!-- The script adds events listeners to the input elements and sets the `disabled` state based on a custom regex. -->\n<script id=\"form-validation-script\" type=\"text/plain\" target=\"amp-script\">\n  const submitButton = document.getElementById('validated-input-submit');\n  const validatedInput = document.getElementById('validated-input');\n  validatedInput.addEventListener('input', () => {\n    const isValid = /^[A-Z]+$/.test(validatedInput.value);\n    if (isValid) {\n      submitButton.removeAttribute('disabled');\n    } else {\n      submitButton.setAttribute('disabled', '');\n    }\n  });\n</script>\n\n  <!--\n      ## Detecting Android vs iOS in AMP\n\n      `amp-script` is great to implement functionality not offered by AMP out-of-the-box. Here is a sample that checks if the current device is using Android or iOS.\n  -->\n  <amp-script layout=\"container\" script=\"user-agent-script\" class=\"amp-script-sample\">\n    <div>Your user-agent is: <span id=\"user-agent\">other</span></div>\n  </amp-script>\n\n  <!-- The script implementation retrieves the mobile operating system from the user agent string. -->\n  <script id=\"user-agent-script\" type=\"text/plain\" target=\"amp-script\">\n    function getMobileOperatingSystem() {\n        const userAgent = navigator.userAgent;\n        if (/android/i.test(userAgent)) {\n          return \"Android\";\n        }\n        // iOS detection from: http://stackoverflow.com/a/9039885/177710\n        if (/iPad|iPhone|iPod/.test(userAgent) && !window.MSStream) {\n          return \"iOS\";\n        }\n\n        return \"other\";\n      }\n\n      const span = document.getElementById('user-agent');\n      span.textContent = getMobileOperatingSystem();\n\n      const pre = document.createElement('pre');\n      pre.textContent = navigator.userAgent;\n      span.appendChild(pre);\n\n  </script>\n</body></html>","document":{"sections":[{"doc_":"\nAn [amp-script](/content/amp-dev/documentation/components/reference/amp-script.md) hello world example.\n\n","code":"","preview":"","inBody":false,"id":0,"cachedMarkedDoc":"<p class=\"mb2 px1\">An <a href=\"/content/amp-dev/documentation/components/reference/amp-script.md\">amp-script</a> hello world example.</p>","isLastSection":false,"isFirstSection":true,"commentOffset":0,"codeOffset":0,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"\nAn [amp-script](/content/amp-dev/documentation/components/reference/amp-script.md) hello world example.\n\n"},{"doc_":"\n","code":"<!doctype html>\n<html ⚡>\n<head>\n<meta charset=\"utf-8\">\n    <title>amp-script</title>\n    <link rel=\"canonical\" href=\"self.html\">\n    <meta name=\"viewport\" content=\"width=device-width,minimum-scale=1,initial-scale=1\">\n    <style amp-boilerplate>body{-webkit-animation:-amp-start 8s steps(1,end) 0s 1 normal both;-moz-animation:-amp-start 8s steps(1,end) 0s 1 normal both;-ms-animation:-amp-start 8s steps(1,end) 0s 1 normal both;animation:-amp-start 8s steps(1,end) 0s 1 normal both}@-webkit-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-moz-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-ms-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-o-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}</style><noscript><style amp-boilerplate>body{-webkit-animation:none;-moz-animation:none;-ms-animation:none;animation:none}</style></noscript>\n      <script async src=\"https://cdn.ampproject.org/v0.js\"></script>\n","preview":"","inBody":false,"id":1,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":0,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":" \n"},{"doc_":"\n## Setup\n\nFirst, you need to import the `amp-script` extension.\n\n","code":"<script async custom-element=\"amp-script\" src=\"https://cdn.ampproject.org/v0/amp-script-0.1.js\"></script>\n","preview":"","inBody":false,"id":2,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":6,"headings":[{"id":"setup","name":"Setup"}],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"\n\n## Setup\n\nFirst, you need to import the `amp-script` extension.\n\n"},{"doc_":"","code":"<style amp-custom>\n  .amp-script-sample {\n    padding: 8px;\n  }\n  .amp-script-sample button {\n    background-color: #005AF0;\n    font-size: 16px;\n    font-weight: 700;\n    color: white;\n    border: none;\n    padding: 8px;\n    margin: 8px 0;\n  }\n  .amp-script-sample button[disabled] {\n    background-color: #f3f3f3;\n    color: #ccc;\n  }\n</style>\n\n","preview":"","inBody":false,"id":3,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":6,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":""},{"doc_":"\nFor inline scripts you need to generate a CSP header. Read more about this in the [component documentation](/content/amp-dev/documentation/components/reference/amp-script-v0.1.md).\n\n","code":"<meta name=\"amp-script-src\" content=\"sha384-X8xW7VFd-a-kgeKjsR4wgFSUlffP7x8zpVmqC6lm2DPadWUnwfdCBJ2KbwQn6ADE sha384-nNFaDRiLzgQEgiC5kP28pgiJVfNLVuw-nP3VBV-e2s3fOh0grENnhllLfygAuU_M sha384-u7NPnrcs7p4vsbGLhlYHsId_iDJbcOWxmBd9bhVuPoA_gM_he4vyK6GsuvFvr2ym\">\n","preview":"","inBody":false,"id":4,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":6,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"\nFor inline scripts you need to generate a CSP header. Read more about this in the [component documentation](/content/amp-dev/documentation/components/reference/amp-script-v0.1.md).\n\n"},{"doc_":"","code":"</head>\n<body>\n","preview":"","inBody":false,"id":5,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":2,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":""},{"doc_":"\n## Basic usage\n\nAn amp-script element can load a JavaScript file from a URL. This is usually the best way to integrate a script as the browser needs to download the script only once.\n\n","code":"<amp-script layout=\"container\"\n  src=\"http://localhost:8080/documentation/examples/components/amp-script/hello-world.js\"\n  class=\"amp-script-sample\">\n  <button id=\"hello\">Click!</button>\n</amp-script>\n","preview":"  <amp-script layout=\"container\"\n    src=\"http://localhost:8080/documentation/examples/components/amp-script/hello-world.js\"\n    class=\"amp-script-sample\">\n    <button id=\"hello\">Click!</button>\n  </amp-script>\n","inBody":true,"id":6,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":2,"headings":[{"id":"basic-usage","name":"Basic usage"}],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"\n## Basic usage\n\nAn amp-script element can load a JavaScript file from a URL. This is usually the best way to integrate a script as the browser needs to download the script only once.\n\n"},{"doc_":"","code":"\n","preview":"\n","inBody":true,"id":7,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":0,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":""},{"doc_":"\nThis is the script in [hello-world.js](hello-world.js):\n\n[sourcecode:js]\nconst button = document.getElementById('hello');\nbutton.addEventListener('click', () => {\n  const h1 = document.createElement('h1');\n  h1.textContent = 'Hello World!';\n  document.body.appendChild(h1);\n});[/sourcecode]\n\n## Inline Scripts\n\nYou can also declare scripts inline and reference them by `id`.\n\n","code":"<amp-script layout=\"container\"\n  script=\"hello-world\"\n  class=\"amp-script-sample\">\n  <button id=\"hello2\">Click!</button>\n</amp-script>\n","preview":"  <amp-script layout=\"container\"\n    script=\"hello-world\"\n    class=\"amp-script-sample\">\n    <button id=\"hello2\">Click!</button>\n  </amp-script>\n","inBody":true,"id":8,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":2,"headings":[{"id":"inline-scripts","name":"Inline Scripts"}],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"  \n        This is the script in [hello-world.js](hello-world.js):\n\n        ```js\nconst button = document.getElementById('hello');\nbutton.addEventListener('click', () => {\n  const h1 = document.createElement('h1');\n  h1.textContent = 'Hello World!';\n  document.body.appendChild(h1);\n});```\n\n## Inline Scripts\n\n        You can also declare scripts inline and reference them by `id`.\n      \n"},{"doc_":"","code":"\n","preview":"\n","inBody":true,"id":9,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":0,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":""},{"doc_":"\nThis is the inlined script. Note that the type needs to be `type=text/plain` and the `target=amp-script`.\n\n","code":"<script id=\"hello-world\"\n  type=\"text/plain\"\n  target=\"amp-script\">\n  const button = document.getElementById('hello2');\n  button.addEventListener('click', () => {\n    const h1 = document.createElement('h1');\n    h1.textContent = 'Hello World 2!';\n    document.body.appendChild(h1);\n  });\n</script>\n","preview":"  <script id=\"hello-world\"\n    type=\"text/plain\"\n    target=\"amp-script\">\n    const button = document.getElementById('hello2');\n    button.addEventListener('click', () => {\n      const h1 = document.createElement('h1');\n      h1.textContent = 'Hello World 2!';\n      document.body.appendChild(h1);\n    });\n  </script>\n","inBody":true,"id":10,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":2,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"\nThis is the inlined script. Note that the type needs to be `type=text/plain` and the `target=amp-script`.\n\n\n"},{"doc_":"","code":"\n","preview":"\n","inBody":true,"id":11,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":0,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":""},{"doc_":"Note: `document.body` refers to the `amp-script` tag and not the actual `body` tag. `document.body.appendChild(...)` actually adds an element inside the `amp-script` element. \n","code":"\n","preview":"\n","inBody":true,"id":12,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":0,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"Note: `document.body` refers to the `amp-script` tag and not the actual `body` tag. `document.body.appendChild(...)` actually adds an element inside the `amp-script` element. \n"},{"doc_":"\n## Using the fetch API\n\n`amp-script` supports using the fetch API. To be able to update the page on load, we need to use the `fixed-height` layout instead of the `container` layout (and the height needs to be less than `300px`).\n\n","code":"<amp-script layout=\"fixed-height\"\n  height=\"32\"\n  script=\"time-script\"\n  class=\"amp-script-sample\">\n  <div>The time is: <span id=\"time\"></span></div>\n</amp-script>\n","preview":"  <amp-script layout=\"fixed-height\"\n    height=\"32\"\n    script=\"time-script\"\n    class=\"amp-script-sample\">\n    <div>The time is: <span id=\"time\"></span></div>\n  </amp-script>\n","inBody":true,"id":13,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":2,"headings":[{"id":"using-the-fetch-api","name":"Using the fetch API"}],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"\n## Using the fetch API\n\n`amp-script` supports using the fetch API. To be able to update the page on load, we need to use the `fixed-height` layout instead of the `container` layout (and the height needs to be less than `300px`).\n\n"},{"doc_":"","code":"\n","preview":"\n","inBody":true,"id":14,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":0,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":""},{"doc_":"As `amp-script` code is executed inside a web worker, fetch only works with absolute URLs. \n","code":"<script id=\"time-script\"\n  type=\"text/plain\"\n  target=\"amp-script\">\n  const fetchCurrentTime = async () => {\n    const response = await fetch('http://localhost:8080/documentation/examples/api/time');\n    const data = await response.json();\n    const div = document.getElementById('time');\n    div.textContent = data.time;\n  }\n  fetchCurrentTime();\n</script>\n","preview":"  <script id=\"time-script\"\n    type=\"text/plain\"\n    target=\"amp-script\">\n    const fetchCurrentTime = async () => {\n      const response = await fetch('http://localhost:8080/documentation/examples/api/time');\n      const data = await response.json();\n      const div = document.getElementById('time');\n      div.textContent = data.time;\n    }\n    fetchCurrentTime();\n  </script>\n","inBody":true,"id":15,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":2,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"As `amp-script` code is executed inside a web worker, fetch only works with absolute URLs. \n"},{"doc_":"\n## Custom form validation\n\nYou can also use `amp-script` to implement custom form validation. Here we set the \n`disabled` state of a button based on the input value.\n\n","code":"<amp-script layout=\"container\"\n  script=\"form-validation-script\"\n  class=\"amp-script-sample\"\n  sandbox=\"allow-forms\">\n  <input id=\"validated-input\"\n    placeholder=\"Only upper case letters allowed...\">\n  <button id=\"validated-input-submit\"\n    disabled>Submit</button>\n</amp-script>\n","preview":"  <amp-script layout=\"container\"\n    script=\"form-validation-script\"\n    class=\"amp-script-sample\"\n    sandbox=\"allow-forms\">\n    <input id=\"validated-input\"\n      placeholder=\"Only upper case letters allowed...\">\n    <button id=\"validated-input-submit\"\n      disabled>Submit</button>\n  </amp-script>\n","inBody":true,"id":16,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":2,"headings":[{"id":"custom-form-validation","name":"Custom form validation"}],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"\n## Custom form validation\n\nYou can also use `amp-script` to implement custom form validation. Here we set the \n`disabled` state of a button based on the input value.\n\n"},{"doc_":"","code":"\n","preview":"\n","inBody":true,"id":17,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":0,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":""},{"doc_":"The script adds events listeners to the input elements and sets the `disabled` state based on a custom regex. \n","code":"<script id=\"form-validation-script\"\n  type=\"text/plain\"\n  target=\"amp-script\">\n  const submitButton = document.getElementById('validated-input-submit');\nconst validatedInput = document.getElementById('validated-input');\nvalidatedInput.addEventListener('input', () => {\n  const isValid = /^[A-Z]+$/.test(validatedInput.value);\n  if (isValid) {\n    submitButton.removeAttribute('disabled');\n  } else {\n    submitButton.setAttribute('disabled', '');\n  }\n});\n</script>\n","preview":"  <script id=\"form-validation-script\"\n    type=\"text/plain\"\n    target=\"amp-script\">\n    const submitButton = document.getElementById('validated-input-submit');\n  const validatedInput = document.getElementById('validated-input');\n  validatedInput.addEventListener('input', () => {\n    const isValid = /^[A-Z]+$/.test(validatedInput.value);\n    if (isValid) {\n      submitButton.removeAttribute('disabled');\n    } else {\n      submitButton.setAttribute('disabled', '');\n    }\n  });\n</script>\n","inBody":true,"id":18,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":2,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"The script adds events listeners to the input elements and sets the `disabled` state based on a custom regex. \n"},{"doc_":"","code":"\n","preview":"\n","inBody":true,"id":19,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":0,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":""},{"doc_":"\n## Detecting Android vs iOS in AMP\n\n`amp-script` is great to implement functionality not offered by AMP out-of-the-box. Here is a sample that checks if the current device is using Android or iOS.\n\n","code":"<amp-script layout=\"container\"\n  script=\"user-agent-script\"\n  class=\"amp-script-sample\">\n  <div>Your user-agent is: <span id=\"user-agent\">other</span></div>\n</amp-script>\n","preview":"  <amp-script layout=\"container\"\n    script=\"user-agent-script\"\n    class=\"amp-script-sample\">\n    <div>Your user-agent is: <span id=\"user-agent\">other</span></div>\n  </amp-script>\n","inBody":true,"id":20,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":2,"headings":[{"id":"detecting-android-vs-ios-in-amp","name":"Detecting Android vs iOS in AMP"}],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"\n## Detecting Android vs iOS in AMP\n\n`amp-script` is great to implement functionality not offered by AMP out-of-the-box. Here is a sample that checks if the current device is using Android or iOS.\n\n"},{"doc_":"","code":"\n","preview":"\n","inBody":true,"id":21,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":0,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":""},{"doc_":"The script implementation retrieves the mobile operating system from the user agent string. \n","code":"<script id=\"user-agent-script\"\n  type=\"text/plain\"\n  target=\"amp-script\">\n  function getMobileOperatingSystem() {\n      const userAgent = navigator.userAgent;\n      if (/android/i.test(userAgent)) {\n        return \"Android\";\n      }\n      // iOS detection from: http://stackoverflow.com/a/9039885/177710\n      if (/iPad|iPhone|iPod/.test(userAgent) && !window.MSStream) {\n        return \"iOS\";\n      }\n\n      return \"other\";\n    }\n\n    const span = document.getElementById('user-agent');\n    span.textContent = getMobileOperatingSystem();\n\n    const pre = document.createElement('pre');\n    pre.textContent = navigator.userAgent;\n    span.appendChild(pre);\n\n</script>\n","preview":"  <script id=\"user-agent-script\"\n    type=\"text/plain\"\n    target=\"amp-script\">\n    function getMobileOperatingSystem() {\n        const userAgent = navigator.userAgent;\n        if (/android/i.test(userAgent)) {\n          return \"Android\";\n        }\n        // iOS detection from: http://stackoverflow.com/a/9039885/177710\n        if (/iPad|iPhone|iPod/.test(userAgent) && !window.MSStream) {\n          return \"iOS\";\n        }\n\n        return \"other\";\n      }\n\n      const span = document.getElementById('user-agent');\n      span.textContent = getMobileOperatingSystem();\n\n      const pre = document.createElement('pre');\n      pre.textContent = navigator.userAgent;\n      span.appendChild(pre);\n\n  </script>\n","inBody":true,"id":22,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":2,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"The script implementation retrieves the mobile operating system from the user agent string. \n"},{"doc_":"","code":"</body>\n</html>\n","preview":"","inBody":false,"id":23,"cachedMarkedDoc":false,"isLastSection":true,"isFirstSection":false,"commentOffset":0,"codeOffset":0,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":""}],"head":"<meta charset=\"utf-8\">\n    <title>amp-script</title>\n    <link rel=\"canonical\" href=\"self.html\">\n    <meta name=\"viewport\" content=\"width=device-width,minimum-scale=1,initial-scale=1\">\n    <style amp-boilerplate>body{-webkit-animation:-amp-start 8s steps(1,end) 0s 1 normal both;-moz-animation:-amp-start 8s steps(1,end) 0s 1 normal both;-ms-animation:-amp-start 8s steps(1,end) 0s 1 normal both;animation:-amp-start 8s steps(1,end) 0s 1 normal both}@-webkit-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-moz-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-ms-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-o-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}</style><noscript><style amp-boilerplate>body{-webkit-animation:none;-moz-animation:none;-ms-animation:none;animation:none}</style></noscript>\n      <script async src=\"https://cdn.ampproject.org/v0.js\"></script>\n      <script async custom-element=\"amp-script\" src=\"https://cdn.ampproject.org/v0/amp-script-0.1.js\"></script>\n\n      <meta name=\"amp-script-src\" content=\"sha384-X8xW7VFd-a-kgeKjsR4wgFSUlffP7x8zpVmqC6lm2DPadWUnwfdCBJ2KbwQn6ADE sha384-nNFaDRiLzgQEgiC5kP28pgiJVfNLVuw-nP3VBV-e2s3fOh0grENnhllLfygAuU_M sha384-u7NPnrcs7p4vsbGLhlYHsId_iDJbcOWxmBd9bhVuPoA_gM_he4vyK6GsuvFvr2ym\">\n","styles":"        .amp-script-sample {\n          padding: 8px;\n        }\n        .amp-script-sample button {\n          background-color: #005AF0;\n          font-size: 16px;\n          font-weight: 700;\n          color: white;\n          border: none;\n          padding: 8px;\n          margin: 8px 0;\n        }\n        .amp-script-sample button[disabled] {\n          background-color: #f3f3f3;\n          color: #ccc;\n        }\n","title":"amp-script","metadata":{},"body":"<body>","elementsAfterBody":"","isAmpStory":false,"isAmpWeb":true,"isAmpAds":false,"isAmpEmail":false,"firstImage":"/favicons/android-chrome-256x256.png","lang":"en","_description":"An amp-script hello world example."},"route":"/documentation/examples/components/amp-script/index.html"}