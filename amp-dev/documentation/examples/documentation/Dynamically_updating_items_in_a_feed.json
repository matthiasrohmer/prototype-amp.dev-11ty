{"filePath":"examples/source/interactivity-dynamic-content/Dynamically_updating_items_in_a_feed.html","source":"<!--\n## Introduction\n\nThis sample demonstrates how to display a feed of data, allowing the user to go through\na large number of items in an email without having to scroll.\n\nThe sample uses a combination of [`amp-list`](/documentation/components/amp-list),\nto fetch the initial items from the server and [`amp-form`](/documentation/components/amp-form),\nto \"refresh\" a single item, by making a new server request.\n-->\n\n<!-- -->\n<!doctype html>\n<html ⚡4email>\n<head>\n  <meta charset=\"utf-8\">\n  <script async src=\"https://cdn.ampproject.org/v0.js\"></script>\n  <script async custom-element=\"amp-list\" src=\"https://cdn.ampproject.org/v0/amp-list-0.1.js\"></script>\n  <script async custom-element=\"amp-form\" src=\"https://cdn.ampproject.org/v0/amp-form-0.1.js\"></script>\n  <script async custom-template=\"amp-mustache\" src=\"https://cdn.ampproject.org/v0/amp-mustache-0.2.js\"></script>\n  <style amp4email-boilerplate>body{visibility:hidden}</style>\n\n  <!--\n    ## Styles\n\n    We use CSS to hide the initially fetched item after the form is first submitted.\n\n    We also define a layout that allows us to have fixed card sizes, to ensure form submissions don't result in content jumps.\n  -->\n  <style amp-custom>\n    .amp-form-submit-success .initial-content,\n    .amp-form-submitting .initial-content,\n    .amp-form-submit-error .initial-content {\n      display: none;\n    }\n\n    .card {\n      width: 160px;\n      height: 120px;\n      margin: 10px;\n      float: left;\n      position: relative;\n    }\n\n    .card .next-button {\n      position: absolute;\n      bottom: 0;\n      width: 100%;\n    }\n  </style>\n</head>\n<body>\n  <!--\n    ## Single item template\n\n    Define a template for a single item inside a card and give it an `id`. This template is used by `amp-form` for displaying new items.\n\n    In this case, we use a single `amp-img`.\n  -->\n  <template id=\"item-template\" type=\"amp-mustache\">\n    <amp-img src=\"{{items.imageUrl}}\" layout=\"fixed\" width=\"160\" height=\"90\"></amp-img>\n  </template>\n\n  <!--\n    ## Initial list of items\n\n    We define a template for the initial items and their layout and give it an `id`, allowing us to use it subsequently in an amp-list. This template is used by `amp-list` for fetching the initial up-to-date contents from the server.\n\n    It contains in itself an `amp-form` for each item which references the template defined above referred by its `id`. By using a different template for the `amp-form`, we're able to \"refresh\" a part of the content, namely the image in this case.\n\n    Note: This template contains the same markup (in this case, a single `amp-img`) as used in the template above to render the initial items. This is wrapped inside `<div class=\"initial-content\">` which becomes hidden the first time the user submits the form.\n  -->\n  <template id=\"list-template\" type=\"amp-mustache\">\n    <form class=\"card\" method=\"post\" action-xhr=\"http://localhost:8080/documentation/examples/api/photo-stream?single&width=160&height=90\">\n      <div class=\"initial-content\">\n        <amp-img src=\"{{imageUrl}}\" layout=\"fixed\" width=\"160\" height=\"90\"></amp-img>\n      </div>\n\n      <div submit-success template=\"item-template\"></div>\n\n      <input class=\"next-button\" type=\"submit\" value=\"Next\">\n    </form>\n  </template>\n\n  <!--\n    We use `amp-list` to render the initial items from the server using the template defined above referred by its `id`.\n\n    The height matches the combined height of our cards and their margins. The initial server response defines the number of cards to be displayed (in this case four).\n  -->\n  <amp-list template=\"list-template\" src=\"http://localhost:8080/documentation/examples/api/photo-stream?width=160&height=90&items=4\" layout=\"fixed\" width=\"360\" height=\"280\">\n  </amp-list>\n</body>\n</html>","document":{"sections":[{"doc_":"","code":"\n","preview":"","inBody":false,"id":0,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":true,"commentOffset":0,"codeOffset":0,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":""},{"doc_":"\n## Introduction\n\nThis sample demonstrates how to display a feed of data, allowing the user to go through\na large number of items in an email without having to scroll.\n\nThe sample uses a combination of [`amp-list`](/documentation/components/amp-list),\nto fetch the initial items from the server and [`amp-form`](/documentation/components/amp-form),\nto \"refresh\" a single item, by making a new server request.\n\n","code":"\n","preview":"","inBody":false,"id":1,"cachedMarkedDoc":"<h2 id=\"introduction\" class=\"www-heading pb4 mb2 relative h3\">Introduction</h2><p class=\"mb2 px1\">This sample demonstrates how to display a feed of data, allowing the user to go through\na large number of items in an email without having to scroll.</p><p class=\"mb2 px1\">The sample uses a combination of <a href=\"/documentation/components/amp-list\"><code>amp-list</code></a>,\nto fetch the initial items from the server and <a href=\"/documentation/components/amp-form\"><code>amp-form</code></a>,\nto &quot;refresh&quot; a single item, by making a new server request.</p>","isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":0,"headings":[{"id":"introduction","name":"Introduction"}],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"\n## Introduction\n\nThis sample demonstrates how to display a feed of data, allowing the user to go through\na large number of items in an email without having to scroll.\n\nThe sample uses a combination of [`amp-list`](/documentation/components/amp-list),\nto fetch the initial items from the server and [`amp-form`](/documentation/components/amp-form),\nto \"refresh\" a single item, by making a new server request.\n\n"},{"doc_":"\n","code":"<!doctype html>\n<html ⚡4email>\n<head>\n  <meta charset=\"utf-8\">\n  <script async src=\"https://cdn.ampproject.org/v0.js\"></script>\n  <script async custom-element=\"amp-list\" src=\"https://cdn.ampproject.org/v0/amp-list-0.1.js\"></script>\n  <script async custom-element=\"amp-form\" src=\"https://cdn.ampproject.org/v0/amp-form-0.1.js\"></script>\n  <script async custom-template=\"amp-mustache\" src=\"https://cdn.ampproject.org/v0/amp-mustache-0.2.js\"></script>\n  <style amp4email-boilerplate>body{visibility:hidden}</style>\n\n","preview":"","inBody":false,"id":2,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":0,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":" \n"},{"doc_":"\n## Styles\n\nWe use CSS to hide the initially fetched item after the form is first submitted.\n\nWe also define a layout that allows us to have fixed card sizes, to ensure form submissions don't result in content jumps.\n\n","code":"<style amp-custom>\n  .amp-form-submit-success .initial-content,\n  .amp-form-submitting .initial-content,\n  .amp-form-submit-error .initial-content {\n    display: none;\n  }\n\n  .card {\n    width: 160px;\n    height: 120px;\n    margin: 10px;\n    float: left;\n    position: relative;\n  }\n\n  .card .next-button {\n    position: absolute;\n    bottom: 0;\n    width: 100%;\n  }\n</style>\n","preview":"","inBody":false,"id":3,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":2,"headings":[{"id":"styles","name":"Styles"}],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"\n## Styles\n\nWe use CSS to hide the initially fetched item after the form is first submitted.\n\nWe also define a layout that allows us to have fixed card sizes, to ensure form submissions don't result in content jumps.\n\n"},{"doc_":"","code":"</head>\n<body>\n","preview":"","inBody":false,"id":4,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":0,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":""},{"doc_":"\n## Single item template\n\nDefine a template for a single item inside a card and give it an `id`. This template is used by `amp-form` for displaying new items.\n\nIn this case, we use a single `amp-img`.\n\n","code":"<template id=\"item-template\"\n  type=\"amp-mustache\">\n  <amp-img src=\"{{items.imageUrl}}\"\n    layout=\"fixed\"\n    width=\"160\"\n    height=\"90\"></amp-img>\n</template>\n","preview":"  <template id=\"item-template\"\n    type=\"amp-mustache\">\n    <amp-img src=\"{{items.imageUrl}}\"\n      layout=\"fixed\"\n      width=\"160\"\n      height=\"90\"></amp-img>\n  </template>\n","inBody":true,"id":5,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":2,"headings":[{"id":"single-item-template","name":"Single item template"}],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"\n## Single item template\n\nDefine a template for a single item inside a card and give it an `id`. This template is used by `amp-form` for displaying new items.\n\nIn this case, we use a single `amp-img`.\n\n"},{"doc_":"","code":"\n","preview":"\n","inBody":true,"id":6,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":0,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":""},{"doc_":"\n## Initial list of items\n\nWe define a template for the initial items and their layout and give it an `id`, allowing us to use it subsequently in an amp-list. This template is used by `amp-list` for fetching the initial up-to-date contents from the server.\n\nIt contains in itself an `amp-form` for each item which references the template defined above referred by its `id`. By using a different template for the `amp-form`, we're able to \"refresh\" a part of the content, namely the image in this case.\n\nNote: This template contains the same markup (in this case, a single `amp-img`) as used in the template above to render the initial items. This is wrapped inside `<div class=\"initial-content\">` which becomes hidden the first time the user submits the form.\n\n","code":"<template id=\"list-template\"\n  type=\"amp-mustache\">\n  <form class=\"card\"\n    method=\"post\"\n    action-xhr=\"http://localhost:8080/documentation/examples/api/photo-stream?single&width=160&height=90\">\n    <div class=\"initial-content\">\n      <amp-img src=\"{{imageUrl}}\"\n        layout=\"fixed\"\n        width=\"160\"\n        height=\"90\"></amp-img>\n    </div>\n\n    <div submit-success\n      template=\"item-template\"></div>\n\n    <input class=\"next-button\"\n      type=\"submit\"\n      value=\"Next\">\n  </form>\n</template>\n","preview":"  <template id=\"list-template\"\n    type=\"amp-mustache\">\n    <form class=\"card\"\n      method=\"post\"\n      action-xhr=\"http://localhost:8080/documentation/examples/api/photo-stream?single&width=160&height=90\">\n      <div class=\"initial-content\">\n        <amp-img src=\"{{imageUrl}}\"\n          layout=\"fixed\"\n          width=\"160\"\n          height=\"90\"></amp-img>\n      </div>\n\n      <div submit-success\n        template=\"item-template\"></div>\n\n      <input class=\"next-button\"\n        type=\"submit\"\n        value=\"Next\">\n    </form>\n  </template>\n","inBody":true,"id":7,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":2,"headings":[{"id":"initial-list-of-items","name":"Initial list of items"}],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"\n## Initial list of items\n\nWe define a template for the initial items and their layout and give it an `id`, allowing us to use it subsequently in an amp-list. This template is used by `amp-list` for fetching the initial up-to-date contents from the server.\n\nIt contains in itself an `amp-form` for each item which references the template defined above referred by its `id`. By using a different template for the `amp-form`, we're able to \"refresh\" a part of the content, namely the image in this case.\n\nNote: This template contains the same markup (in this case, a single `amp-img`) as used in the template above to render the initial items. This is wrapped inside `<div class=\"initial-content\">` which becomes hidden the first time the user submits the form.\n\n"},{"doc_":"","code":"\n","preview":"\n","inBody":true,"id":8,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":0,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":""},{"doc_":"\nWe use `amp-list` to render the initial items from the server using the template defined above referred by its `id`.\n\nThe height matches the combined height of our cards and their margins. The initial server response defines the number of cards to be displayed (in this case four).\n\n","code":"<amp-list template=\"list-template\"\n  src=\"http://localhost:8080/documentation/examples/api/photo-stream?width=160&height=90&items=4\"\n  layout=\"fixed\"\n  width=\"360\"\n  height=\"280\">\n</amp-list>\n","preview":"  <amp-list template=\"list-template\"\n    src=\"http://localhost:8080/documentation/examples/api/photo-stream?width=160&height=90&items=4\"\n    layout=\"fixed\"\n    width=\"360\"\n    height=\"280\">\n  </amp-list>\n","inBody":true,"id":9,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":2,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"\nWe use `amp-list` to render the initial items from the server using the template defined above referred by its `id`.\n\nThe height matches the combined height of our cards and their margins. The initial server response defines the number of cards to be displayed (in this case four).\n\n"},{"doc_":"","code":"</body>\n</html>\n","preview":"","inBody":false,"id":10,"cachedMarkedDoc":false,"isLastSection":true,"isFirstSection":false,"commentOffset":0,"codeOffset":0,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":""}],"head":"  <meta charset=\"utf-8\">\n  <script async src=\"https://cdn.ampproject.org/v0.js\"></script>\n  <script async custom-element=\"amp-list\" src=\"https://cdn.ampproject.org/v0/amp-list-0.1.js\"></script>\n  <script async custom-element=\"amp-form\" src=\"https://cdn.ampproject.org/v0/amp-form-0.1.js\"></script>\n  <script async custom-template=\"amp-mustache\" src=\"https://cdn.ampproject.org/v0/amp-mustache-0.2.js\"></script>\n  <meta name=\"viewport\" content=\"width=device-width,minimum-scale=1,initial-scale=1\"><style amp-boilerplate>body{-webkit-animation:-amp-start 8s steps(1,end) 0s 1 normal both;-moz-animation:-amp-start 8s steps(1,end) 0s 1 normal both;-ms-animation:-amp-start 8s steps(1,end) 0s 1 normal both;animation:-amp-start 8s steps(1,end) 0s 1 normal both}@-webkit-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-moz-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-ms-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-o-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}</style><noscript><style amp-boilerplate>body{-webkit-animation:none;-moz-animation:none;-ms-animation:none;animation:none}</style></noscript>\n\n","styles":"    .amp-form-submit-success .initial-content,\n    .amp-form-submitting .initial-content,\n    .amp-form-submit-error .initial-content {\n      display: none;\n    }\n\n    .card {\n      width: 160px;\n      height: 120px;\n      margin: 10px;\n      float: left;\n      position: relative;\n    }\n\n    .card .next-button {\n      position: absolute;\n      bottom: 0;\n      width: 100%;\n    }\n","title":"Dynamically updating items in a feed","metadata":{"preview":"amp4email","author":"fstanis"},"body":"<body>","elementsAfterBody":"","isAmpStory":false,"isAmpWeb":false,"isAmpAds":false,"isAmpEmail":true,"firstImage":"/favicons/android-chrome-256x256.png","lang":"en","_description":"This sample demonstrates how to display a feed of data, allowing the user to go through a large number of items in an email without having to scroll."},"route":"/documentation/examples/interactivity-dynamic-content/dynamically_updating_items_in_a_feed/index.html"}