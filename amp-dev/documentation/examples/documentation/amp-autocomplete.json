{"filePath":"examples/source/1.components/amp-autocomplete.html","source":"<!--\n  ## Introduction\n\n  An autocomplete-enabled input field suggests completed results corresponding to the user input as they type into the input field. \n  This feature can help the user to carry out their task more quickly.\n  Data can either be fetched from a JSON endpoint or locally from amp-state.\n--><!-- -->\n<!doctype html>\n<html ⚡>\n<head>\n<meta charset=\"utf-8\">\n  <link rel=\"canonical\" href=\"http://localhost:8080/documentation/examples/components/amp-autocomplete/index.html\">\n  <meta name=\"viewport\" content=\"width=device-width,minimum-scale=1,initial-scale=1\">\n  <script async src=\"https://cdn.ampproject.org/v0.js\"></script>\n  <title>amp-autocomplete</title>\n  <!-- \n    ## Setup \n\n    Import the `amp-autocomplete` component.\n  -->\n  <script async custom-element=\"amp-autocomplete\" src=\"https://cdn.ampproject.org/v0/amp-autocomplete-0.1.js\"></script>\n  <!--\n  Import the `amp-form` component.\n  -->\n  <script async custom-element=\"amp-form\" src=\"https://cdn.ampproject.org/v0/amp-form-0.1.js\"></script>\n  <!--\n  Optional: `amp-bind` is needed for dynamically changing the data source of an `amp-autocomplete`.\n  -->\n  <script async custom-element=\"amp-bind\" src=\"https://cdn.ampproject.org/v0/amp-bind-0.1.js\"></script>\n  <!--\n  Optional: `amp-mustache` is needed for rich-content templating and client-side rendering of form responses.\n  -->\n  <script async custom-template=\"amp-mustache\" src=\"https://cdn.ampproject.org/v0/amp-mustache-0.2.js\"></script>\n\n  <style amp-custom>\n  :root {\n    --space-1: .5rem;  /* 8px */\n    --space-2: 1rem;   /* 16px */\n    --space-3: 1.5rem; /* 24px */\n    --space-4: 2rem;   /* 32px */\n\n    --color-text-light: #fff;\n    --color-primary: #005AF0;\n    --box-shadow-1: 0 1px 1px 0 rgba(0,0,0,.14), 0 1px 1px -1px rgba(0,0,0,.14), 0 1px 5px 0 rgba(0,0,0,.12);\n  }\n  .input-field {\n    position: relative;\n  }\n  .suggest-data {\n    padding: var(--space-1) 0px;\n  }\n  .custom-population {\n    padding-top: 4px;\n    font: 10pt 'Courier New', Courier, monospace;\n  }\n  .trending {\n    display: inline-block;\n    vertical-align: middle;\n  }\n  .product {\n    align-items: center;\n    line-height: var(--space-4);\n  }\n  .suggest-data button,\n  .sample-form input[type=submit] {\n    -webkit-appearance: none;\n    border: none;\n    background-color: var(--color-primary);\n    color: var(--color-text-light);\n    margin: var(--space-2);\n    font-family: 'Poppins', sans-serif;\n    font-weight: 700;\n    line-height: 1.2em;\n    font-size: 1em;\n    padding: 0.75em 1.75em;\n    text-decoration: none;\n    text-align: center;\n    border-radius: 3px;\n    border: none;\n    box-shadow: var(--box-shadow-1);\n  }\n  .sample-form {\n    padding: var(--space-2);\n  }\n  </style>\n\n  <style amp-boilerplate>body{-webkit-animation:-amp-start 8s steps(1,end) 0s 1 normal both;-moz-animation:-amp-start 8s steps(1,end) 0s 1 normal both;-ms-animation:-amp-start 8s steps(1,end) 0s 1 normal both;animation:-amp-start 8s steps(1,end) 0s 1 normal both}@-webkit-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-moz-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-ms-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-o-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}</style><noscript><style amp-boilerplate>body{-webkit-animation:none;-moz-animation:none;-ms-animation:none;animation:none}</style></noscript>\n</head>\n<body>\n  <h2>Basic usage</h2>\n  <!-- \n    ## Basic usage \n\n    An `amp-autocomplete` must always be nested in a form and have an **input field** specified with an `input` or `textarea` tag and a datasource. \n    When a user types into this input field, relevant suggestions will automatically appear below the input field.\n\n    A **datasource** must be a JSON object containing an array property `items`, and can be specified inline with a child `script type=\"application/json\"` tag, or a server endpoint specified with a `src` attribute.\n  -->\n  <form class=\"sample-form\" method=\"post\" action-xhr=\"http://localhost:8080/documentation/examples/api/echo\" target=\"_top\">\n    <amp-autocomplete filter=\"substring\">\n      <input>\n      <script type=\"application/json\">\n        {\n          \"items\": [\"apple\", \"orange\", \"banana\"]\n        }\n      </script>\n    </amp-autocomplete>\n  </form>\n\n  <!-- \n    Alternatively, a datasource can also be provided as remote data through the `src` attribute.\n  -->\n  <form class=\"sample-form\" method=\"post\" action-xhr=\"http://localhost:8080/documentation/examples/api/echo\" target=\"_top\">\n    <amp-autocomplete filter=\"substring\" src=\"/static/samples/json/amp-autocomplete-cities.json\">\n      <input>\n    </amp-autocomplete>\n  </form>\n\n  <h2>Dynamic <code>src</code></h2>\n  <!-- \n    ## Dynamic `src`\n\n    The content of an `amp-autocomplete` can be changed dynamically by modifying its `src` value using `amp-bind`.\n  -->\n  <div>\n    <div class=\"suggest-data\">\n      <button on=\"tap:AMP.setState({ srcUrl: '/static/samples/json/amp-autocomplete-countries.json' })\">Suggest countries</button>\n      <button on=\"tap:AMP.setState({ srcUrl: '/static/samples/json/amp-autocomplete-cities.json' })\">Suggest US cities</button>\n    </div>\n    <form class=\"sample-form\" method=\"post\" action-xhr=\"http://localhost:8080/documentation/examples/api/echo\" target=\"_top\">\n      <div class=\"input-field\">\n        <amp-autocomplete filter=\"substring\" min-characters=\"0\" src=\"/static/samples/json/amp-autocomplete-cities.json\" [src]=\"srcUrl\">\n            <input name=\"name\" required>\n        </amp-autocomplete>\n        <input name=\"submit-button\" type=\"submit\" value=\"Submit\"><br>      \n      </div>\n      <div submit-success>\n        <template type=\"amp-mustache\">\n          Success! Mailing a postcard to {{name}}.\n        </template>\n      </div>\n    </form>\n  </div>\n\n  <h2>Suggesting rich content</h2>\n  <!-- \n    ## Suggesting rich content\n\n    More complicated data can be passed into autocompleted with an array of JsonObjects in \"items\".\n\n    ```json\n    { \"items\" : [\n        {\n            \"city\" : \"Albany\",\n            \"state\" : \"New York\", \n            \"areaCode\" : 518,\n            \"population\" : 98251\n        }, {\n            \"city\" : \"Annapolis\",\n            \"state\" : \"Maryland\",\n            \"areaCode\" : 410,\n            \"population\" : 39321\n        }, {\n            \"city\" : \"Trenton\",\n            \"state\" : \"New Jersey\",\n            \"areaCode\" : 609,\n            \"population\" : 84964\n        }\n    ] }\n    ```\n\n    The corresponding display of these data in the `amp-autocomplete` can be specified through a template.\n\n    ```html\n    <template type=\"amp-mustache\" id=\"amp-template-custom\">\n      <div class=\"city-item\" data-value=\"{{city}}, {{state}}\">\n          <div>{{city}}, {{state}}</div>\n          <div class=\"custom-population\">Population: {{population}}</div>        \n      </div>\n    </template>\n    ```\n\n    By default, `amp-autocomplete` will suggest items by matching on the \"value\" property of each JsonObject, but for more specified data, an attribute `filter-value` can be provided to signify the appropriate property to search on. \n    In the above example, we will want to search on the property `name`, because that is what the user will most likely search for.\n  -->\n  <form class=\"sample-form\" method=\"post\" action-xhr=\"http://localhost:8080/documentation/examples/api/echo\" target=\"_top\">\n    <label>\n        <span>Search for</span>\n        <amp-autocomplete filter=\"token-prefix\" filter-value=\"city\" min-characters=\"0\">\n          <input type=\"search\" name=\"city\">\n            <script type=\"application/json\">\n                { \"items\" : [\n                    {\n                        \"city\" : \"Albany\",\n                        \"state\" : \"New York\", \n                        \"areaCode\" : 518,\n                        \"population\" : 98251\n                    }, {\n                        \"city\" : \"Annapolis\",\n                        \"state\" : \"Maryland\",\n                        \"areaCode\" : 410,\n                        \"population\" : 39321\n                    }, {\n                        \"city\" : \"Trenton\",\n                        \"state\" : \"New Jersey\",\n                        \"areaCode\" : 609,\n                        \"population\" : 84964\n                    }\n                ] }\n            </script>\n            <template type=\"amp-mustache\" id=\"amp-template-custom\">\n                <div class=\"city-item\" data-value=\"{{city}}, {{state}}\">\n                    <div>{{city}}, {{state}}</div>\n                    <div class=\"custom-population\">Population: {{population}}</div>        \n                </div>\n            </template>\n        </amp-autocomplete>\n    </label>\n    <input type=\"submit\" value=\"Search\">\n    <div submit-success>\n      <template type=\"amp-mustache\">\n        Successfully submitted {{city}}!\n      </template>\n    </div>\n    <div submit-error>\n      Error!\n    </div>\n</form>\n\n  <h2>Display default items</h2>\n  <!-- \n    ## Displaying default items\n\n    Default suggestions for an `amp-autocomplete` can be displayed on user `focus` using rich content templating and the `min-characters` attribute on `amp-autocomplete`.\n\n    Additionally, because the `data-disabled` attribute on a template-rendered item allows it to be displayed but not searched against or selected, it can be useful for constructing a \"header\" within the results list that can serve to organize selectable items into categories. In the example below, \"Popular groceries\" acts as an example of the disabled item because it is not an item that you actually want to treat as a product.\n  -->\n  <div>\n    <amp-state id=\"generalInventory\">\n        <script type=\"application/json\">\n          { \"items\" : [{\n            \"name\": \"apple\",\n            \"emoji\": \"🍎\",\n            \"price\": \"$1\"\n          }, {\n            \"name\": \"grapes\",\n            \"emoji\": \"🍇\",\n            \"price\": \"$2\"\n          }, {\n            \"name\": \"whole milk\",\n            \"emoji\": \"🥛\",\n            \"price\": \"$4\"\n          }, {\n            \"name\": \"banana\",\n            \"emoji\": \"🍌\",\n            \"price\": \"$0.50\"\n          }] }\n        </script>\n    </amp-state>\n    <form class=\"sample-form\" method=\"post\" action-xhr=\"http://localhost:8080/documentation/examples/api/echo\" target=\"_top\">\n      <amp-autocomplete filter=\"substring\" min-characters=\"0\" filter-value=\"name\" [src]=\"manualFilterData\">\n        <input type=\"search\" name=\"product\" on=\"input-debounced:AMP.setState({ manualFilterData: event.value.length == 0 ? \n            initialInventory : generalInventory })\">\n        <amp-state id=\"initialInventory\">\n            <script type=\"application/json\">\n              { \"items\" : [\n               { \"isInitial\": \"true\", \n                  \"name\": \"apple\"\n                }, { \"isInitial\": \"true\", \n                  \"name\": \"grapes\"\n                }, { \"isInitial\": \"true\", \n                  \"name\": \"whole milk\"\n                }, { \"isInitial\": \"true\", \n                  \"name\": \"banana\"\n                } ] \n              }\n            </script>\n        </amp-state>\n        <template type=\"amp-mustache\">\n            {{#isInitial}}\n              <div class=\"product\" data-value=\"{{name}}\">\n                <amp-img class=\"trending\" width=\"24\" height=\"24\" src=\"/static/samples/img/trending.png\"></amp-img>\n                <span class=\"name-and-description\">{{name}}</span>\n              </div>\n            {{/isInitial}}\n            {{^isInitial}}\n              <div data-value=\"{{name}}\" class=\"product\">\n                <div class=\"name-and-description\">\n                    <div class=\"product-name\">{{emoji}} <b>{{name}}</b> <i>{{price}}</i></div>\n                </div>\n              </div>\n            {{/isInitial}}\n          </template> \n        </amp-autocomplete>\n      <input type=\"submit\" value=\"Search\">\n      <div submit-success>\n        <template type=\"amp-mustache\">\n          Success! Added <strong>{{product}}</strong> to your cart.\n        </template>\n      </div>\n      <div submit-error>\n        Error!\n      </div>\n    </form>\n  </div>\n\n  <h2>Inline autocomplete</h2>\n  <!-- \n    ## Displaying suggestions inline\n\n    Suggestions can be triggered on a specified character token in an `amp-autocomplete` for multiple autosuggestions in a single input by using the `inline` attribute.\n    The token for triggering the autosuggestion must be the provided value for the `inline` attribute. For example, if `inline=\"+\"`, then when the `+` token is entered by the user,\n    any relevant suggestions will be displayed. Otherwise, the field will behave the same as an unenhanced input field. The `inline` attribute does not support the empty string, \n    or `\"\"` as a legitimate token value on `amp-autocomplete`.\n  -->\n  <div>\n    <form class=\"sample-form\" method=\"post\" action-xhr=\"http://localhost:8080/documentation/examples/api/echo\" target=\"_top\">\n      <amp-autocomplete filter=\"prefix\" inline=\"+\" min-characters=\"0\" filter-value=\"name\">\n          <textarea autoexpand rows=\"2\" placeholder=\"Type your message here\" name=\"message\"></textarea>\n        <template type=\"amp-mustache\">\n          <div class=\"close-friends\" data-value=\"{{ email }}\">\n            <amp-img class=\"profile-pic\" height=\"20\" width=\"20\" layout=\"responsive\" alt=\"Profile picture of AMP logo\" src=\"/static/samples/img/favicon.png\"></amp-img>\n            <div class=\"info\">\n              <div>{{ name }}</div>\n              <div class=\"custom\">{{ email }}</div>\n            </div>\n          </div>\n        </template>\n        <script type=\"application/json\">\n          {\n            \"items\": [\n              {\"email\": \"harrypotter@hogwarts.edu\", \"name\": \"Harry Potter\"},\n              {\n                \"email\": \"albusdumbledore@hogwarts.edu\",\n                \"name\": \"Albus Dumbledore\"\n              },\n              {\n                \"email\": \"voldemort@deatheater.org\",\n                \"name\": \"Tom Marvolo Riddle\"\n              },\n              {\"email\": \"severussnape@hogwarts.edu\", \"name\": \"Severus Snape\"},\n              {\"email\": \"siriusblack@hogwarts.edu\", \"name\": \"Sirius Black\"},\n              {\n                \"email\": \"hermionegranger@hogwarts.edu\",\n                \"name\": \"Hermione Granger\"\n              },\n              {\"email\": \"ronweasley@hogwarts.edu\", \"name\": \"Ron Weasley\"},\n              {\"email\": \"dracomalfoy@hogwarts.edu\", \"name\": \"Draco Malfoy\"},\n              {\n                \"email\": \"nevillelongbottom@hogwarts.edu\",\n                \"name\": \"Neville Longbottom\"\n              },\n              {\"email\": \"rubeushagrid@hogwarts.edu\", \"name\": \"Rubeus Hagrid\"},\n              {\"email\": \"dobby@hogwarts.edu\", \"name\": \"Dobby\"},\n              {\n                \"email\": \"bellatrixlestrange@deatheater.org\",\n                \"name\": \"Bellatrix Lestrange\"\n              },\n              {\n                \"email\": \"minervamcgonagall@hogwarts.edu\",\n                \"name\": \"Minerva McGonagall\"\n              }\n            ]\n          }\n        </script>\n      </amp-autocomplete>\n      <input type=\"submit\" value=\"Search\">\n      <div submit-success>\n        <template type=\"amp-mustache\">\n          Success! <strong>{{message}}</strong>\n        </template>\n      </div>\n      <div submit-error>\n        Error!\n      </div>\n    </form>\n  </div>\n\n  <h2>Query data sources</h2>\n  <!-- \n    ## Specifying query parameters\n\n    User inputs can be passed to a statically generated endpoint when the `query` attribute is paired with the `src` attribute.\n\n    For example if a `src=\"https://example.com` and `query=\"q\"`, then a user who types in `abc` will get the fetch JSON result from `https://example.com?q=abc`.\n  -->\n  <div>\n    <form class=\"sample-form\" method=\"post\" action-xhr=\"http://localhost:8080/documentation/examples/api/echo\" target=\"_top\">\n      <amp-autocomplete filter=\"none\" min-characters=\"1\" src=\"http://localhost:8080/samples_templates/products_autosuggest\" query=\"q\">\n        <input type=\"search\" name=\"queryInput\">\n        </amp-autocomplete>\n      <input type=\"submit\" value=\"Search\">\n      <div submit-success>\n        <template type=\"amp-mustache\">\n          Success! Received <strong>{{queryInput}}</strong>.\n        </template>\n      </div>\n    </form>\n  </div>\n</body></html>","document":{"sections":[{"doc_":"\n## Introduction\n\nAn autocomplete-enabled input field suggests completed results corresponding to the user input as they type into the input field. \nThis feature can help the user to carry out their task more quickly.\nData can either be fetched from a JSON endpoint or locally from amp-state.\n\n","code":"","preview":"","inBody":false,"id":0,"cachedMarkedDoc":"<h2 id=\"introduction\" class=\"www-heading pb4 mb2 relative h3\">Introduction</h2><p class=\"mb2 px1\">An autocomplete-enabled input field suggests completed results corresponding to the user input as they type into the input field. \nThis feature can help the user to carry out their task more quickly.\nData can either be fetched from a JSON endpoint or locally from amp-state.</p>","isLastSection":false,"isFirstSection":true,"commentOffset":0,"codeOffset":0,"headings":[{"id":"introduction","name":"Introduction"}],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"\n## Introduction\n\nAn autocomplete-enabled input field suggests completed results corresponding to the user input as they type into the input field. \nThis feature can help the user to carry out their task more quickly.\nData can either be fetched from a JSON endpoint or locally from amp-state.\n\n"},{"doc_":"\n","code":"<!doctype html>\n<html ⚡>\n<head>\n<meta charset=\"utf-8\">\n  <link rel=\"canonical\" href=\"http://localhost:8080/documentation/examples/components/amp-autocomplete/index.html\">\n  <meta name=\"viewport\" content=\"width=device-width,minimum-scale=1,initial-scale=1\">\n  <script async src=\"https://cdn.ampproject.org/v0.js\"></script>\n  <title>amp-autocomplete</title>\n","preview":"","inBody":false,"id":1,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":0,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":" \n"},{"doc_":"\n## Setup\n\nImport the `amp-autocomplete` component.\n\n","code":"<script async custom-element=\"amp-autocomplete\" src=\"https://cdn.ampproject.org/v0/amp-autocomplete-0.1.js\"></script>\n","preview":"","inBody":false,"id":2,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":2,"headings":[{"id":"setup","name":"Setup"}],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"\n## Setup\n\nImport the `amp-autocomplete` component.\n\n"},{"doc_":"\nImport the `amp-form` component.\n\n","code":"<script async custom-element=\"amp-form\" src=\"https://cdn.ampproject.org/v0/amp-form-0.1.js\"></script>\n","preview":"","inBody":false,"id":3,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":2,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"\nImport the `amp-form` component.\n\n"},{"doc_":"\nOptional: `amp-bind` is needed for dynamically changing the data source of an `amp-autocomplete`.\n\n","code":"<script async custom-element=\"amp-bind\" src=\"https://cdn.ampproject.org/v0/amp-bind-0.1.js\"></script>\n","preview":"","inBody":false,"id":4,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":2,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"\nOptional: `amp-bind` is needed for dynamically changing the data source of an `amp-autocomplete`.\n\n"},{"doc_":"\nOptional: `amp-mustache` is needed for rich-content templating and client-side rendering of form responses.\n\n","code":"<script async custom-template=\"amp-mustache\" src=\"https://cdn.ampproject.org/v0/amp-mustache-0.2.js\"></script>\n","preview":"","inBody":false,"id":5,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":2,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"\nOptional: `amp-mustache` is needed for rich-content templating and client-side rendering of form responses.\n\n"},{"doc_":"","code":"\n  <style amp-custom>\n  :root {\n    --space-1: .5rem;  /* 8px */\n    --space-2: 1rem;   /* 16px */\n    --space-3: 1.5rem; /* 24px */\n    --space-4: 2rem;   /* 32px */\n\n    --color-text-light: #fff;\n    --color-primary: #005AF0;\n    --box-shadow-1: 0 1px 1px 0 rgba(0,0,0,.14), 0 1px 1px -1px rgba(0,0,0,.14), 0 1px 5px 0 rgba(0,0,0,.12);\n  }\n  .input-field {\n    position: relative;\n  }\n  .suggest-data {\n    padding: var(--space-1) 0px;\n  }\n  .custom-population {\n    padding-top: 4px;\n    font: 10pt 'Courier New', Courier, monospace;\n  }\n  .trending {\n    display: inline-block;\n    vertical-align: middle;\n  }\n  .product {\n    align-items: center;\n    line-height: var(--space-4);\n  }\n  .suggest-data button,\n  .sample-form input[type=submit] {\n    -webkit-appearance: none;\n    border: none;\n    background-color: var(--color-primary);\n    color: var(--color-text-light);\n    margin: var(--space-2);\n    font-family: 'Poppins', sans-serif;\n    font-weight: 700;\n    line-height: 1.2em;\n    font-size: 1em;\n    padding: 0.75em 1.75em;\n    text-decoration: none;\n    text-align: center;\n    border-radius: 3px;\n    border: none;\n    box-shadow: var(--box-shadow-1);\n  }\n  .sample-form {\n    padding: var(--space-2);\n  }\n  </style>\n\n  <style amp-boilerplate>body{-webkit-animation:-amp-start 8s steps(1,end) 0s 1 normal both;-moz-animation:-amp-start 8s steps(1,end) 0s 1 normal both;-ms-animation:-amp-start 8s steps(1,end) 0s 1 normal both;animation:-amp-start 8s steps(1,end) 0s 1 normal both}@-webkit-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-moz-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-ms-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-o-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}</style><noscript><style amp-boilerplate>body{-webkit-animation:none;-moz-animation:none;-ms-animation:none;animation:none}</style></noscript>\n</head>\n<body>\n  <h2>Basic usage</h2>\n","preview":"  <h2>Basic usage</h2>\n","inBody":false,"id":6,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":0,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":""},{"doc_":"\n## Basic usage\n\nAn `amp-autocomplete` must always be nested in a form and have an **input field** specified with an `input` or `textarea` tag and a datasource. \nWhen a user types into this input field, relevant suggestions will automatically appear below the input field.\n\nA **datasource** must be a JSON object containing an array property `items`, and can be specified inline with a child `script type=\"application/json\"` tag, or a server endpoint specified with a `src` attribute.\n\n","code":"<form class=\"sample-form\"\n  method=\"post\"\n  action-xhr=\"http://localhost:8080/documentation/examples/api/echo\"\n  target=\"_top\">\n  <amp-autocomplete filter=\"substring\">\n    <input>\n    <script type=\"application/json\">\n      {\n        \"items\": [\"apple\", \"orange\", \"banana\"]\n      }\n    </script>\n  </amp-autocomplete>\n</form>\n","preview":"  <form class=\"sample-form\"\n    method=\"post\"\n    action-xhr=\"http://localhost:8080/documentation/examples/api/echo\"\n    target=\"_top\">\n    <amp-autocomplete filter=\"substring\">\n      <input>\n      <script type=\"application/json\">\n        {\n          \"items\": [\"apple\", \"orange\", \"banana\"]\n        }\n      </script>\n    </amp-autocomplete>\n  </form>\n","inBody":true,"id":7,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":2,"headings":[{"id":"basic-usage","name":"Basic usage"}],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"\n## Basic usage\n\nAn `amp-autocomplete` must always be nested in a form and have an **input field** specified with an `input` or `textarea` tag and a datasource. \nWhen a user types into this input field, relevant suggestions will automatically appear below the input field.\n\nA **datasource** must be a JSON object containing an array property `items`, and can be specified inline with a child `script type=\"application/json\"` tag, or a server endpoint specified with a `src` attribute.\n\n"},{"doc_":"","code":"\n","preview":"\n","inBody":true,"id":8,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":0,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":""},{"doc_":"\nAlternatively, a datasource can also be provided as remote data through the `src` attribute.\n\n","code":"<form class=\"sample-form\"\n  method=\"post\"\n  action-xhr=\"http://localhost:8080/documentation/examples/api/echo\"\n  target=\"_top\">\n  <amp-autocomplete filter=\"substring\"\n    src=\"/static/samples/json/amp-autocomplete-cities.json\">\n    <input>\n  </amp-autocomplete>\n</form>\n","preview":"  <form class=\"sample-form\"\n    method=\"post\"\n    action-xhr=\"http://localhost:8080/documentation/examples/api/echo\"\n    target=\"_top\">\n    <amp-autocomplete filter=\"substring\"\n      src=\"/static/samples/json/amp-autocomplete-cities.json\">\n      <input>\n    </amp-autocomplete>\n  </form>\n","inBody":true,"id":9,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":2,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"\nAlternatively, a datasource can also be provided as remote data through the `src` attribute.\n\n"},{"doc_":"","code":"\n<h2>Dynamic <code>src</code></h2>\n","preview":"\n  <h2>Dynamic <code>src</code></h2>\n","inBody":true,"id":10,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":0,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":""},{"doc_":"\n## Dynamic `src`\n\nThe content of an `amp-autocomplete` can be changed dynamically by modifying its `src` value using `amp-bind`.\n\n","code":"<div class=\"suggest-data\">\n  <button on=\"tap:AMP.setState({ srcUrl: '/static/samples/json/amp-autocomplete-countries.json' })\">Suggest countries</button>\n  <button on=\"tap:AMP.setState({ srcUrl: '/static/samples/json/amp-autocomplete-cities.json' })\">Suggest US cities</button>\n</div>\n<form class=\"sample-form\"\n  method=\"post\"\n  action-xhr=\"http://localhost:8080/documentation/examples/api/echo\"\n  target=\"_top\">\n  <div class=\"input-field\">\n    <amp-autocomplete filter=\"substring\"\n      min-characters=\"0\"\n      src=\"/static/samples/json/amp-autocomplete-cities.json\"\n      [src]=\"srcUrl\">\n      <input name=\"name\"\n        required>\n    </amp-autocomplete>\n    <input name=\"submit-button\"\n      type=\"submit\"\n      value=\"Submit\"><br>\n  </div>\n  <div submit-success>\n    <template type=\"amp-mustache\">\n      Success! Mailing a postcard to {{name}}.\n    </template>\n  </div>\n</form>","preview":"  <div>\n    <div class=\"suggest-data\">\n      <button on=\"tap:AMP.setState({ srcUrl: '/static/samples/json/amp-autocomplete-countries.json' })\">Suggest countries</button>\n      <button on=\"tap:AMP.setState({ srcUrl: '/static/samples/json/amp-autocomplete-cities.json' })\">Suggest US cities</button>\n    </div>\n    <form class=\"sample-form\"\n      method=\"post\"\n      action-xhr=\"http://localhost:8080/documentation/examples/api/echo\"\n      target=\"_top\">\n      <div class=\"input-field\">\n        <amp-autocomplete filter=\"substring\"\n          min-characters=\"0\"\n          src=\"/static/samples/json/amp-autocomplete-cities.json\"\n          [src]=\"srcUrl\">\n          <input name=\"name\"\n            required>\n        </amp-autocomplete>\n        <input name=\"submit-button\"\n          type=\"submit\"\n          value=\"Submit\"><br>\n      </div>\n      <div submit-success>\n        <template type=\"amp-mustache\">\n          Success! Mailing a postcard to {{name}}.\n        </template>\n      </div>\n    </form>\n  </div>\n","inBody":true,"id":11,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":2,"headings":[{"id":"dynamic-src","name":"Dynamic src"}],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"\n## Dynamic `src`\n\nThe content of an `amp-autocomplete` can be changed dynamically by modifying its `src` value using `amp-bind`.\n\n"},{"doc_":"","code":"\n<h2>Suggesting rich content</h2>\n","preview":"\n  <h2>Suggesting rich content</h2>\n","inBody":true,"id":12,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":0,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":""},{"doc_":"\n## Suggesting rich content\n\nMore complicated data can be passed into autocompleted with an array of JsonObjects in \"items\".\n\n[sourcecode:json]\n{ \"items\" : [\n    {\n        \"city\" : \"Albany\",\n        \"state\" : \"New York\", \n        \"areaCode\" : 518,\n        \"population\" : 98251\n    }, {\n        \"city\" : \"Annapolis\",\n        \"state\" : \"Maryland\",\n        \"areaCode\" : 410,\n        \"population\" : 39321\n    }, {\n        \"city\" : \"Trenton\",\n        \"state\" : \"New Jersey\",\n        \"areaCode\" : 609,\n        \"population\" : 84964\n    }\n] }\n[/sourcecode]\n\nThe corresponding display of these data in the `amp-autocomplete` can be specified through a template.\n\n[sourcecode:html]\n<template type=\"amp-mustache\" id=\"amp-template-custom\">\n  <div class=\"city-item\" data-value=\"{% raw %}{{city}}{% endraw %}, {% raw %}{{state}}{% endraw %}\">\n      <div>{% raw %}{{city}}{% endraw %}, {% raw %}{{state}}{% endraw %}</div>\n      <div class=\"custom-population\">Population: {% raw %}{{population}}{% endraw %}</div>        \n  </div>\n</template>\n[/sourcecode]\n\nBy default, `amp-autocomplete` will suggest items by matching on the \"value\" property of each JsonObject, but for more specified data, an attribute `filter-value` can be provided to signify the appropriate property to search on. \nIn the above example, we will want to search on the property `name`, because that is what the user will most likely search for.\n\n","code":"<form class=\"sample-form\"\n  method=\"post\"\n  action-xhr=\"http://localhost:8080/documentation/examples/api/echo\"\n  target=\"_top\">\n  <label>\n    <span>Search for</span>\n    <amp-autocomplete filter=\"token-prefix\"\n      filter-value=\"city\"\n      min-characters=\"0\">\n      <input type=\"search\"\n        name=\"city\">\n      <script type=\"application/json\">\n        {\n          \"items\": [{\n            \"city\": \"Albany\",\n            \"state\": \"New York\",\n            \"areaCode\": 518,\n            \"population\": 98251\n          }, {\n            \"city\": \"Annapolis\",\n            \"state\": \"Maryland\",\n            \"areaCode\": 410,\n            \"population\": 39321\n          }, {\n            \"city\": \"Trenton\",\n            \"state\": \"New Jersey\",\n            \"areaCode\": 609,\n            \"population\": 84964\n          }]\n        }\n      </script>\n      <template type=\"amp-mustache\"\n        id=\"amp-template-custom\">\n        <div class=\"city-item\"\n          data-value=\"{{city}}, {{state}}\">\n          <div>{{city}}, {{state}}</div>\n          <div class=\"custom-population\">Population: {{population}}</div>\n        </div>\n      </template>\n    </amp-autocomplete>\n  </label>\n  <input type=\"submit\"\n    value=\"Search\">\n  <div submit-success>\n    <template type=\"amp-mustache\">\n      Successfully submitted {{city}}!\n    </template>\n  </div>\n  <div submit-error>\n    Error!\n  </div>\n</form>\n","preview":"  <form class=\"sample-form\"\n    method=\"post\"\n    action-xhr=\"http://localhost:8080/documentation/examples/api/echo\"\n    target=\"_top\">\n    <label>\n      <span>Search for</span>\n      <amp-autocomplete filter=\"token-prefix\"\n        filter-value=\"city\"\n        min-characters=\"0\">\n        <input type=\"search\"\n          name=\"city\">\n        <script type=\"application/json\">\n          {\n            \"items\": [{\n              \"city\": \"Albany\",\n              \"state\": \"New York\",\n              \"areaCode\": 518,\n              \"population\": 98251\n            }, {\n              \"city\": \"Annapolis\",\n              \"state\": \"Maryland\",\n              \"areaCode\": 410,\n              \"population\": 39321\n            }, {\n              \"city\": \"Trenton\",\n              \"state\": \"New Jersey\",\n              \"areaCode\": 609,\n              \"population\": 84964\n            }]\n          }\n        </script>\n        <template type=\"amp-mustache\"\n          id=\"amp-template-custom\">\n          <div class=\"city-item\"\n            data-value=\"{{city}}, {{state}}\">\n            <div>{{city}}, {{state}}</div>\n            <div class=\"custom-population\">Population: {{population}}</div>\n          </div>\n        </template>\n      </amp-autocomplete>\n    </label>\n    <input type=\"submit\"\n      value=\"Search\">\n    <div submit-success>\n      <template type=\"amp-mustache\">\n        Successfully submitted {{city}}!\n      </template>\n    </div>\n    <div submit-error>\n      Error!\n    </div>\n  </form>\n","inBody":true,"id":13,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":2,"headings":[{"id":"suggesting-rich-content","name":"Suggesting rich content"}],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"\n## Suggesting rich content\n\nMore complicated data can be passed into autocompleted with an array of JsonObjects in \"items\".\n\n```json\n{ \"items\" : [\n    {\n        \"city\" : \"Albany\",\n        \"state\" : \"New York\", \n        \"areaCode\" : 518,\n        \"population\" : 98251\n    }, {\n        \"city\" : \"Annapolis\",\n        \"state\" : \"Maryland\",\n        \"areaCode\" : 410,\n        \"population\" : 39321\n    }, {\n        \"city\" : \"Trenton\",\n        \"state\" : \"New Jersey\",\n        \"areaCode\" : 609,\n        \"population\" : 84964\n    }\n] }\n```\n\nThe corresponding display of these data in the `amp-autocomplete` can be specified through a template.\n\n```html\n<template type=\"amp-mustache\" id=\"amp-template-custom\">\n  <div class=\"city-item\" data-value=\"{{city}}, {{state}}\">\n      <div>{{city}}, {{state}}</div>\n      <div class=\"custom-population\">Population: {{population}}</div>        \n  </div>\n</template>\n```\n\nBy default, `amp-autocomplete` will suggest items by matching on the \"value\" property of each JsonObject, but for more specified data, an attribute `filter-value` can be provided to signify the appropriate property to search on. \nIn the above example, we will want to search on the property `name`, because that is what the user will most likely search for.\n\n"},{"doc_":"","code":"\n<h2>Display default items</h2>\n","preview":"\n  <h2>Display default items</h2>\n","inBody":true,"id":14,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":0,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":""},{"doc_":"\n## Displaying default items\n\nDefault suggestions for an `amp-autocomplete` can be displayed on user `focus` using rich content templating and the `min-characters` attribute on `amp-autocomplete`.\n\nAdditionally, because the `data-disabled` attribute on a template-rendered item allows it to be displayed but not searched against or selected, it can be useful for constructing a \"header\" within the results list that can serve to organize selectable items into categories. In the example below, \"Popular groceries\" acts as an example of the disabled item because it is not an item that you actually want to treat as a product.\n\n","code":"<div>\n  <amp-state id=\"generalInventory\">\n    <script type=\"application/json\">\n      {\n        \"items\": [{\n          \"name\": \"apple\",\n          \"emoji\": \"🍎\",\n          \"price\": \"$1\"\n        }, {\n          \"name\": \"grapes\",\n          \"emoji\": \"🍇\",\n          \"price\": \"$2\"\n        }, {\n          \"name\": \"whole milk\",\n          \"emoji\": \"🥛\",\n          \"price\": \"$4\"\n        }, {\n          \"name\": \"banana\",\n          \"emoji\": \"🍌\",\n          \"price\": \"$0.50\"\n        }]\n      }\n    </script>\n  </amp-state>\n  <form class=\"sample-form\"\n    method=\"post\"\n    action-xhr=\"http://localhost:8080/documentation/examples/api/echo\"\n    target=\"_top\">\n    <amp-autocomplete filter=\"substring\"\n      min-characters=\"0\"\n      filter-value=\"name\"\n      [src]=\"manualFilterData\">\n      <input type=\"search\"\n        name=\"product\"\n        on=\"input-debounced:AMP.setState({ manualFilterData: event.value.length == 0 ? \n          initialInventory : generalInventory })\">\n      <amp-state id=\"initialInventory\">\n        <script type=\"application/json\">\n          {\n            \"items\": [{\n              \"isInitial\": \"true\",\n              \"name\": \"apple\"\n            }, {\n              \"isInitial\": \"true\",\n              \"name\": \"grapes\"\n            }, {\n              \"isInitial\": \"true\",\n              \"name\": \"whole milk\"\n            }, {\n              \"isInitial\": \"true\",\n              \"name\": \"banana\"\n            }]\n          }\n        </script>\n      </amp-state>\n      <template type=\"amp-mustache\">\n        {{#isInitial}}\n          <div class=\"product\"\n            data-value=\"{{name}}\">\n            <amp-img class=\"trending\"\n              width=\"24\"\n              height=\"24\"\n              src=\"/static/samples/img/trending.png\"></amp-img>\n            <span class=\"name-and-description\">{{name}}</span>\n          </div>\n        {{/isInitial}}\n        {{^isInitial}}\n          <div data-value=\"{{name}}\"\n            class=\"product\">\n            <div class=\"name-and-description\">\n              <div class=\"product-name\">{{emoji}} <b>{{name}}</b> <i>{{price}}</i></div>\n            </div>\n          </div>\n        {{/isInitial}}\n      </template>\n    </amp-autocomplete>\n    <input type=\"submit\"\n      value=\"Search\">\n    <div submit-success>\n      <template type=\"amp-mustache\">\n        Success! Added <strong>{{product}}</strong> to your cart.\n      </template>\n    </div>\n    <div submit-error>\n      Error!\n    </div>\n  </form>\n</div>\n\n<h2>Inline autocomplete</h2>\n","preview":"  <div>\n    <amp-state id=\"generalInventory\">\n      <script type=\"application/json\">\n        {\n          \"items\": [{\n            \"name\": \"apple\",\n            \"emoji\": \"🍎\",\n            \"price\": \"$1\"\n          }, {\n            \"name\": \"grapes\",\n            \"emoji\": \"🍇\",\n            \"price\": \"$2\"\n          }, {\n            \"name\": \"whole milk\",\n            \"emoji\": \"🥛\",\n            \"price\": \"$4\"\n          }, {\n            \"name\": \"banana\",\n            \"emoji\": \"🍌\",\n            \"price\": \"$0.50\"\n          }]\n        }\n      </script>\n    </amp-state>\n    <form class=\"sample-form\"\n      method=\"post\"\n      action-xhr=\"http://localhost:8080/documentation/examples/api/echo\"\n      target=\"_top\">\n      <amp-autocomplete filter=\"substring\"\n        min-characters=\"0\"\n        filter-value=\"name\"\n        [src]=\"manualFilterData\">\n        <input type=\"search\"\n          name=\"product\"\n          on=\"input-debounced:AMP.setState({ manualFilterData: event.value.length == 0 ? \n            initialInventory : generalInventory })\">\n        <amp-state id=\"initialInventory\">\n          <script type=\"application/json\">\n            {\n              \"items\": [{\n                \"isInitial\": \"true\",\n                \"name\": \"apple\"\n              }, {\n                \"isInitial\": \"true\",\n                \"name\": \"grapes\"\n              }, {\n                \"isInitial\": \"true\",\n                \"name\": \"whole milk\"\n              }, {\n                \"isInitial\": \"true\",\n                \"name\": \"banana\"\n              }]\n            }\n          </script>\n        </amp-state>\n        <template type=\"amp-mustache\">\n          {{#isInitial}}\n            <div class=\"product\"\n              data-value=\"{{name}}\">\n              <amp-img class=\"trending\"\n                width=\"24\"\n                height=\"24\"\n                src=\"/static/samples/img/trending.png\"></amp-img>\n              <span class=\"name-and-description\">{{name}}</span>\n            </div>\n          {{/isInitial}}\n          {{^isInitial}}\n            <div data-value=\"{{name}}\"\n              class=\"product\">\n              <div class=\"name-and-description\">\n                <div class=\"product-name\">{{emoji}} <b>{{name}}</b> <i>{{price}}</i></div>\n              </div>\n            </div>\n          {{/isInitial}}\n        </template>\n      </amp-autocomplete>\n      <input type=\"submit\"\n        value=\"Search\">\n      <div submit-success>\n        <template type=\"amp-mustache\">\n          Success! Added <strong>{{product}}</strong> to your cart.\n        </template>\n      </div>\n      <div submit-error>\n        Error!\n      </div>\n    </form>\n  </div>\n\n  <h2>Inline autocomplete</h2>\n","inBody":true,"id":15,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":2,"headings":[{"id":"displaying-default-items","name":"Displaying default items"}],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"\n## Displaying default items\n\nDefault suggestions for an `amp-autocomplete` can be displayed on user `focus` using rich content templating and the `min-characters` attribute on `amp-autocomplete`.\n\nAdditionally, because the `data-disabled` attribute on a template-rendered item allows it to be displayed but not searched against or selected, it can be useful for constructing a \"header\" within the results list that can serve to organize selectable items into categories. In the example below, \"Popular groceries\" acts as an example of the disabled item because it is not an item that you actually want to treat as a product.\n\n"},{"doc_":"\n## Displaying suggestions inline\n\nSuggestions can be triggered on a specified character token in an `amp-autocomplete` for multiple autosuggestions in a single input by using the `inline` attribute.\nThe token for triggering the autosuggestion must be the provided value for the `inline` attribute. For example, if `inline=\"+\"`, then when the `+` token is entered by the user,\nany relevant suggestions will be displayed. Otherwise, the field will behave the same as an unenhanced input field. The `inline` attribute does not support the empty string, \nor `\"\"` as a legitimate token value on `amp-autocomplete`.\n\n","code":"<form class=\"sample-form\"\n  method=\"post\"\n  action-xhr=\"http://localhost:8080/documentation/examples/api/echo\"\n  target=\"_top\">\n  <amp-autocomplete filter=\"prefix\"\n    inline=\"+\"\n    min-characters=\"0\"\n    filter-value=\"name\">\n    <textarea autoexpand\n      rows=\"2\"\n      placeholder=\"Type your message here\"\n      name=\"message\"></textarea>\n    <template type=\"amp-mustache\">\n      <div class=\"close-friends\"\n        data-value=\"{{ email }}\">\n        <amp-img class=\"profile-pic\"\n          height=\"20\"\n          width=\"20\"\n          layout=\"responsive\"\n          alt=\"Profile picture of AMP logo\"\n          src=\"/static/samples/img/favicon.png\"></amp-img>\n        <div class=\"info\">\n          <div>{{ name }}</div>\n          <div class=\"custom\">{{ email }}</div>\n        </div>\n      </div>\n    </template>\n    <script type=\"application/json\">\n      {\n        \"items\": [{\n            \"email\": \"harrypotter@hogwarts.edu\",\n            \"name\": \"Harry Potter\"\n          },\n          {\n            \"email\": \"albusdumbledore@hogwarts.edu\",\n            \"name\": \"Albus Dumbledore\"\n          },\n          {\n            \"email\": \"voldemort@deatheater.org\",\n            \"name\": \"Tom Marvolo Riddle\"\n          },\n          {\n            \"email\": \"severussnape@hogwarts.edu\",\n            \"name\": \"Severus Snape\"\n          },\n          {\n            \"email\": \"siriusblack@hogwarts.edu\",\n            \"name\": \"Sirius Black\"\n          },\n          {\n            \"email\": \"hermionegranger@hogwarts.edu\",\n            \"name\": \"Hermione Granger\"\n          },\n          {\n            \"email\": \"ronweasley@hogwarts.edu\",\n            \"name\": \"Ron Weasley\"\n          },\n          {\n            \"email\": \"dracomalfoy@hogwarts.edu\",\n            \"name\": \"Draco Malfoy\"\n          },\n          {\n            \"email\": \"nevillelongbottom@hogwarts.edu\",\n            \"name\": \"Neville Longbottom\"\n          },\n          {\n            \"email\": \"rubeushagrid@hogwarts.edu\",\n            \"name\": \"Rubeus Hagrid\"\n          },\n          {\n            \"email\": \"dobby@hogwarts.edu\",\n            \"name\": \"Dobby\"\n          },\n          {\n            \"email\": \"bellatrixlestrange@deatheater.org\",\n            \"name\": \"Bellatrix Lestrange\"\n          },\n          {\n            \"email\": \"minervamcgonagall@hogwarts.edu\",\n            \"name\": \"Minerva McGonagall\"\n          }\n        ]\n      }\n    </script>\n  </amp-autocomplete>\n  <input type=\"submit\"\n    value=\"Search\">\n  <div submit-success>\n    <template type=\"amp-mustache\">\n      Success! <strong>{{message}}</strong>\n    </template>\n  </div>\n  <div submit-error>\n    Error!\n  </div>\n</form>","preview":"  <div>\n    <form class=\"sample-form\"\n      method=\"post\"\n      action-xhr=\"http://localhost:8080/documentation/examples/api/echo\"\n      target=\"_top\">\n      <amp-autocomplete filter=\"prefix\"\n        inline=\"+\"\n        min-characters=\"0\"\n        filter-value=\"name\">\n        <textarea autoexpand\n          rows=\"2\"\n          placeholder=\"Type your message here\"\n          name=\"message\"></textarea>\n        <template type=\"amp-mustache\">\n          <div class=\"close-friends\"\n            data-value=\"{{ email }}\">\n            <amp-img class=\"profile-pic\"\n              height=\"20\"\n              width=\"20\"\n              layout=\"responsive\"\n              alt=\"Profile picture of AMP logo\"\n              src=\"/static/samples/img/favicon.png\"></amp-img>\n            <div class=\"info\">\n              <div>{{ name }}</div>\n              <div class=\"custom\">{{ email }}</div>\n            </div>\n          </div>\n        </template>\n        <script type=\"application/json\">\n          {\n            \"items\": [{\n                \"email\": \"harrypotter@hogwarts.edu\",\n                \"name\": \"Harry Potter\"\n              },\n              {\n                \"email\": \"albusdumbledore@hogwarts.edu\",\n                \"name\": \"Albus Dumbledore\"\n              },\n              {\n                \"email\": \"voldemort@deatheater.org\",\n                \"name\": \"Tom Marvolo Riddle\"\n              },\n              {\n                \"email\": \"severussnape@hogwarts.edu\",\n                \"name\": \"Severus Snape\"\n              },\n              {\n                \"email\": \"siriusblack@hogwarts.edu\",\n                \"name\": \"Sirius Black\"\n              },\n              {\n                \"email\": \"hermionegranger@hogwarts.edu\",\n                \"name\": \"Hermione Granger\"\n              },\n              {\n                \"email\": \"ronweasley@hogwarts.edu\",\n                \"name\": \"Ron Weasley\"\n              },\n              {\n                \"email\": \"dracomalfoy@hogwarts.edu\",\n                \"name\": \"Draco Malfoy\"\n              },\n              {\n                \"email\": \"nevillelongbottom@hogwarts.edu\",\n                \"name\": \"Neville Longbottom\"\n              },\n              {\n                \"email\": \"rubeushagrid@hogwarts.edu\",\n                \"name\": \"Rubeus Hagrid\"\n              },\n              {\n                \"email\": \"dobby@hogwarts.edu\",\n                \"name\": \"Dobby\"\n              },\n              {\n                \"email\": \"bellatrixlestrange@deatheater.org\",\n                \"name\": \"Bellatrix Lestrange\"\n              },\n              {\n                \"email\": \"minervamcgonagall@hogwarts.edu\",\n                \"name\": \"Minerva McGonagall\"\n              }\n            ]\n          }\n        </script>\n      </amp-autocomplete>\n      <input type=\"submit\"\n        value=\"Search\">\n      <div submit-success>\n        <template type=\"amp-mustache\">\n          Success! <strong>{{message}}</strong>\n        </template>\n      </div>\n      <div submit-error>\n        Error!\n      </div>\n    </form>\n  </div>\n","inBody":true,"id":16,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":2,"headings":[{"id":"displaying-suggestions-inline","name":"Displaying suggestions inline"}],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"\n## Displaying suggestions inline\n\nSuggestions can be triggered on a specified character token in an `amp-autocomplete` for multiple autosuggestions in a single input by using the `inline` attribute.\nThe token for triggering the autosuggestion must be the provided value for the `inline` attribute. For example, if `inline=\"+\"`, then when the `+` token is entered by the user,\nany relevant suggestions will be displayed. Otherwise, the field will behave the same as an unenhanced input field. The `inline` attribute does not support the empty string, \nor `\"\"` as a legitimate token value on `amp-autocomplete`.\n\n"},{"doc_":"","code":"\n<h2>Query data sources</h2>\n","preview":"\n  <h2>Query data sources</h2>\n","inBody":true,"id":17,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":0,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":""},{"doc_":"\n## Specifying query parameters\n\nUser inputs can be passed to a statically generated endpoint when the `query` attribute is paired with the `src` attribute.\n\nFor example if a `src=\"https://example.com` and `query=\"q\"`, then a user who types in `abc` will get the fetch JSON result from `https://example.com?q=abc`.\n\n","code":"<form class=\"sample-form\"\n  method=\"post\"\n  action-xhr=\"http://localhost:8080/documentation/examples/api/echo\"\n  target=\"_top\">\n  <amp-autocomplete filter=\"none\"\n    min-characters=\"1\"\n    src=\"http://localhost:8080/samples_templates/products_autosuggest\"\n    query=\"q\">\n    <input type=\"search\"\n      name=\"queryInput\">\n  </amp-autocomplete>\n  <input type=\"submit\"\n    value=\"Search\">\n  <div submit-success>\n    <template type=\"amp-mustache\">\n      Success! Received <strong>{{queryInput}}</strong>.\n    </template>\n  </div>\n</form>","preview":"  <div>\n    <form class=\"sample-form\"\n      method=\"post\"\n      action-xhr=\"http://localhost:8080/documentation/examples/api/echo\"\n      target=\"_top\">\n      <amp-autocomplete filter=\"none\"\n        min-characters=\"1\"\n        src=\"http://localhost:8080/samples_templates/products_autosuggest\"\n        query=\"q\">\n        <input type=\"search\"\n          name=\"queryInput\">\n      </amp-autocomplete>\n      <input type=\"submit\"\n        value=\"Search\">\n      <div submit-success>\n        <template type=\"amp-mustache\">\n          Success! Received <strong>{{queryInput}}</strong>.\n        </template>\n      </div>\n    </form>\n  </div>\n","inBody":true,"id":18,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":2,"headings":[{"id":"specifying-query-parameters","name":"Specifying query parameters"}],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"\n## Specifying query parameters\n\nUser inputs can be passed to a statically generated endpoint when the `query` attribute is paired with the `src` attribute.\n\nFor example if a `src=\"https://example.com` and `query=\"q\"`, then a user who types in `abc` will get the fetch JSON result from `https://example.com?q=abc`.\n\n"},{"doc_":"","code":"</body>\n</html>\n","preview":"","inBody":false,"id":19,"cachedMarkedDoc":false,"isLastSection":true,"isFirstSection":false,"commentOffset":0,"codeOffset":0,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":""}],"head":"<meta charset=\"utf-8\">\n  <link rel=\"canonical\" href=\"http://localhost:8080/documentation/examples/components/amp-autocomplete/index.html\">\n  <meta name=\"viewport\" content=\"width=device-width,minimum-scale=1,initial-scale=1\">\n  <script async src=\"https://cdn.ampproject.org/v0.js\"></script>\n  <title>amp-autocomplete</title>\n  <script async custom-element=\"amp-autocomplete\" src=\"https://cdn.ampproject.org/v0/amp-autocomplete-0.1.js\"></script>\n  <script async custom-element=\"amp-form\" src=\"https://cdn.ampproject.org/v0/amp-form-0.1.js\"></script>\n  <script async custom-element=\"amp-bind\" src=\"https://cdn.ampproject.org/v0/amp-bind-0.1.js\"></script>\n  <script async custom-template=\"amp-mustache\" src=\"https://cdn.ampproject.org/v0/amp-mustache-0.2.js\"></script>\n\n\n  <style amp-boilerplate>body{-webkit-animation:-amp-start 8s steps(1,end) 0s 1 normal both;-moz-animation:-amp-start 8s steps(1,end) 0s 1 normal both;-ms-animation:-amp-start 8s steps(1,end) 0s 1 normal both;animation:-amp-start 8s steps(1,end) 0s 1 normal both}@-webkit-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-moz-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-ms-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-o-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}</style><noscript><style amp-boilerplate>body{-webkit-animation:none;-moz-animation:none;-ms-animation:none;animation:none}</style></noscript>\n","styles":"  :root {\n    --space-1: .5rem;  /* 8px */\n    --space-2: 1rem;   /* 16px */\n    --space-3: 1.5rem; /* 24px */\n    --space-4: 2rem;   /* 32px */\n\n    --color-text-light: #fff;\n    --color-primary: #005AF0;\n    --box-shadow-1: 0 1px 1px 0 rgba(0,0,0,.14), 0 1px 1px -1px rgba(0,0,0,.14), 0 1px 5px 0 rgba(0,0,0,.12);\n  }\n  .input-field {\n    position: relative;\n  }\n  .suggest-data {\n    padding: var(--space-1) 0px;\n  }\n  .custom-population {\n    padding-top: 4px;\n    font: 10pt 'Courier New', Courier, monospace;\n  }\n  .trending {\n    display: inline-block;\n    vertical-align: middle;\n  }\n  .product {\n    align-items: center;\n    line-height: var(--space-4);\n  }\n  .suggest-data button,\n  .sample-form input[type=submit] {\n    -webkit-appearance: none;\n    border: none;\n    background-color: var(--color-primary);\n    color: var(--color-text-light);\n    margin: var(--space-2);\n    font-family: 'Poppins', sans-serif;\n    font-weight: 700;\n    line-height: 1.2em;\n    font-size: 1em;\n    padding: 0.75em 1.75em;\n    text-decoration: none;\n    text-align: center;\n    border-radius: 3px;\n    border: none;\n    box-shadow: var(--box-shadow-1);\n  }\n  .sample-form {\n    padding: var(--space-2);\n  }\n","title":"amp-autocomplete","metadata":{},"body":"<body>","elementsAfterBody":"","isAmpStory":false,"isAmpWeb":true,"isAmpAds":false,"isAmpEmail":false,"firstImage":"/favicons/android-chrome-256x256.png","lang":"en","_description":"An autocomplete-enabled input field suggests completed results corresponding to the user input as they type into the input field."},"route":"/documentation/examples/components/amp-autocomplete/index.html"}