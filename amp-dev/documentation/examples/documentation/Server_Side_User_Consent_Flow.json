{"filePath":"examples/source/user-consent/Server_Side_User_Consent_Flow.html","source":"<!--\n  ## Introduction\n\n  Sometimes is necessary to rely on external servers for consent due to needing to sync user consent between multiple platforms. This sample demonstrates\n  how you can use [`amp-consent`](/content/amp-dev/documentation/components/reference/amp-consent.md) to achieve this. In this sample we'll build a\n  consent dialog that will only show based upon the consent state from external servers.\n--><!-- -->\n<!doctype html>\n<html ⚡>\n<head>\n<meta charset=\"utf-8\">\n  <link rel=\"canonical\" href=\"http://localhost:8080/documentation/examples/user-consent/server_side_user_consent_flow/index.html\">\n  <meta name=\"viewport\" content=\"width=device-width,minimum-scale=1,initial-scale=1\">\n  <script async src=\"https://cdn.ampproject.org/v0.js\"></script>\n  <title>Server Side User Consent Flow</title>\n  <!-- ## Setup -->\n  <!--\n  We need to import the `amp-consent` extension...\n  -->\n  <script async custom-element=\"amp-consent\" src=\"https://cdn.ampproject.org/v0/amp-consent-0.1.js\"></script>\n  <style amp-boilerplate>body{-webkit-animation:-amp-start 8s steps(1,end) 0s 1 normal both;-moz-animation:-amp-start 8s steps(1,end) 0s 1 normal both;-ms-animation:-amp-start 8s steps(1,end) 0s 1 normal both;animation:-amp-start 8s steps(1,end) 0s 1 normal both}@-webkit-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-moz-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-ms-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-o-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}</style><noscript><style amp-boilerplate>body{-webkit-animation:none;-moz-animation:none;-ms-animation:none;animation:none}</style></noscript>\n  <style amp-custom>\n    :root {\n      --space-2: 1rem;   /* 16px */\n      --space-3: 1.5rem; /* 24px */\n    }\n    .consentPopup {\n      padding: var(--space-3);\n      margin: 0 auto;\n      background: #fff;\n      border-radius: 5px;\n      position: relative;\n      max-width: 700px;\n      width: 95%;\n    }\n    .consentPopup > h2, /* overwrite ABE style */\n    .consentPopup > * {\n      margin: 0;\n      margin-bottom: var(--space-2);\n    }\n    .consentPopup > button {\n      margin-right: var(--space-2);\n    }\n    .popupOverlay {\n      height: 100vh;\n      width: 100vw;\n      background: rgba(0, 0, 0, 0.7);\n      padding: 5% 0;\n    }\n    .dismiss-button {\n      position: absolute;\n      right: var(--space-3);\n      top: var(--space-2);\n      cursor: pointer;\n    }\n    #post-consent-ui {\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      padding: var(--space-3);\n    }\n  </style>\n</head>\n<body>\n\n  <!-- ## Defining the consent flow -->\n  <!--\n    We define a basic server-side consent flow, similar to [this sample](/content/amp-dev/documentation/examples/documentation/Client_Side_User_Consent_Flow.html). The flow should only trigger when the server responds that `consentRequired` is `true` and there is no `consentStateValue` or `consentString` for this user.\n\n    When a user lands on the AMP page, `amp-consent` will check localstorage for an existing consent state. \n    If a consent state exists, it will unblock all components. Otherwise, it will wait for the response from `checkConsentHref` (because `consentRequired` is set to 'remote') to determine if consent is required/if there is an existing consent state. If there is an existing consent state, `amp-consent` will use that value and unblock. Otherwise, it will show the `promptUi`.\n\n    A recommended design for sites that can manage their own consent (via external page) is to respond with the following response: \n    ```json\n    {\n      \"consentRequired\": true,\n      \"consentStateValue\": \"accepted\"/\"rejected\"/\"unknown\",\n      \"consentString\": \"example-string\"\n    }\n    ```\n    Tip: Use [`expireCache: true`](/content/amp-dev/documentation/components/reference/amp-consent.md#expireCache), in your response to clear localStorage consent decision if you need to update it for syncing purposes. Additonally, [`onUpdateHref`](/content/amp-dev/documentation/components/reference/amp-consent.md#onupdatehref) can be used when users are managing their consent directly on the page.\n\n  -->\n  <amp-consent id=\"myUserConsent\" layout=\"nodisplay\">\n    <script type=\"application/json\">{\n      \"consentInstanceId\": \"server-side-consent\",\n      \"consentRequired\": \"remote\",\n      \"checkConsentHref\": \"/documentation/examples/api/get-consent-sever-side\",\n    }</script>\n    <div id=\"myConsentFlow\" class=\"popupOverlay\">\n      <div class=\"consentPopup\">\n        <div class=\"dismiss-button\" role=\"button\" tabindex=\"0\" on=\"tap:myUserConsent.dismiss\">X</div>\n        <h2>Headline</h2>\n        <p>This is an important message requiring you to make a choice if you're based if the server says you have not made a consent decision.</p>\n        <button on=\"tap:myUserConsent.accept\">Accept</button>\n        <button on=\"tap:myUserConsent.reject\">Reject</button>\n      </div>\n    </div>\n    <div id=\"post-consent-ui\">\n      <button on=\"tap:myUserConsent.prompt()\">Update Consent</button>\n    </div>\n  </amp-consent>\n</body></html>","document":{"sections":[{"doc_":"\n## Introduction\n\nSometimes is necessary to rely on external servers for consent due to needing to sync user consent between multiple platforms. This sample demonstrates\nhow you can use [`amp-consent`](/content/amp-dev/documentation/components/reference/amp-consent.md) to achieve this. In this sample we'll build a\nconsent dialog that will only show based upon the consent state from external servers.\n\n","code":"","preview":"","inBody":false,"id":0,"cachedMarkedDoc":"<h2 id=\"introduction\" class=\"www-heading pb4 mb2 relative h3\">Introduction</h2><p class=\"mb2 px1\">Sometimes is necessary to rely on external servers for consent due to needing to sync user consent between multiple platforms. This sample demonstrates\nhow you can use <a href=\"/content/amp-dev/documentation/components/reference/amp-consent.md\"><code>amp-consent</code></a> to achieve this. In this sample we&#39;ll build a\nconsent dialog that will only show based upon the consent state from external servers.</p>","isLastSection":false,"isFirstSection":true,"commentOffset":0,"codeOffset":0,"headings":[{"id":"introduction","name":"Introduction"}],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"\n## Introduction\n\nSometimes is necessary to rely on external servers for consent due to needing to sync user consent between multiple platforms. This sample demonstrates\nhow you can use [`amp-consent`](/content/amp-dev/documentation/components/reference/amp-consent.md) to achieve this. In this sample we'll build a\nconsent dialog that will only show based upon the consent state from external servers.\n\n"},{"doc_":"\n","code":"<!doctype html>\n<html ⚡>\n<head>\n<meta charset=\"utf-8\">\n  <link rel=\"canonical\" href=\"http://localhost:8080/documentation/examples/user-consent/server_side_user_consent_flow/index.html\">\n  <meta name=\"viewport\" content=\"width=device-width,minimum-scale=1,initial-scale=1\">\n  <script async src=\"https://cdn.ampproject.org/v0.js\"></script>\n  <title>Server Side User Consent Flow</title>\n","preview":"","inBody":false,"id":1,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":0,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":" \n"},{"doc_":"## Setup\n","code":"","preview":"","inBody":false,"id":2,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":0,"headings":[{"id":"setup","name":"Setup"}],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"## Setup\n"},{"doc_":"\nWe need to import the `amp-consent` extension...\n\n","code":"<script async custom-element=\"amp-consent\" src=\"https://cdn.ampproject.org/v0/amp-consent-0.1.js\"></script>\n","preview":"","inBody":false,"id":3,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":2,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"\nWe need to import the `amp-consent` extension...\n\n"},{"doc_":"","code":"<style amp-boilerplate>body{-webkit-animation:-amp-start 8s steps(1,end) 0s 1 normal both;-moz-animation:-amp-start 8s steps(1,end) 0s 1 normal both;-ms-animation:-amp-start 8s steps(1,end) 0s 1 normal both;animation:-amp-start 8s steps(1,end) 0s 1 normal both}@-webkit-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-moz-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-ms-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-o-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}</style><noscript><style amp-boilerplate>body{-webkit-animation:none;-moz-animation:none;-ms-animation:none;animation:none}</style></noscript>\n<style amp-custom>\n  :root {\n    --space-2: 1rem;   /* 16px */\n    --space-3: 1.5rem; /* 24px */\n  }\n  .consentPopup {\n    padding: var(--space-3);\n    margin: 0 auto;\n    background: #fff;\n    border-radius: 5px;\n    position: relative;\n    max-width: 700px;\n    width: 95%;\n  }\n  .consentPopup > h2, /* overwrite ABE style */\n  .consentPopup > * {\n    margin: 0;\n    margin-bottom: var(--space-2);\n  }\n  .consentPopup > button {\n    margin-right: var(--space-2);\n  }\n  .popupOverlay {\n    height: 100vh;\n    width: 100vw;\n    background: rgba(0, 0, 0, 0.7);\n    padding: 5% 0;\n  }\n  .dismiss-button {\n    position: absolute;\n    right: var(--space-3);\n    top: var(--space-2);\n    cursor: pointer;\n  }\n  #post-consent-ui {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    padding: var(--space-3);\n  }\n</style>\n</head>\n<body>\n\n","preview":"\n","inBody":false,"id":4,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":2,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":""},{"doc_":"## Defining the consent flow\n","code":"","preview":"","inBody":true,"id":5,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":0,"headings":[{"id":"defining-the-consent-flow","name":"Defining the consent flow"}],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"## Defining the consent flow\n"},{"doc_":"\nWe define a basic server-side consent flow, similar to [this sample](/content/amp-dev/documentation/examples/documentation/Client_Side_User_Consent_Flow.html). The flow should only trigger when the server responds that `consentRequired` is `true` and there is no `consentStateValue` or `consentString` for this user.\n\nWhen a user lands on the AMP page, `amp-consent` will check localstorage for an existing consent state. \nIf a consent state exists, it will unblock all components. Otherwise, it will wait for the response from `checkConsentHref` (because `consentRequired` is set to 'remote') to determine if consent is required/if there is an existing consent state. If there is an existing consent state, `amp-consent` will use that value and unblock. Otherwise, it will show the `promptUi`.\n\nA recommended design for sites that can manage their own consent (via external page) is to respond with the following response: \n[sourcecode:json]\n{\n  \"consentRequired\": true,\n  \"consentStateValue\": \"accepted\"/\"rejected\"/\"unknown\",\n  \"consentString\": \"example-string\"\n}\n[/sourcecode]\nTip: Use [`expireCache: true`](/content/amp-dev/documentation/components/reference/amp-consent.md#expireCache), in your response to clear localStorage consent decision if you need to update it for syncing purposes. Additonally, [`onUpdateHref`](/content/amp-dev/documentation/components/reference/amp-consent.md#onupdatehref) can be used when users are managing their consent directly on the page.\n\n","code":"<amp-consent id=\"myUserConsent\"\n  layout=\"nodisplay\">\n  <script type=\"application/json\">\n    {\n      \"consentInstanceId\": \"server-side-consent\",\n      \"consentRequired\": \"remote\",\n      \"checkConsentHref\": \"/documentation/examples/api/get-consent-sever-side\",\n    }\n  </script>\n  <div id=\"myConsentFlow\"\n    class=\"popupOverlay\">\n    <div class=\"consentPopup\">\n      <div class=\"dismiss-button\"\n        role=\"button\"\n        tabindex=\"0\"\n        on=\"tap:myUserConsent.dismiss\">X</div>\n      <h2>Headline</h2>\n      <p>This is an important message requiring you to make a choice if you're based if the server says you have not made a consent decision.</p>\n      <button on=\"tap:myUserConsent.accept\">Accept</button>\n      <button on=\"tap:myUserConsent.reject\">Reject</button>\n    </div>\n  </div>\n  <div id=\"post-consent-ui\">\n    <button on=\"tap:myUserConsent.prompt()\">Update Consent</button>\n  </div>\n</amp-consent>\n","preview":"  <amp-consent id=\"myUserConsent\"\n    layout=\"nodisplay\">\n    <script type=\"application/json\">\n      {\n        \"consentInstanceId\": \"server-side-consent\",\n        \"consentRequired\": \"remote\",\n        \"checkConsentHref\": \"/documentation/examples/api/get-consent-sever-side\",\n      }\n    </script>\n    <div id=\"myConsentFlow\"\n      class=\"popupOverlay\">\n      <div class=\"consentPopup\">\n        <div class=\"dismiss-button\"\n          role=\"button\"\n          tabindex=\"0\"\n          on=\"tap:myUserConsent.dismiss\">X</div>\n        <h2>Headline</h2>\n        <p>This is an important message requiring you to make a choice if you're based if the server says you have not made a consent decision.</p>\n        <button on=\"tap:myUserConsent.accept\">Accept</button>\n        <button on=\"tap:myUserConsent.reject\">Reject</button>\n      </div>\n    </div>\n    <div id=\"post-consent-ui\">\n      <button on=\"tap:myUserConsent.prompt()\">Update Consent</button>\n    </div>\n  </amp-consent>\n","inBody":true,"id":6,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":2,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"\nWe define a basic server-side consent flow, similar to [this sample](/content/amp-dev/documentation/examples/documentation/Client_Side_User_Consent_Flow.html). The flow should only trigger when the server responds that `consentRequired` is `true` and there is no `consentStateValue` or `consentString` for this user.\n\nWhen a user lands on the AMP page, `amp-consent` will check localstorage for an existing consent state. \nIf a consent state exists, it will unblock all components. Otherwise, it will wait for the response from `checkConsentHref` (because `consentRequired` is set to 'remote') to determine if consent is required/if there is an existing consent state. If there is an existing consent state, `amp-consent` will use that value and unblock. Otherwise, it will show the `promptUi`.\n\nA recommended design for sites that can manage their own consent (via external page) is to respond with the following response: \n```json\n{\n  \"consentRequired\": true,\n  \"consentStateValue\": \"accepted\"/\"rejected\"/\"unknown\",\n  \"consentString\": \"example-string\"\n}\n```\nTip: Use [`expireCache: true`](/content/amp-dev/documentation/components/reference/amp-consent.md#expireCache), in your response to clear localStorage consent decision if you need to update it for syncing purposes. Additonally, [`onUpdateHref`](/content/amp-dev/documentation/components/reference/amp-consent.md#onupdatehref) can be used when users are managing their consent directly on the page.\n\n\n"},{"doc_":"","code":"</body>\n</html>\n","preview":"","inBody":false,"id":7,"cachedMarkedDoc":false,"isLastSection":true,"isFirstSection":false,"commentOffset":0,"codeOffset":0,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":""}],"head":"<meta charset=\"utf-8\">\n  <link rel=\"canonical\" href=\"http://localhost:8080/documentation/examples/user-consent/server_side_user_consent_flow/index.html\">\n  <meta name=\"viewport\" content=\"width=device-width,minimum-scale=1,initial-scale=1\">\n  <script async src=\"https://cdn.ampproject.org/v0.js\"></script>\n  <title>Server Side User Consent Flow</title>\n  <script async custom-element=\"amp-consent\" src=\"https://cdn.ampproject.org/v0/amp-consent-0.1.js\"></script>\n  <style amp-boilerplate>body{-webkit-animation:-amp-start 8s steps(1,end) 0s 1 normal both;-moz-animation:-amp-start 8s steps(1,end) 0s 1 normal both;-ms-animation:-amp-start 8s steps(1,end) 0s 1 normal both;animation:-amp-start 8s steps(1,end) 0s 1 normal both}@-webkit-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-moz-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-ms-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-o-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}</style><noscript><style amp-boilerplate>body{-webkit-animation:none;-moz-animation:none;-ms-animation:none;animation:none}</style></noscript>\n","styles":"    :root {\n      --space-2: 1rem;   /* 16px */\n      --space-3: 1.5rem; /* 24px */\n    }\n    .consentPopup {\n      padding: var(--space-3);\n      margin: 0 auto;\n      background: #fff;\n      border-radius: 5px;\n      position: relative;\n      max-width: 700px;\n      width: 95%;\n    }\n    .consentPopup > h2, /* overwrite ABE style */\n    .consentPopup > * {\n      margin: 0;\n      margin-bottom: var(--space-2);\n    }\n    .consentPopup > button {\n      margin-right: var(--space-2);\n    }\n    .popupOverlay {\n      height: 100vh;\n      width: 100vw;\n      background: rgba(0, 0, 0, 0.7);\n      padding: 5% 0;\n    }\n    .dismiss-button {\n      position: absolute;\n      right: var(--space-3);\n      top: var(--space-2);\n      cursor: pointer;\n    }\n    #post-consent-ui {\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      padding: var(--space-3);\n    }\n","title":"Server Side User Consent Flow","metadata":{"teaserImage":"/static/samples/img/teaser/geolocation-based_consent_flow.jpg","author":"micajuine-ho, sebastianbenz"},"body":"<body>","elementsAfterBody":"","isAmpStory":false,"isAmpWeb":true,"isAmpAds":false,"isAmpEmail":false,"firstImage":"/favicons/android-chrome-256x256.png","lang":"en","_description":"Sometimes is necessary to rely on external servers for consent due to needing to sync user consent between multiple platforms."},"route":"/documentation/examples/user-consent/server_side_user_consent_flow/index.html"}