{"filePath":"examples/source/style-layout/How_to_support_Images_with_unknown_Dimensions.html","source":"<!doctype html>\n<html amp lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n    <title>How to support Images with unknown Dimensions</title>\n    <script async src=\"https://cdn.ampproject.org/v0.js\"></script>\n    <script async custom-element=\"amp-carousel\" src=\"https://cdn.ampproject.org/v0/amp-carousel-0.1.js\"></script>\n    <link rel=\"canonical\" href=\"http://localhost:8080/documentation/examples/style-layout/how_to_support_images_with_unknown_dimensions/index.html\">\n    <meta name=\"viewport\" content=\"width=device-width,minimum-scale=1,initial-scale=1\">\n    <style amp-boilerplate>body{-webkit-animation:-amp-start 8s steps(1,end) 0s 1 normal both;-moz-animation:-amp-start 8s steps(1,end) 0s 1 normal both;-ms-animation:-amp-start 8s steps(1,end) 0s 1 normal both;animation:-amp-start 8s steps(1,end) 0s 1 normal both}@-webkit-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-moz-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-ms-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-o-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}</style><noscript><style amp-boilerplate>body{-webkit-animation:none;-moz-animation:none;-ms-animation:none;animation:none}</style></noscript>\n      <style amp-custom>\n        :root {\n          --color-primary: #005AF0;\n          --color-bg-light: #FAFAFC;\n          --space-1: .5rem;  /* 8px */\n        }\n        .fixed-container, .fixed-height-container img {\n          background-color: var(--color-primary);\n        }\n        .contain img {\n          object-fit: contain;\n        }\n        .cover img {\n          object-fit: cover;\n        }\n       .fixed-container {\n         position: relative;\n         width: 200px;\n         height: 200px;\n         margin: var(--space-1);\n       }\n       .fixed-height-container {\n         position: relative;\n         width: 100%;\n         height: 300px;\n         margin: var(--space-1);\n       }\n      </style>\n  </head>\n  <body>\n  <!--\n    ## Introduction\n\n    This sample demonstrates how it is possible to embed images with unknown dimensions into an AMP page while maintaining the correct aspect ratio.\n\n    ## Background\n\n    To avoid page jumps while loading an AMP page, the AMP runtime's static layout system requires that the height of all elements is known in advance. This is why the `amp-img` extension requires the `width` and `height` of an image to be specified:\n  -->\n  <amp-img width=\"300\" height=\"200\" src=\"https://unsplash.it/300/200?image=1074\"></amp-img>\n  <!--\n  The `amp-img` extension supports different [layouts](documentation/guides-and-tutorials/develop/style_and_layout/control_layout). The `responsive` layout requires width and height to be able to determine an image's aspect ratio.\n  -->\n  <amp-img layout=\"responsive\" width=\"300\" height=\"200\" src=\"https://unsplash.it/300/200?image=1074\"></amp-img>\n\n  <!--\n  The `fixed-height` layout only requires a height, but stretches the image to fill the available width:\n  -->\n  <amp-img layout=\"fixed-height\" height=\"200\" src=\"https://unsplash.it/300/200?image=1074\"></amp-img>\n\n  <!--\n  The `fill` layout is the only layout supported by `amp-img` that doesn't require any image dimensions. However, images will be stretched in both dimensions to fill the container:\n  -->\n  <div>\n    <div class=\"fixed-container\">\n  <amp-img layout=\"fill\" src=\"https://unsplash.it/300/200?image=1074\"></amp-img>\n    </div>\n    <div class=\"fixed-container\">\n  <amp-img layout=\"fill\" src=\"https://unsplash.it/200/300?image=1074\"></amp-img>\n    </div>\n </div>\n\n <!-- The question is: how can images with unknown dimensions be embeded inside an AMP pages while maintaining their correct aspect ratio?\n\n    ## Object-Fit to the rescue\n\n    We can solve this problem by combining AMP's [fill layout](https://github.com/ampproject/amphtml/blob/master/spec/amp-html-layout.md) with the [object-fit]( https://css-tricks.com/almanac/properties/o/object-fit/) CSS property. The `object-fit` property helps us ensure that the image maintains its aspect ratio while being resized via the `fill` layout.\n\n    First we need to define a container to constrain the maximum size of the image, e.g.:\n\n    ```css\n   .fixed-container {\n     position: relative;\n     width: 200px;\n     height: 200px;\n   }\n    ```\n\n    Then we can use the `object-fit` property to define how the `img` inside the `amp-img` extension will resize to maintain its aspect ratio:\n\n    ```css\n    amp-img.contain img {\n      object-fit: contain;\n    }\n    ```\n\n    `object-fit: contain` increases or decreases the size of the image to fill the container whilst preserving the image's aspect-ratio. -->\n    <div>\n      <div class=\"fixed-container\">\n        <amp-img class=\"contain\" layout=\"fill\" src=\"https://unsplash.it/400/300\"></amp-img>\n      </div>\n      <div class=\"fixed-container\">\n        <amp-img class=\"contain\" layout=\"fill\" src=\"https://unsplash.it/300/300\"></amp-img>\n      </div>\n      <div class=\"fixed-container\">\n        <amp-img class=\"contain\" layout=\"fill\" src=\"https://unsplash.it/200/300\"></amp-img>\n      </div>\n    </div>\n    <!--\n    With `object-fit: cover` the image will fill the height and width of its container, but maintains the aspect ratio by cropping the image: -->\n    <div>\n      <div class=\"fixed-container\">\n        <amp-img class=\"cover\" layout=\"fill\" src=\"https://unsplash.it/400/300\"></amp-img>\n      </div>\n      <div class=\"fixed-container\">\n        <amp-img class=\"cover\" layout=\"fill\" src=\"https://unsplash.it/300/300\"></amp-img>\n      </div>\n      <div class=\"fixed-container\">\n        <amp-img class=\"cover\" layout=\"fill\" src=\"https://unsplash.it/200/300\"></amp-img>\n      </div>\n    </div>\n\n    <!--\n    ## Fixed-height layout with correct aspect ratios\n\n    This approach works also with responsive container dimensions, for example, a dynamic width:\n\n     ```css\n     .fixed-height-container {\n       position: relative;\n       width: 100%;\n       height: 300px;\n     }\n     ```\n\n     The result is a fixed-height layout that maintains the correct image aspect ratio:\n    -->\n    <div>\n      <div class=\"fixed-height-container\">\n        <amp-img class=\"contain\" layout=\"fill\" src=\"https://unsplash.it/400/300\"></amp-img>\n      </div>\n      <div class=\"fixed-height-container\">\n        <amp-img class=\"contain\" layout=\"fill\" src=\"https://unsplash.it/300/300\"></amp-img>\n      </div>\n      <div class=\"fixed-height-container\">\n        <amp-img class=\"contain\" layout=\"fill\" src=\"https://unsplash.it/200/300\"></amp-img>\n      </div>\n      <div class=\"fixed-height-container\">\n        <amp-img class=\"contain\" layout=\"fill\" src=\"https://unsplash.it/1920/480\"></amp-img>\n      </div>\n    </div>\n\n    <!--\n    ## Image carousels\n\n    This approach also works very well for image carousels by combining it with an `amp-carousel` using a `fixed-height` layout.\n    -->\n    <amp-carousel height=\"300\" layout=\"fixed-height\" type=\"slides\">\n      <div class=\"fixed-height-container\">\n        <amp-img class=\"contain\" layout=\"fill\" src=\"https://unsplash.it/500/400\"></amp-img>\n      </div>\n      <div class=\"fixed-height-container\">\n        <amp-img class=\"contain\" layout=\"fill\" src=\"https://unsplash.it/500/500\"></amp-img>\n      </div>\n      <div class=\"fixed-height-container\">\n        <amp-img class=\"contain\" layout=\"fill\" src=\"https://unsplash.it/300/500\"></amp-img>\n      </div>\n    </amp-carousel>\n</body></html>","document":{"sections":[{"doc_":"","code":"<!doctype html>\n<html amp\n  lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n    <title>How to support Images with unknown Dimensions</title>\n    <script async src=\"https://cdn.ampproject.org/v0.js\"></script>\n    <script async custom-element=\"amp-carousel\" src=\"https://cdn.ampproject.org/v0/amp-carousel-0.1.js\"></script>\n    <link rel=\"canonical\" href=\"http://localhost:8080/documentation/examples/style-layout/how_to_support_images_with_unknown_dimensions/index.html\">\n    <meta name=\"viewport\" content=\"width=device-width,minimum-scale=1,initial-scale=1\">\n    <style amp-boilerplate>body{-webkit-animation:-amp-start 8s steps(1,end) 0s 1 normal both;-moz-animation:-amp-start 8s steps(1,end) 0s 1 normal both;-ms-animation:-amp-start 8s steps(1,end) 0s 1 normal both;animation:-amp-start 8s steps(1,end) 0s 1 normal both}@-webkit-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-moz-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-ms-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-o-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}</style><noscript><style amp-boilerplate>body{-webkit-animation:none;-moz-animation:none;-ms-animation:none;animation:none}</style></noscript>\n      <style amp-custom>\n        :root {\n          --color-primary: #005AF0;\n          --color-bg-light: #FAFAFC;\n          --space-1: .5rem;  /* 8px */\n        }\n        .fixed-container, .fixed-height-container img {\n          background-color: var(--color-primary);\n        }\n        .contain img {\n          object-fit: contain;\n        }\n        .cover img {\n          object-fit: cover;\n        }\n       .fixed-container {\n         position: relative;\n         width: 200px;\n         height: 200px;\n         margin: var(--space-1);\n       }\n       .fixed-height-container {\n         position: relative;\n         width: 100%;\n         height: 300px;\n         margin: var(--space-1);\n       }\n      </style>\n  </head>\n<body>\n","preview":"","inBody":false,"id":0,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":true,"commentOffset":0,"codeOffset":0,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":""},{"doc_":"\n## Introduction\n\nThis sample demonstrates how it is possible to embed images with unknown dimensions into an AMP page while maintaining the correct aspect ratio.\n\n## Background\n\nTo avoid page jumps while loading an AMP page, the AMP runtime's static layout system requires that the height of all elements is known in advance. This is why the `amp-img` extension requires the `width` and `height` of an image to be specified:\n\n","code":"<amp-img width=\"300\"\n  height=\"200\"\n  src=\"https://unsplash.it/300/200?image=1074\"></amp-img>\n","preview":"  <amp-img width=\"300\"\n    height=\"200\"\n    src=\"https://unsplash.it/300/200?image=1074\"></amp-img>\n","inBody":true,"id":1,"cachedMarkedDoc":"<h2 id=\"introduction\" class=\"www-heading pb4 mb2 relative h3\">Introduction</h2><p class=\"mb2 px1\">This sample demonstrates how it is possible to embed images with unknown dimensions into an AMP page while maintaining the correct aspect ratio.</p><h2 id=\"background\" class=\"www-heading pb4 mb2 relative h3\">Background</h2><p class=\"mb2 px1\">To avoid page jumps while loading an AMP page, the AMP runtime&#39;s static layout system requires that the height of all elements is known in advance. This is why the <code>amp-img</code> extension requires the <code>width</code> and <code>height</code> of an image to be specified:</p>","isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":2,"headings":[{"id":"introduction","name":"Introduction"},{"id":"background","name":"Background"}],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"\n## Introduction\n\nThis sample demonstrates how it is possible to embed images with unknown dimensions into an AMP page while maintaining the correct aspect ratio.\n\n## Background\n\nTo avoid page jumps while loading an AMP page, the AMP runtime's static layout system requires that the height of all elements is known in advance. This is why the `amp-img` extension requires the `width` and `height` of an image to be specified:\n\n"},{"doc_":"\nThe `amp-img` extension supports different [layouts](documentation/guides-and-tutorials/develop/style_and_layout/control_layout). The `responsive` layout requires width and height to be able to determine an image's aspect ratio.\n\n","code":"<amp-img layout=\"responsive\"\n  width=\"300\"\n  height=\"200\"\n  src=\"https://unsplash.it/300/200?image=1074\"></amp-img>\n","preview":"  <amp-img layout=\"responsive\"\n    width=\"300\"\n    height=\"200\"\n    src=\"https://unsplash.it/300/200?image=1074\"></amp-img>\n","inBody":true,"id":2,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":2,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"\nThe `amp-img` extension supports different [layouts](documentation/guides-and-tutorials/develop/style_and_layout/control_layout). The `responsive` layout requires width and height to be able to determine an image's aspect ratio.\n\n"},{"doc_":"","code":"\n","preview":"\n","inBody":true,"id":3,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":0,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":""},{"doc_":"\nThe `fixed-height` layout only requires a height, but stretches the image to fill the available width:\n\n","code":"<amp-img layout=\"fixed-height\"\n  height=\"200\"\n  src=\"https://unsplash.it/300/200?image=1074\"></amp-img>\n","preview":"  <amp-img layout=\"fixed-height\"\n    height=\"200\"\n    src=\"https://unsplash.it/300/200?image=1074\"></amp-img>\n","inBody":true,"id":4,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":2,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"\nThe `fixed-height` layout only requires a height, but stretches the image to fill the available width:\n\n"},{"doc_":"","code":"\n","preview":"\n","inBody":true,"id":5,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":0,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":""},{"doc_":"\nThe `fill` layout is the only layout supported by `amp-img` that doesn't require any image dimensions. However, images will be stretched in both dimensions to fill the container:\n\n","code":"<div class=\"fixed-container\">\n  <amp-img layout=\"fill\"\n    src=\"https://unsplash.it/300/200?image=1074\"></amp-img>\n</div>\n<div class=\"fixed-container\">\n  <amp-img layout=\"fill\"\n    src=\"https://unsplash.it/200/300?image=1074\"></amp-img>\n</div>","preview":"  <div>\n    <div class=\"fixed-container\">\n      <amp-img layout=\"fill\"\n        src=\"https://unsplash.it/300/200?image=1074\"></amp-img>\n    </div>\n    <div class=\"fixed-container\">\n      <amp-img layout=\"fill\"\n        src=\"https://unsplash.it/200/300?image=1074\"></amp-img>\n    </div>\n  </div>\n","inBody":true,"id":6,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":2,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"\nThe `fill` layout is the only layout supported by `amp-img` that doesn't require any image dimensions. However, images will be stretched in both dimensions to fill the container:\n\n"},{"doc_":"","code":"\n","preview":"\n","inBody":true,"id":7,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":0,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":""},{"doc_":"The question is: how can images with unknown dimensions be embeded inside an AMP pages while maintaining their correct aspect ratio?\n\n## Object-Fit to the rescue\n\nWe can solve this problem by combining AMP's [fill layout](https://github.com/ampproject/amphtml/blob/master/spec/amp-html-layout.md) with the [object-fit]( https://css-tricks.com/almanac/properties/o/object-fit/) CSS property. The `object-fit` property helps us ensure that the image maintains its aspect ratio while being resized via the `fill` layout.\n\nFirst we need to define a container to constrain the maximum size of the image, e.g.:\n\n[sourcecode:css]\n.fixed-container {\n  position: relative;\n  width: 200px;\n  height: 200px;\n}\n [/sourcecode]\n\nThen we can use the `object-fit` property to define how the `img` inside the `amp-img` extension will resize to maintain its aspect ratio:\n\n[sourcecode:css]\n amp-img.contain img {\n   object-fit: contain;\n }\n [/sourcecode]\n\n`object-fit: contain` increases or decreases the size of the image to fill the container whilst preserving the image's aspect-ratio. \n","code":"<div class=\"fixed-container\">\n  <amp-img class=\"contain\"\n    layout=\"fill\"\n    src=\"https://unsplash.it/400/300\"></amp-img>\n</div>\n<div class=\"fixed-container\">\n  <amp-img class=\"contain\"\n    layout=\"fill\"\n    src=\"https://unsplash.it/300/300\"></amp-img>\n</div>\n<div class=\"fixed-container\">\n  <amp-img class=\"contain\"\n    layout=\"fill\"\n    src=\"https://unsplash.it/200/300\"></amp-img>\n</div>","preview":"  <div>\n    <div class=\"fixed-container\">\n      <amp-img class=\"contain\"\n        layout=\"fill\"\n        src=\"https://unsplash.it/400/300\"></amp-img>\n    </div>\n    <div class=\"fixed-container\">\n      <amp-img class=\"contain\"\n        layout=\"fill\"\n        src=\"https://unsplash.it/300/300\"></amp-img>\n    </div>\n    <div class=\"fixed-container\">\n      <amp-img class=\"contain\"\n        layout=\"fill\"\n        src=\"https://unsplash.it/200/300\"></amp-img>\n    </div>\n  </div>\n","inBody":true,"id":8,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":2,"headings":[{"id":"object-fit-to-the-rescue","name":"Object-Fit to the rescue"}],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"The question is: how can images with unknown dimensions be embeded inside an AMP pages while maintaining their correct aspect ratio?\n\n## Object-Fit to the rescue\n\n We can solve this problem by combining AMP's [fill layout](https://github.com/ampproject/amphtml/blob/master/spec/amp-html-layout.md) with the [object-fit]( https://css-tricks.com/almanac/properties/o/object-fit/) CSS property. The `object-fit` property helps us ensure that the image maintains its aspect ratio while being resized via the `fill` layout.\n\n First we need to define a container to constrain the maximum size of the image, e.g.:\n\n ```css\n.fixed-container {\n  position: relative;\n  width: 200px;\n  height: 200px;\n}\n ```\n\n Then we can use the `object-fit` property to define how the `img` inside the `amp-img` extension will resize to maintain its aspect ratio:\n\n ```css\n amp-img.contain img {\n   object-fit: contain;\n }\n ```\n\n `object-fit: contain` increases or decreases the size of the image to fill the container whilst preserving the image's aspect-ratio. \n"},{"doc_":"\nWith `object-fit: cover` the image will fill the height and width of its container, but maintains the aspect ratio by cropping the image: \n","code":"<div class=\"fixed-container\">\n  <amp-img class=\"cover\"\n    layout=\"fill\"\n    src=\"https://unsplash.it/400/300\"></amp-img>\n</div>\n<div class=\"fixed-container\">\n  <amp-img class=\"cover\"\n    layout=\"fill\"\n    src=\"https://unsplash.it/300/300\"></amp-img>\n</div>\n<div class=\"fixed-container\">\n  <amp-img class=\"cover\"\n    layout=\"fill\"\n    src=\"https://unsplash.it/200/300\"></amp-img>\n</div>","preview":"  <div>\n    <div class=\"fixed-container\">\n      <amp-img class=\"cover\"\n        layout=\"fill\"\n        src=\"https://unsplash.it/400/300\"></amp-img>\n    </div>\n    <div class=\"fixed-container\">\n      <amp-img class=\"cover\"\n        layout=\"fill\"\n        src=\"https://unsplash.it/300/300\"></amp-img>\n    </div>\n    <div class=\"fixed-container\">\n      <amp-img class=\"cover\"\n        layout=\"fill\"\n        src=\"https://unsplash.it/200/300\"></amp-img>\n    </div>\n  </div>\n","inBody":true,"id":9,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":2,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"\nWith `object-fit: cover` the image will fill the height and width of its container, but maintains the aspect ratio by cropping the image: \n"},{"doc_":"","code":"\n","preview":"\n","inBody":true,"id":10,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":0,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":""},{"doc_":"\n## Fixed-height layout with correct aspect ratios\n\nThis approach works also with responsive container dimensions, for example, a dynamic width:\n\n[sourcecode:css]\n .fixed-height-container {\n   position: relative;\n   width: 100%;\n   height: 300px;\n }\n [/sourcecode]\n\nThe result is a fixed-height layout that maintains the correct image aspect ratio:\n\n","code":"<div class=\"fixed-height-container\">\n  <amp-img class=\"contain\"\n    layout=\"fill\"\n    src=\"https://unsplash.it/400/300\"></amp-img>\n</div>\n<div class=\"fixed-height-container\">\n  <amp-img class=\"contain\"\n    layout=\"fill\"\n    src=\"https://unsplash.it/300/300\"></amp-img>\n</div>\n<div class=\"fixed-height-container\">\n  <amp-img class=\"contain\"\n    layout=\"fill\"\n    src=\"https://unsplash.it/200/300\"></amp-img>\n</div>\n<div class=\"fixed-height-container\">\n  <amp-img class=\"contain\"\n    layout=\"fill\"\n    src=\"https://unsplash.it/1920/480\"></amp-img>\n</div>","preview":"  <div>\n    <div class=\"fixed-height-container\">\n      <amp-img class=\"contain\"\n        layout=\"fill\"\n        src=\"https://unsplash.it/400/300\"></amp-img>\n    </div>\n    <div class=\"fixed-height-container\">\n      <amp-img class=\"contain\"\n        layout=\"fill\"\n        src=\"https://unsplash.it/300/300\"></amp-img>\n    </div>\n    <div class=\"fixed-height-container\">\n      <amp-img class=\"contain\"\n        layout=\"fill\"\n        src=\"https://unsplash.it/200/300\"></amp-img>\n    </div>\n    <div class=\"fixed-height-container\">\n      <amp-img class=\"contain\"\n        layout=\"fill\"\n        src=\"https://unsplash.it/1920/480\"></amp-img>\n    </div>\n  </div>\n","inBody":true,"id":11,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":2,"headings":[{"id":"fixed-height-layout-with-correct-aspect-ratios","name":"Fixed-height layout with correct aspect ratios"}],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"\n## Fixed-height layout with correct aspect ratios\n\nThis approach works also with responsive container dimensions, for example, a dynamic width:\n\n ```css\n .fixed-height-container {\n   position: relative;\n   width: 100%;\n   height: 300px;\n }\n ```\n\n The result is a fixed-height layout that maintains the correct image aspect ratio:\n\n"},{"doc_":"","code":"\n","preview":"\n","inBody":true,"id":12,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":0,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":""},{"doc_":"\n## Image carousels\n\nThis approach also works very well for image carousels by combining it with an `amp-carousel` using a `fixed-height` layout.\n\n","code":"<amp-carousel height=\"300\"\n  layout=\"fixed-height\"\n  type=\"slides\">\n  <div class=\"fixed-height-container\">\n    <amp-img class=\"contain\"\n      layout=\"fill\"\n      src=\"https://unsplash.it/500/400\"></amp-img>\n  </div>\n  <div class=\"fixed-height-container\">\n    <amp-img class=\"contain\"\n      layout=\"fill\"\n      src=\"https://unsplash.it/500/500\"></amp-img>\n  </div>\n  <div class=\"fixed-height-container\">\n    <amp-img class=\"contain\"\n      layout=\"fill\"\n      src=\"https://unsplash.it/300/500\"></amp-img>\n  </div>\n</amp-carousel>\n","preview":"  <amp-carousel height=\"300\"\n    layout=\"fixed-height\"\n    type=\"slides\">\n    <div class=\"fixed-height-container\">\n      <amp-img class=\"contain\"\n        layout=\"fill\"\n        src=\"https://unsplash.it/500/400\"></amp-img>\n    </div>\n    <div class=\"fixed-height-container\">\n      <amp-img class=\"contain\"\n        layout=\"fill\"\n        src=\"https://unsplash.it/500/500\"></amp-img>\n    </div>\n    <div class=\"fixed-height-container\">\n      <amp-img class=\"contain\"\n        layout=\"fill\"\n        src=\"https://unsplash.it/300/500\"></amp-img>\n    </div>\n  </amp-carousel>\n","inBody":true,"id":13,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":2,"headings":[{"id":"image-carousels","name":"Image carousels"}],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"\n## Image carousels\n\nThis approach also works very well for image carousels by combining it with an `amp-carousel` using a `fixed-height` layout.\n\n"},{"doc_":"","code":"</body>\n</html>\n","preview":"","inBody":false,"id":14,"cachedMarkedDoc":false,"isLastSection":true,"isFirstSection":false,"commentOffset":0,"codeOffset":0,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":""}],"head":"<meta charset=\"utf-8\">\n    <title>How to support Images with unknown Dimensions</title>\n    <script async src=\"https://cdn.ampproject.org/v0.js\"></script>\n    <script async custom-element=\"amp-carousel\" src=\"https://cdn.ampproject.org/v0/amp-carousel-0.1.js\"></script>\n    <link rel=\"canonical\" href=\"http://localhost:8080/documentation/examples/style-layout/how_to_support_images_with_unknown_dimensions/index.html\">\n    <meta name=\"viewport\" content=\"width=device-width,minimum-scale=1,initial-scale=1\">\n    <style amp-boilerplate>body{-webkit-animation:-amp-start 8s steps(1,end) 0s 1 normal both;-moz-animation:-amp-start 8s steps(1,end) 0s 1 normal both;-ms-animation:-amp-start 8s steps(1,end) 0s 1 normal both;animation:-amp-start 8s steps(1,end) 0s 1 normal both}@-webkit-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-moz-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-ms-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-o-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}</style><noscript><style amp-boilerplate>body{-webkit-animation:none;-moz-animation:none;-ms-animation:none;animation:none}</style></noscript>\n","styles":"        :root {\n          --color-primary: #005AF0;\n          --color-bg-light: #FAFAFC;\n          --space-1: .5rem;  /* 8px */\n        }\n        .fixed-container, .fixed-height-container img {\n          background-color: var(--color-primary);\n        }\n        .contain img {\n          object-fit: contain;\n        }\n        .cover img {\n          object-fit: cover;\n        }\n       .fixed-container {\n         position: relative;\n         width: 200px;\n         height: 200px;\n         margin: var(--space-1);\n       }\n       .fixed-height-container {\n         position: relative;\n         width: 100%;\n         height: 300px;\n         margin: var(--space-1);\n       }\n","title":"How to support Images with unknown Dimensions","metadata":{"teaserImage":"/static/samples/img/teaser/how_to_support_images_with_unknown_dimensions_.jpg"},"body":"<body>","elementsAfterBody":"","isAmpStory":false,"isAmpWeb":true,"isAmpAds":false,"isAmpEmail":false,"firstImage":"/favicons/android-chrome-256x256.png","lang":"en","_description":"This sample demonstrates how it is possible to embed images with unknown dimensions into an AMP page while maintaining the correct aspect ratio."},"route":"/documentation/examples/style-layout/how_to_support_images_with_unknown_dimensions/index.html"}