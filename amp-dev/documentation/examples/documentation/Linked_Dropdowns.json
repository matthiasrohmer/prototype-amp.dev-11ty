{"filePath":"examples/source/interactivity-dynamic-content/Linked_Dropdowns.html","source":"<!--\n  ## Introduction\n\n  These linked dropdowns are implemented using AMP components. This pattern is useful when the values in the second dropdown depend on the value the user selects in the first dropdown. Here we select cities in a chosen country.\n--><!-- -->\n<!doctype html>\n<html ⚡>\n<head>\n<title>Linked Dropdowns</title>\n  <link rel=\"canonical\" href=\"http://localhost:8080/documentation/examples/interactivity-dynamic-content/linked_dropdowns/index.html\">\n\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width,minimum-scale=1,initial-scale=1\">\n  <script async src=\"https://cdn.ampproject.org/v0.js\"></script>\n  <!-- ## Setup -->\n  <!-- First we include `amp-bind` to track the page state and update the `<amp-list>` data source. -->\n  <script async custom-element=\"amp-bind\" src=\"https://cdn.ampproject.org/v0/amp-bind-0.1.js\"></script>\n  <!-- Next we include `amp-list` to request and display the dropdowns and their options. -->\n  <script async custom-element=\"amp-list\" src=\"https://cdn.ampproject.org/v0/amp-list-0.1.js\"></script>\n  <!-- Finally, we include `amp-mustache` to render the mustache templates inside the `<amp-list>`s. -->\n  <script async custom-template=\"amp-mustache\" src=\"https://cdn.ampproject.org/v0/amp-mustache-0.2.js\"></script>\n  <!-- For the last snippet, we show how to implement a linked list with `amp-form` using the `get` method -->\n  <script async custom-element=\"amp-form\" src=\"https://cdn.ampproject.org/v0/amp-form-0.1.js\"></script>\n\n  <style amp-boilerplate>\n    body {\n      -webkit-animation: -amp-start 8s steps(1, end) 0s 1 normal both;\n      -moz-animation: -amp-start 8s steps(1, end) 0s 1 normal both;\n      -ms-animation: -amp-start 8s steps(1, end) 0s 1 normal both;\n      animation: -amp-start 8s steps(1, end) 0s 1 normal both\n    }\n\n    @-webkit-keyframes -amp-start {\n      from {\n        visibility: hidden\n      }\n\n      to {\n        visibility: visible\n      }\n    }\n\n    @-moz-keyframes -amp-start {\n      from {\n        visibility: hidden\n      }\n\n      to {\n        visibility: visible\n      }\n    }\n\n    @-ms-keyframes -amp-start {\n      from {\n        visibility: hidden\n      }\n\n      to {\n        visibility: visible\n      }\n    }\n\n    @-o-keyframes -amp-start {\n      from {\n        visibility: hidden\n      }\n\n      to {\n        visibility: visible\n      }\n    }\n\n    @keyframes -amp-start {\n      from {\n        visibility: hidden\n      }\n\n      to {\n        visibility: visible\n      }\n    }\n  </style><noscript>\n    <style amp-boilerplate>\n      body {\n        -webkit-animation: none;\n        -moz-animation: none;\n        -ms-animation: none;\n        animation: none\n      }\n    </style>\n  </noscript>\n\n  <style amp-custom>\n    :root {\n      --space-2: 1rem;\n    }\n\n    .linked-dropdown label {\n      font-weight: bold;\n    }\n\n    .linked-dropdown [role=\"listitem\"] {\n      display: flex;\n      justify-content: space-between;\n    }\n\n    .linked-dropdown select {\n      width: 200px;\n    }\n\n    .linked-dropdown amp-list {\n      margin: var(--space-2);\n      min-width: 320px;\n    }\n  </style>\n</head>\n\n<body>\n  <!-- ## Implementation -->\n  <!--\n    We use two `<amp-list>` elements to render the options within each `<select>`. The first dropdown triggers a request, which is batched with the request triggered by the other `<amp-list>` and the `<amp-state>` element, so only one request is sent.\n\n    When the user selects a value in the first dropdown, `amp-bind` updates the `cities` state value. This updates second `<amp-list>`'s `[src]` binding, and it renders its template using the data in the `cities` array.\n  -->\n  <div class=\"linked-dropdown\">\n    <amp-list layout=\"fixed-height\" height=\"25\" src=\"/static/samples/json/linked_dropdowns.json\" binding=\"refresh\" single-item items=\".\" noloading>\n      <template type=\"amp-mustache\">\n        <label for=\"country\">Country:</label>\n        <select id=\"country\" on=\"change: AMP.setState({\n                                            cities: dropdown.countries.filter(x => x.name == event.value)[0]\n                                          })\">\n          <option value>Choose a country</option>\n          {{#countries}}\n            <option value=\"{{name}}\">{{name}}</option>\n          {{/countries}}\n        </select>\n      </template>\n      <div placeholder role=\"listitem\">\n        <label for=\"country\">Country:</label>\n        <select disabled>\n          <option value>Choose a country</option>\n        </select>\n      </div>\n    </amp-list>\n    <amp-list layout=\"fixed-height\" height=\"25\" [src]=\"cities || '/static/samples/json/linked_dropdowns.json'\" src=\"/static/samples/json/linked_dropdowns.json\" binding=\"refresh\" single-item items=\".\" noloading>\n      <template type=\"amp-mustache\">\n        <label for=\"city\">City:</label>\n        <select [disabled]=\"!cities\" disabled id=\"city\">\n          <option value>Choose a city</option>\n          {{#cities}}\n            <option value=\"{{.}}\">{{.}}</option>\n          {{/cities}}\n        </select>\n      </template>\n      <div placeholder role=\"listitem\">\n        <label>City:</label>\n        <select disabled>\n          <option value>Choose a city</option>\n        </select>\n      </div>\n    </amp-list>\n    <amp-state id=\"dropdown\" src=\"/static/samples/json/linked_dropdowns.json\"></amp-state>\n  </div>\n  <!-- ## Implementation with `amp-form` using `get` method -->\n  <!--\n    Here we show the same example within the `amp-form` element.\n\n    We want to pass selected values into `action` url, as found in the `action` field in the `amp-form` component. In order to do this, we must include `data-allow-initialization` and `name=\"query parameter\"` (in this case `q` for Google search) fields in each `select` statement. See [amp-form](/documentation/components/amp-form) for more details.\n\n    To redirect user after they've selected values, you must include a `Submit` button to close off the form. Once user selects the `Submit` button, they will be directed to the action url with attached queries.\n  -->\n  <div class=\"linked-dropdown-form\">\n    <form data-initialize-from-url id=\"formResetSample\" class=\"field\" action=\"https://www.google.com\" method=\"get\" target=\"_top\">\n      <amp-list layout=\"fixed-height\" height=\"25\" src=\"/static/samples/json/linked_dropdowns.json\" binding=\"refresh\" single-item items=\".\" noloading>\n        <template type=\"amp-mustache\">\n          <label for=\"country\">Country:</label>\n          <select id=\"country\" on=\"change: AMP.setState({\n                                          citiesForm: dropdown.countries.filter(x => x.name == event.value)[0]\n                                        })\" name=\"q\" data-allow-initialization>\n            <option value>Choose a country</option>\n            {{#countries}}\n              <option value=\"{{name}}\">{{name}}</option>\n            {{/countries}}\n          </select>\n        </template>\n        <div placeholder role=\"listitem\">\n          <label for=\"country\">Country:</label>\n          <select disabled>\n            <option value>Choose a country</option>\n          </select>\n        </div>\n      </amp-list>\n      <amp-list layout=\"fixed-height\" height=\"25\" [src]=\"citiesForm || '/static/samples/json/linked_dropdowns.json'\" src=\"/static/samples/json/linked_dropdowns.json\" binding=\"refresh\" single-item items=\".\" noloading>\n        <template type=\"amp-mustache\">\n          <label for=\"city\">City:</label>\n          <select [disabled]=\"!citiesForm\" disabled id=\"city\" on=\"change: AMP.setState({city: event.value})\" name=\"q\" data-allow-initialization>\n            <option value>Choose a city</option>\n            {{#citiesForm}}\n              <option value=\"{{.}}\">{{.}}</option>\n            {{/citiesForm}}\n          </select>\n        </template>\n      </amp-list>\n      <amp-state id=\"dropdown\" src=\"/static/samples/json/linked_dropdowns.json\"></amp-state>\n      <button on=\"select:formResetSample.submit\">\n        Submit\n      </button>\n    </form>\n  </div>\n</body></html>","document":{"sections":[{"doc_":"\n## Introduction\n\nThese linked dropdowns are implemented using AMP components. This pattern is useful when the values in the second dropdown depend on the value the user selects in the first dropdown. Here we select cities in a chosen country.\n\n","code":"","preview":"","inBody":false,"id":0,"cachedMarkedDoc":"<h2 id=\"introduction\" class=\"www-heading pb4 mb2 relative h3\">Introduction</h2><p class=\"mb2 px1\">These linked dropdowns are implemented using AMP components. This pattern is useful when the values in the second dropdown depend on the value the user selects in the first dropdown. Here we select cities in a chosen country.</p>","isLastSection":false,"isFirstSection":true,"commentOffset":0,"codeOffset":0,"headings":[{"id":"introduction","name":"Introduction"}],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"\n## Introduction\n\nThese linked dropdowns are implemented using AMP components. This pattern is useful when the values in the second dropdown depend on the value the user selects in the first dropdown. Here we select cities in a chosen country.\n\n"},{"doc_":"\n","code":"<!doctype html>\n<html ⚡>\n<head>\n<title>Linked Dropdowns</title>\n  <link rel=\"canonical\" href=\"http://localhost:8080/documentation/examples/interactivity-dynamic-content/linked_dropdowns/index.html\">\n\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width,minimum-scale=1,initial-scale=1\">\n  <script async src=\"https://cdn.ampproject.org/v0.js\"></script>\n","preview":"","inBody":false,"id":1,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":0,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":" \n"},{"doc_":"## Setup\n","code":"","preview":"","inBody":false,"id":2,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":0,"headings":[{"id":"setup","name":"Setup"}],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"## Setup\n"},{"doc_":"First we include `amp-bind` to track the page state and update the `<amp-list>` data source. \n","code":"<script async custom-element=\"amp-bind\" src=\"https://cdn.ampproject.org/v0/amp-bind-0.1.js\"></script>\n","preview":"","inBody":false,"id":3,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":2,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"First we include `amp-bind` to track the page state and update the `<amp-list>` data source. \n"},{"doc_":"Next we include `amp-list` to request and display the dropdowns and their options. \n","code":"<script async custom-element=\"amp-list\" src=\"https://cdn.ampproject.org/v0/amp-list-0.1.js\"></script>\n","preview":"","inBody":false,"id":4,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":2,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"Next we include `amp-list` to request and display the dropdowns and their options. \n"},{"doc_":"Finally, we include `amp-mustache` to render the mustache templates inside the `<amp-list>`s. \n","code":"<script async custom-template=\"amp-mustache\" src=\"https://cdn.ampproject.org/v0/amp-mustache-0.2.js\"></script>\n","preview":"","inBody":false,"id":5,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":2,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"Finally, we include `amp-mustache` to render the mustache templates inside the `<amp-list>`s. \n"},{"doc_":"For the last snippet, we show how to implement a linked list with `amp-form` using the `get` method \n","code":"<script async custom-element=\"amp-form\" src=\"https://cdn.ampproject.org/v0/amp-form-0.1.js\"></script>\n","preview":"","inBody":false,"id":6,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":2,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"For the last snippet, we show how to implement a linked list with `amp-form` using the `get` method \n"},{"doc_":"","code":"\n  <style amp-boilerplate>\n    body {\n      -webkit-animation: -amp-start 8s steps(1, end) 0s 1 normal both;\n      -moz-animation: -amp-start 8s steps(1, end) 0s 1 normal both;\n      -ms-animation: -amp-start 8s steps(1, end) 0s 1 normal both;\n      animation: -amp-start 8s steps(1, end) 0s 1 normal both\n    }\n\n    @-webkit-keyframes -amp-start {\n      from {\n        visibility: hidden\n      }\n\n      to {\n        visibility: visible\n      }\n    }\n\n    @-moz-keyframes -amp-start {\n      from {\n        visibility: hidden\n      }\n\n      to {\n        visibility: visible\n      }\n    }\n\n    @-ms-keyframes -amp-start {\n      from {\n        visibility: hidden\n      }\n\n      to {\n        visibility: visible\n      }\n    }\n\n    @-o-keyframes -amp-start {\n      from {\n        visibility: hidden\n      }\n\n      to {\n        visibility: visible\n      }\n    }\n\n    @keyframes -amp-start {\n      from {\n        visibility: hidden\n      }\n\n      to {\n        visibility: visible\n      }\n    }\n  </style><noscript>\n    <style amp-boilerplate>\n      body {\n        -webkit-animation: none;\n        -moz-animation: none;\n        -ms-animation: none;\n        animation: none\n      }\n    </style>\n  </noscript>\n\n  <style amp-custom>\n    :root {\n      --space-2: 1rem;\n    }\n\n    .linked-dropdown label {\n      font-weight: bold;\n    }\n\n    .linked-dropdown [role=\"listitem\"] {\n      display: flex;\n      justify-content: space-between;\n    }\n\n    .linked-dropdown select {\n      width: 200px;\n    }\n\n    .linked-dropdown amp-list {\n      margin: var(--space-2);\n      min-width: 320px;\n    }\n  </style>\n</head>\n\n<body>\n","preview":"","inBody":false,"id":7,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":0,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":""},{"doc_":"## Implementation\n","code":"","preview":"","inBody":true,"id":8,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":0,"headings":[{"id":"implementation","name":"Implementation"}],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"## Implementation\n"},{"doc_":"\nWe use two `<amp-list>` elements to render the options within each `<select>`. The first dropdown triggers a request, which is batched with the request triggered by the other `<amp-list>` and the `<amp-state>` element, so only one request is sent.\n\nWhen the user selects a value in the first dropdown, `amp-bind` updates the `cities` state value. This updates second `<amp-list>`'s `[src]` binding, and it renders its template using the data in the `cities` array.\n\n","code":"<div class=\"linked-dropdown\">\n  <amp-list layout=\"fixed-height\"\n    height=\"25\"\n    src=\"/static/samples/json/linked_dropdowns.json\"\n    binding=\"refresh\"\n    single-item\n    items=\".\"\n    noloading>\n    <template type=\"amp-mustache\">\n      <label for=\"country\">Country:</label>\n      <select id=\"country\"\n        on=\"change: AMP.setState({\n                                          cities: dropdown.countries.filter(x => x.name == event.value)[0]\n                                        })\">\n        <option value>Choose a country</option>\n        {{#countries}}\n          <option value=\"{{name}}\">{{name}}</option>\n        {{/countries}}\n      </select>\n    </template>\n    <div placeholder\n      role=\"listitem\">\n      <label for=\"country\">Country:</label>\n      <select disabled>\n        <option value>Choose a country</option>\n      </select>\n    </div>\n  </amp-list>\n  <amp-list layout=\"fixed-height\"\n    height=\"25\"\n    [src]=\"cities || '/static/samples/json/linked_dropdowns.json'\"\n    src=\"/static/samples/json/linked_dropdowns.json\"\n    binding=\"refresh\"\n    single-item\n    items=\".\"\n    noloading>\n    <template type=\"amp-mustache\">\n      <label for=\"city\">City:</label>\n      <select [disabled]=\"!cities\"\n        disabled\n        id=\"city\">\n        <option value>Choose a city</option>\n        {{#cities}}\n          <option value=\"{{.}}\">{{.}}</option>\n        {{/cities}}\n      </select>\n    </template>\n    <div placeholder\n      role=\"listitem\">\n      <label>City:</label>\n      <select disabled>\n        <option value>Choose a city</option>\n      </select>\n    </div>\n  </amp-list>\n  <amp-state id=\"dropdown\"\n    src=\"/static/samples/json/linked_dropdowns.json\"></amp-state>\n</div>\n","preview":"  <div class=\"linked-dropdown\">\n    <amp-list layout=\"fixed-height\"\n      height=\"25\"\n      src=\"/static/samples/json/linked_dropdowns.json\"\n      binding=\"refresh\"\n      single-item\n      items=\".\"\n      noloading>\n      <template type=\"amp-mustache\">\n        <label for=\"country\">Country:</label>\n        <select id=\"country\"\n          on=\"change: AMP.setState({\n                                            cities: dropdown.countries.filter(x => x.name == event.value)[0]\n                                          })\">\n          <option value>Choose a country</option>\n          {{#countries}}\n            <option value=\"{{name}}\">{{name}}</option>\n          {{/countries}}\n        </select>\n      </template>\n      <div placeholder\n        role=\"listitem\">\n        <label for=\"country\">Country:</label>\n        <select disabled>\n          <option value>Choose a country</option>\n        </select>\n      </div>\n    </amp-list>\n    <amp-list layout=\"fixed-height\"\n      height=\"25\"\n      [src]=\"cities || '/static/samples/json/linked_dropdowns.json'\"\n      src=\"/static/samples/json/linked_dropdowns.json\"\n      binding=\"refresh\"\n      single-item\n      items=\".\"\n      noloading>\n      <template type=\"amp-mustache\">\n        <label for=\"city\">City:</label>\n        <select [disabled]=\"!cities\"\n          disabled\n          id=\"city\">\n          <option value>Choose a city</option>\n          {{#cities}}\n            <option value=\"{{.}}\">{{.}}</option>\n          {{/cities}}\n        </select>\n      </template>\n      <div placeholder\n        role=\"listitem\">\n        <label>City:</label>\n        <select disabled>\n          <option value>Choose a city</option>\n        </select>\n      </div>\n    </amp-list>\n    <amp-state id=\"dropdown\"\n      src=\"/static/samples/json/linked_dropdowns.json\"></amp-state>\n  </div>\n","inBody":true,"id":9,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":2,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"\nWe use two `<amp-list>` elements to render the options within each `<select>`. The first dropdown triggers a request, which is batched with the request triggered by the other `<amp-list>` and the `<amp-state>` element, so only one request is sent.\n\nWhen the user selects a value in the first dropdown, `amp-bind` updates the `cities` state value. This updates second `<amp-list>`'s `[src]` binding, and it renders its template using the data in the `cities` array.\n\n"},{"doc_":"## Implementation with `amp-form` using `get` method\n","code":"","preview":"","inBody":true,"id":10,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":0,"headings":[{"id":"implementation-with-amp-form-using-get-method","name":"Implementation with amp-form using get method"}],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"## Implementation with `amp-form` using `get` method\n"},{"doc_":"\nHere we show the same example within the `amp-form` element.\n\nWe want to pass selected values into `action` url, as found in the `action` field in the `amp-form` component. In order to do this, we must include `data-allow-initialization` and `name=\"query parameter\"` (in this case `q` for Google search) fields in each `select` statement. See [amp-form](/documentation/components/amp-form) for more details.\n\nTo redirect user after they've selected values, you must include a `Submit` button to close off the form. Once user selects the `Submit` button, they will be directed to the action url with attached queries.\n\n","code":"<div class=\"linked-dropdown-form\">\n  <form data-initialize-from-url\n    id=\"formResetSample\"\n    class=\"field\"\n    action=\"https://www.google.com\"\n    method=\"get\"\n    target=\"_top\">\n    <amp-list layout=\"fixed-height\"\n      height=\"25\"\n      src=\"/static/samples/json/linked_dropdowns.json\"\n      binding=\"refresh\"\n      single-item\n      items=\".\"\n      noloading>\n      <template type=\"amp-mustache\">\n        <label for=\"country\">Country:</label>\n        <select id=\"country\"\n          on=\"change: AMP.setState({\n                                        citiesForm: dropdown.countries.filter(x => x.name == event.value)[0]\n                                      })\"\n          name=\"q\"\n          data-allow-initialization>\n          <option value>Choose a country</option>\n          {{#countries}}\n            <option value=\"{{name}}\">{{name}}</option>\n          {{/countries}}\n        </select>\n      </template>\n      <div placeholder\n        role=\"listitem\">\n        <label for=\"country\">Country:</label>\n        <select disabled>\n          <option value>Choose a country</option>\n        </select>\n      </div>\n    </amp-list>\n    <amp-list layout=\"fixed-height\"\n      height=\"25\"\n      [src]=\"citiesForm || '/static/samples/json/linked_dropdowns.json'\"\n      src=\"/static/samples/json/linked_dropdowns.json\"\n      binding=\"refresh\"\n      single-item\n      items=\".\"\n      noloading>\n      <template type=\"amp-mustache\">\n        <label for=\"city\">City:</label>\n        <select [disabled]=\"!citiesForm\"\n          disabled\n          id=\"city\"\n          on=\"change: AMP.setState({city: event.value})\"\n          name=\"q\"\n          data-allow-initialization>\n          <option value>Choose a city</option>\n          {{#citiesForm}}\n            <option value=\"{{.}}\">{{.}}</option>\n          {{/citiesForm}}\n        </select>\n      </template>\n    </amp-list>\n    <amp-state id=\"dropdown\"\n      src=\"/static/samples/json/linked_dropdowns.json\"></amp-state>\n    <button on=\"select:formResetSample.submit\">\n      Submit\n    </button>\n  </form>\n</div>\n","preview":"  <div class=\"linked-dropdown-form\">\n    <form data-initialize-from-url\n      id=\"formResetSample\"\n      class=\"field\"\n      action=\"https://www.google.com\"\n      method=\"get\"\n      target=\"_top\">\n      <amp-list layout=\"fixed-height\"\n        height=\"25\"\n        src=\"/static/samples/json/linked_dropdowns.json\"\n        binding=\"refresh\"\n        single-item\n        items=\".\"\n        noloading>\n        <template type=\"amp-mustache\">\n          <label for=\"country\">Country:</label>\n          <select id=\"country\"\n            on=\"change: AMP.setState({\n                                          citiesForm: dropdown.countries.filter(x => x.name == event.value)[0]\n                                        })\"\n            name=\"q\"\n            data-allow-initialization>\n            <option value>Choose a country</option>\n            {{#countries}}\n              <option value=\"{{name}}\">{{name}}</option>\n            {{/countries}}\n          </select>\n        </template>\n        <div placeholder\n          role=\"listitem\">\n          <label for=\"country\">Country:</label>\n          <select disabled>\n            <option value>Choose a country</option>\n          </select>\n        </div>\n      </amp-list>\n      <amp-list layout=\"fixed-height\"\n        height=\"25\"\n        [src]=\"citiesForm || '/static/samples/json/linked_dropdowns.json'\"\n        src=\"/static/samples/json/linked_dropdowns.json\"\n        binding=\"refresh\"\n        single-item\n        items=\".\"\n        noloading>\n        <template type=\"amp-mustache\">\n          <label for=\"city\">City:</label>\n          <select [disabled]=\"!citiesForm\"\n            disabled\n            id=\"city\"\n            on=\"change: AMP.setState({city: event.value})\"\n            name=\"q\"\n            data-allow-initialization>\n            <option value>Choose a city</option>\n            {{#citiesForm}}\n              <option value=\"{{.}}\">{{.}}</option>\n            {{/citiesForm}}\n          </select>\n        </template>\n      </amp-list>\n      <amp-state id=\"dropdown\"\n        src=\"/static/samples/json/linked_dropdowns.json\"></amp-state>\n      <button on=\"select:formResetSample.submit\">\n        Submit\n      </button>\n    </form>\n  </div>\n","inBody":true,"id":11,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":2,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"\nHere we show the same example within the `amp-form` element.\n\nWe want to pass selected values into `action` url, as found in the `action` field in the `amp-form` component. In order to do this, we must include `data-allow-initialization` and `name=\"query parameter\"` (in this case `q` for Google search) fields in each `select` statement. See [amp-form](/documentation/components/amp-form) for more details.\n\nTo redirect user after they've selected values, you must include a `Submit` button to close off the form. Once user selects the `Submit` button, they will be directed to the action url with attached queries.\n\n"},{"doc_":"","code":"</body>\n</html>\n","preview":"","inBody":false,"id":12,"cachedMarkedDoc":false,"isLastSection":true,"isFirstSection":false,"commentOffset":0,"codeOffset":0,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":""}],"head":"<title>Linked Dropdowns</title>\n  <link rel=\"canonical\" href=\"http://localhost:8080/documentation/examples/interactivity-dynamic-content/linked_dropdowns/index.html\">\n\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width,minimum-scale=1,initial-scale=1\">\n  <script async src=\"https://cdn.ampproject.org/v0.js\"></script>\n  <script async custom-element=\"amp-bind\" src=\"https://cdn.ampproject.org/v0/amp-bind-0.1.js\"></script>\n  <script async custom-element=\"amp-list\" src=\"https://cdn.ampproject.org/v0/amp-list-0.1.js\"></script>\n  <script async custom-template=\"amp-mustache\" src=\"https://cdn.ampproject.org/v0/amp-mustache-0.2.js\"></script>\n  <script async custom-element=\"amp-form\" src=\"https://cdn.ampproject.org/v0/amp-form-0.1.js\"></script>\n\n  <style amp-boilerplate>\n    body {\n      -webkit-animation: -amp-start 8s steps(1, end) 0s 1 normal both;\n      -moz-animation: -amp-start 8s steps(1, end) 0s 1 normal both;\n      -ms-animation: -amp-start 8s steps(1, end) 0s 1 normal both;\n      animation: -amp-start 8s steps(1, end) 0s 1 normal both\n    }\n\n    @-webkit-keyframes -amp-start {\n      from {\n        visibility: hidden\n      }\n\n      to {\n        visibility: visible\n      }\n    }\n\n    @-moz-keyframes -amp-start {\n      from {\n        visibility: hidden\n      }\n\n      to {\n        visibility: visible\n      }\n    }\n\n    @-ms-keyframes -amp-start {\n      from {\n        visibility: hidden\n      }\n\n      to {\n        visibility: visible\n      }\n    }\n\n    @-o-keyframes -amp-start {\n      from {\n        visibility: hidden\n      }\n\n      to {\n        visibility: visible\n      }\n    }\n\n    @keyframes -amp-start {\n      from {\n        visibility: hidden\n      }\n\n      to {\n        visibility: visible\n      }\n    }\n  </style><noscript>\n    <style amp-boilerplate>\n      body {\n        -webkit-animation: none;\n        -moz-animation: none;\n        -ms-animation: none;\n        animation: none\n      }\n    </style>\n  </noscript>\n\n","styles":"    :root {\n      --space-2: 1rem;\n    }\n\n    .linked-dropdown label {\n      font-weight: bold;\n    }\n\n    .linked-dropdown [role=\"listitem\"] {\n      display: flex;\n      justify-content: space-between;\n    }\n\n    .linked-dropdown select {\n      width: 200px;\n    }\n\n    .linked-dropdown amp-list {\n      margin: var(--space-2);\n      min-width: 320px;\n    }\n","title":"Linked Dropdowns","metadata":{"preview":"default","teaserImage":"/static/samples/img/teaser/linked_dropdowns.jpg","author":"cvializ"},"body":"<body>","elementsAfterBody":"","isAmpStory":false,"isAmpWeb":true,"isAmpAds":false,"isAmpEmail":false,"firstImage":"/favicons/android-chrome-256x256.png","lang":"en","_description":"These linked dropdowns are implemented using AMP components."},"route":"/documentation/examples/interactivity-dynamic-content/linked_dropdowns/index.html"}