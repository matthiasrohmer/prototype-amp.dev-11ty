{"filePath":"examples/source/visual-effects/Basics_of_scrollbound_effects.html","source":"<!--\n  ## Introduction\n\n  [amp-position-observer](/content/amp-dev/documentation/components/reference/amp-position-observer-v0.1.md) combined with [amp-animation](/content/amp-dev/documentation/components/reference/amp-animation-v0.1.md) is a powerful building block that can handle various uses-cases such as **scrollbound animations**, **parallax effects** and **transitions** as elements enter and exit the viewport.\n\n  In this tutorial, we will go through some of these use-cases in detail.\n--><!-- -->\n<!doctype html>\n<html âš¡>\n<head>\n<meta charset=\"utf-8\">\n  <title>Basics of scrollbound effects</title>\n  <script async src=\"https://cdn.ampproject.org/v0.js\"></script>\n  <!--\n    ## Setup\n\n    [amp-position-observer](/content/amp-dev/documentation/components/reference/amp-position-observer-v0.1.md) is a functional component that monitors the position of an element within the viewport as a user scrolls, and dispatches `enter`, `exit` and `scroll:<Position In Viewport As a Percentage>` events.\n\n    These events in return can be used to `play`, `pause` or `seek` animation timelines defined by [amp-animation](/content/amp-dev/documentation/components/reference/amp-animation-v0.1.md) to create scrollbound and visibility-based effects.\n  -->\n  <script async custom-element=\"amp-position-observer\" src=\"https://cdn.ampproject.org/v0/amp-position-observer-0.1.js\"></script>\n\n  <!--\n    [amp-animation](/content/amp-dev/documentation/components/reference/amp-animation-v0.1.md) is a UI component that relies on [Web Animations API](https://www.w3.org/TR/web-animations/) to define and run keyframe animations in AMP documents.\n  -->\n  <script async custom-element=\"amp-animation\" src=\"https://cdn.ampproject.org/v0/amp-animation-0.1.js\"></script>\n\n  <script async custom-element=\"amp-fit-text\" src=\"https://cdn.ampproject.org/v0/amp-fit-text-0.1.js\"></script>\n  <script async custom-element=\"amp-carousel\" src=\"https://cdn.ampproject.org/v0/amp-carousel-0.1.js\"></script>\n  <link rel=\"canonical\" href=\"http://localhost:8080/documentation/examples/visual-effects/basics_of_scrollbound_effects/index.html\">\n  <meta name=\"viewport\" content=\"width=device-width,minimum-scale=1,initial-scale=1\">\n  <style amp-boilerplate>body{-webkit-animation:-amp-start 8s steps(1,end) 0s 1 normal both;-moz-animation:-amp-start 8s steps(1,end) 0s 1 normal both;-ms-animation:-amp-start 8s steps(1,end) 0s 1 normal both;animation:-amp-start 8s steps(1,end) 0s 1 normal both}@-webkit-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-moz-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-ms-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-o-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}</style><noscript><style amp-boilerplate>body{-webkit-animation:none;-moz-animation:none;-ms-animation:none;animation:none}</style></noscript>\n\n  <!--\n    ## Styles\n\n    The CSS used for these samples are included here for reference.\n\n    These rules are simply needed to make the samples work but are not fundamental to the concepts covered here.\n  -->\n  <style amp-custom>\n\n    /*\n     * Fidget Spinner styles\n     */\n    .fidget-spinner-scene {\n      margin: 10px 20%;\n    }\n\n    /*\n     * Card transition styles\n     */\n    .card {\n      margin: 10%;\n      position: relative;\n    }\n    .card-title {\n      padding: 5%;\n      padding-right: 40%;\n      font-size: 50%;\n      font-weight: bold;\n      color: #FAFAFA;\n      transform: translateX(-100%);\n    }\n\n    /*\n     * Parallax window styles\n     */\n    .parallax-image-window {\n      overflow: hidden;\n    }\n    .parallax-image-window amp-img {\n      margin-bottom: -30%;\n    }\n\n    /*\n     * Carousel transition styles\n     */\n    .carousel-component {\n      margin-right: -60%;\n      margin-left: 60%;\n    }\n    .carousel-parent {\n      overflow: hidden;\n    }\n  </style>\n</head>\n\n<body>\n\n  <!--\n  ## Scrollbound animations\n\n  Let's create a fidget spinner that rotates as user scrolls the page.\n\n  This sample showcases the core concept behind combining `amp-position-observer` and `amp-animation`: The ability to progress through a keyframe animation timeline as an element progresses through the viewport via scrolling.\n\n  Our fidget spinner scene is a `div` with an `image`. We add an `amp-position-observer` element as child of the scene to monitor its progress through the viewport. Let's take a look at the details:</p>\n\n  - **`on:scroll`**: This event is triggered by position observer as the position of the scene is changed when user scrolls. The event provides a percentage value (decimal between 0 and 1) representing how far the scene is between the start and end of its progress through the viewport.\n  - **`spinAnimation.seekTo(percent=event.percent)`**: We will define an `amp-animation` that will do the spinning in the next step, here we are coupling `amp-position-observer` and `amp-animation` by triggering a `seekTo` action on the animation as `scroll` events occurs. This is how we specify that we like to progress through the animation timeline as the scene progresses through the viewport via scrolling.\n  - **`intersection-ratios`**: Defines how much of the scene should be visible in the viewport before `amp-position-observer` triggers any of its events. Here, we like the spinning to happen only when fidget spinner is fully visible so we set it to `1`.\n  -->\n  <div class=\"fidget-spinner-scene\">\n\n    <amp-position-observer on=\"scroll:spinAnimation.seekTo(percent=event.percent)\" intersection-ratios=\"1\" layout=\"nodisplay\">\n    </amp-position-observer>\n\n    <amp-img id=\"fidgetSpinnerImage\" width=\"1024\" height=\"1114\" layout=\"responsive\" src=\"/static/samples/img/fidget.png\" alt=\"Picture of a fidget spinner\"></amp-img>\n  </div>\n\n  <!--\n   Now we need to define the animation itself:\n\n   Fairly straightforward in this case, we want `fidgetSpinnerImage` to rotate 360 degrees, so we just define a `\"transform\": \"rotate(360deg)\"` as the last (and only) keyframe. Let's take a look at the details:\n\n   - **`id=\"spinAnimation\"`**: We need to give the animation an Id so we can reference it from postion observer.\n   - **`\"duration\": \"1\"`**: The value of `duration` is irrelevant in this case since we progress through the timeline via scrolling so we just set it to `1`\n   - **`\"direction\": \"reverse\"`**: This is needed due an iOS bug with Web Animations.\n   - **`\"animations\"`**: Here we can define one or more keyframe-based animations. In our case, we only need one.\n   - **`\"selector\"`**: `\"#fidgetSpinnerImage\"` is the selector that targets the fidget spinner for the animation.\n   - **`\"keyframes\":`** We define a `\"transform\": \"rotate(360deg)\"` as the last (and only) keyframe. Note that `amp-animation` automatically fills the first keyframe if not provided.\n\n   `amp-animation` has plenty of other features, please see [the API reference](/documentation/components/amp-animation) to learn more about `amp-animations`.\n  -->\n  <amp-animation id=\"spinAnimation\" layout=\"nodisplay\">\n    <script type=\"application/json\">\n      {\n        \"duration\": \"1\",\n        \"fill\": \"both\",\n        \"direction\": \"reverse\",\n        \"animations\": [\n          {\n            \"selector\": \"#fidgetSpinnerImage\",\n            \"keyframes\": [\n              { \"transform\": \"rotate(360deg)\" }\n            ]\n          }\n        ]\n      }\n    </script>\n  </amp-animation>\n\n  <!--\n  ## Fade & Slide Transitions\n\n  Now that we have learned the basic core concepts behind `amp-position-observer` and `amp-animation`, let's dive into more creative ways they can be combined to create interesting transitions.\n\n  In this sample, we will combine timebound and scrollbound transitions together to create an effect where the opacity of the card is tied to how much of it is visible in the viewport (scrollbound) and the title of the card animates in/out (timebound) as the card enters and exits the viewport.</p>\n\n  Our card scene is simply composed of an image and an overlayed title. Here we define two position observers with different `intersection-ratios` values:\n\n  - The first one will control the opacity of the image as user scrolls.\n  - The second one will run a timebound slide animation for the title when the scene becomes mostly visible (80%) and runs it again \"in reverse\" when scene exits the viewport a bit (20%).\n  -->\n  <div class=\"card ampstart-card\">\n\n    <amp-position-observer on=\"scroll:fadeTransition.seekTo(percent=event.percent)\" intersection-ratios=\"0\" layout=\"nodisplay\">\n    </amp-position-observer>\n\n    <amp-position-observer on=\"enter:slideTransition.start; exit:slideTransition.start,slideTransition.reverse\" intersection-ratios=\"0.8\" layout=\"nodisplay\">\n    </amp-position-observer>\n\n    <amp-fit-text layout=\"fill\">\n      <div class=\"card-title\">\n        Organic, fresh tomatoes and pasta!\n      </div>\n    </amp-fit-text>\n\n    <amp-img id=\"cardImage\" width=\"1280\" height=\"898\" layout=\"responsive\" src=\"/static/samples/img/food.jpg\" alt=\"Picture of food table.\"></amp-img>\n  </div>\n\n  <!--\n  Let's define the keyframes for the scrollbound fade in/out transition.\n\n  We target the `#cardImage` and define keyframes in a way that image gains full opacity within the first 40% of the timeline and starts fading out in the last 40% of the timeline.\n\n  Note that since the position observer controlling this animation has `intersection-ratios` set to `0`, we go through the full timeline when user scrolls `ViewportHeight + 2 * SceneHeight` amount of pixels.\n  -->\n  <amp-animation id=\"fadeTransition\" layout=\"nodisplay\">\n    <script type=\"application/json\">\n      {\n        \"duration\": \"1\",\n        \"fill\": \"both\",\n        \"direction\": \"reverse\",\n        \"animations\": [\n          {\n            \"selector\": \"#cardImage\",\n            \"keyframes\": [\n              { \"opacity\": \"0.3\", \"offset\": 0 },\n              { \"opacity\": \"1\", \"offset\": 0.4 },\n              { \"opacity\": \"1\", \"offset\": 0.6 },\n              { \"opacity\": \"0.3\", \"offset\": 1 }\n            ]\n          }\n        ]\n      }\n    </script>\n  </amp-animation>\n\n  <!--\n  For the slide in/out effect of the title, we just define a 500ms animation that will move the title along the X-axis.\n\n  This animation will simply be triggered (either in normal or reverse directions) via the second position observer when the scene is mostly visible/invisible.\n  -->\n  <amp-animation id=\"slideTransition\" layout=\"nodisplay\">\n    <script type=\"application/json\">\n      {\n          \"duration\": \"500ms\",\n          \"fill\": \"both\",\n          \"easing\": \"ease-out\",\n          \"iterations\": \"1\",\n          \"animations\": [\n            {\n              \"selector\": \".card-title\",\n              \"keyframes\": [\n                { \"transform\": \"translateX(-100%)\" },\n                { \"transform\": \"translateX(0)\" }\n              ]\n            }\n          ]\n        }\n    </script>\n  </amp-animation>\n\n  <!--\n  ## Parallax Image Window\n\n  Parallax is another effect that is possible with combining `amp-animation` and `amp-position-observer`.\n\n  Parallax normally involves translating an element on the Y-axis as user scrolls.\n\n  Here we define a scene that has a smaller height than the image inside of it, as user scrolls, we move the image creating a parallax window into the image.\n  -->\n  <div class=\"parallax-image-window\">\n\n    <amp-position-observer on=\"scroll:parallaxTransition.seekTo(percent=event.percent)\" intersection-ratios=\"0\" layout=\"nodisplay\">\n    </amp-position-observer>\n\n    <amp-img id=\"parallaxImage\" width=\"1280\" height=\"873\" layout=\"responsive\" src=\"/static/samples/img/elephant.jpg\" alt=\"Picture of an elephant\"></amp-img>\n  </div>\n\n  <!--\n  The animation itself simply moves the image up via `\"transform\": \"translateY(-30%)\"`\n  -->\n  <amp-animation id=\"parallaxTransition\" layout=\"nodisplay\">\n    <script type=\"application/json\">\n      {\n        \"duration\": \"1\",\n        \"fill\": \"both\",\n        \"direction\": \"reverse\",\n        \"animations\": [\n          {\n            \"selector\": \"#parallaxImage\",\n            \"keyframes\": [\n              { \"transform\": \"translateY(-30%)\" }\n            ]\n          }\n        ]\n      }\n    </script>\n  </amp-animation>\n\n  <!--\n  ## Carousel Transition\n\n  We can also use these effects with other AMP components such as `amp-carousel`.\n\n  In this sample, we have a carousel where the first item is pushed to the right and when carousel becomes visible, it snaps back into place providing a visual \"hint\" that the carousel is horizontally scrollable.\n  -->\n  <div class=\"carousel-parent\">\n    <amp-carousel class=\"carousel-component\" height=\"300\" layout=\"fixed-height\" type=\"carousel\">\n\n      <amp-position-observer on=\"enter:carouselTransition.start\" intersection-ratios=\"0.8\" layout=\"nodisplay\">\n      </amp-position-observer>\n\n      <amp-img src=\"https://unsplash.it/800/600?image=1003\" width=\"400\" height=\"300\" alt=\"a sample image\"></amp-img>\n      <amp-img src=\"https://unsplash.it/800/600?image=1043\" width=\"400\" height=\"300\" alt=\"another sample image\"></amp-img>\n      <amp-img src=\"https://unsplash.it/800/600?image=1032\" width=\"400\" height=\"300\" alt=\"and another sample image\"></amp-img>\n    </amp-carousel>\n  </div>\n\n  <!--\n  Here we define our timebound animation with a delay of 200ms which will slide the carousel to the left within 500ms.\n\n  This animation will only be triggered once by the position observer as defined above.\n  -->\n  <amp-animation id=\"carouselTransition\" layout=\"nodisplay\">\n    <script type=\"application/json\">\n      {\n        \"duration\": \"500ms\",\n        \"fill\": \"both\",\n        \"easing\": \"ease-in\",\n        \"delay\": \"200ms\",\n        \"animations\": [\n          {\n            \"selector\": \".carousel-component\",\n            \"keyframes\": [\n              { \"transform\": \"translateX(-60%)\" }\n            ]\n          }\n        ]\n      }\n    </script>\n  </amp-animation>\n</body></html>","document":{"sections":[{"doc_":"\n## Introduction\n\n[amp-position-observer](/content/amp-dev/documentation/components/reference/amp-position-observer-v0.1.md) combined with [amp-animation](/content/amp-dev/documentation/components/reference/amp-animation-v0.1.md) is a powerful building block that can handle various uses-cases such as **scrollbound animations**, **parallax effects** and **transitions** as elements enter and exit the viewport.\n\nIn this tutorial, we will go through some of these use-cases in detail.\n\n","code":"","preview":"","inBody":false,"id":0,"cachedMarkedDoc":"<h2 id=\"introduction\" class=\"www-heading pb4 mb2 relative h3\">Introduction</h2><p class=\"mb2 px1\"><a href=\"/content/amp-dev/documentation/components/reference/amp-position-observer-v0.1.md\">amp-position-observer</a> combined with <a href=\"/content/amp-dev/documentation/components/reference/amp-animation-v0.1.md\">amp-animation</a> is a powerful building block that can handle various uses-cases such as <strong>scrollbound animations</strong>, <strong>parallax effects</strong> and <strong>transitions</strong> as elements enter and exit the viewport.</p><p class=\"mb2 px1\">In this tutorial, we will go through some of these use-cases in detail.</p>","isLastSection":false,"isFirstSection":true,"commentOffset":0,"codeOffset":0,"headings":[{"id":"introduction","name":"Introduction"}],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"\n## Introduction\n\n[amp-position-observer](/content/amp-dev/documentation/components/reference/amp-position-observer-v0.1.md) combined with [amp-animation](/content/amp-dev/documentation/components/reference/amp-animation-v0.1.md) is a powerful building block that can handle various uses-cases such as **scrollbound animations**, **parallax effects** and **transitions** as elements enter and exit the viewport.\n\nIn this tutorial, we will go through some of these use-cases in detail.\n\n"},{"doc_":"\n","code":"<!doctype html>\n<html âš¡>\n<head>\n<meta charset=\"utf-8\">\n  <title>Basics of scrollbound effects</title>\n  <script async src=\"https://cdn.ampproject.org/v0.js\"></script>\n","preview":"","inBody":false,"id":1,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":0,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":" \n"},{"doc_":"\n## Setup\n\n[amp-position-observer](/content/amp-dev/documentation/components/reference/amp-position-observer-v0.1.md) is a functional component that monitors the position of an element within the viewport as a user scrolls, and dispatches `enter`, `exit` and `scroll:<Position In Viewport As a Percentage>` events.\n\nThese events in return can be used to `play`, `pause` or `seek` animation timelines defined by [amp-animation](/content/amp-dev/documentation/components/reference/amp-animation-v0.1.md) to create scrollbound and visibility-based effects.\n\n","code":"<script async custom-element=\"amp-position-observer\" src=\"https://cdn.ampproject.org/v0/amp-position-observer-0.1.js\"></script>\n","preview":"","inBody":false,"id":2,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":2,"headings":[{"id":"setup","name":"Setup"}],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"\n## Setup\n\n[amp-position-observer](/content/amp-dev/documentation/components/reference/amp-position-observer-v0.1.md) is a functional component that monitors the position of an element within the viewport as a user scrolls, and dispatches `enter`, `exit` and `scroll:<Position In Viewport As a Percentage>` events.\n\nThese events in return can be used to `play`, `pause` or `seek` animation timelines defined by [amp-animation](/content/amp-dev/documentation/components/reference/amp-animation-v0.1.md) to create scrollbound and visibility-based effects.\n\n"},{"doc_":"","code":"\n","preview":"","inBody":false,"id":3,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":0,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":""},{"doc_":"\n[amp-animation](/content/amp-dev/documentation/components/reference/amp-animation-v0.1.md) is a UI component that relies on [Web Animations API](https://www.w3.org/TR/web-animations/) to define and run keyframe animations in AMP documents.\n\n","code":"<script async custom-element=\"amp-animation\" src=\"https://cdn.ampproject.org/v0/amp-animation-0.1.js\"></script>\n","preview":"","inBody":false,"id":4,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":2,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"\n[amp-animation](/content/amp-dev/documentation/components/reference/amp-animation-v0.1.md) is a UI component that relies on [Web Animations API](https://www.w3.org/TR/web-animations/) to define and run keyframe animations in AMP documents.\n\n"},{"doc_":"","code":"\n<script async custom-element=\"amp-fit-text\" src=\"https://cdn.ampproject.org/v0/amp-fit-text-0.1.js\"></script>\n<script async custom-element=\"amp-carousel\" src=\"https://cdn.ampproject.org/v0/amp-carousel-0.1.js\"></script>\n<link rel=\"canonical\" href=\"http://localhost:8080/documentation/examples/visual-effects/basics_of_scrollbound_effects/index.html\">\n<meta name=\"viewport\" content=\"width=device-width,minimum-scale=1,initial-scale=1\">\n<style amp-boilerplate>body{-webkit-animation:-amp-start 8s steps(1,end) 0s 1 normal both;-moz-animation:-amp-start 8s steps(1,end) 0s 1 normal both;-ms-animation:-amp-start 8s steps(1,end) 0s 1 normal both;animation:-amp-start 8s steps(1,end) 0s 1 normal both}@-webkit-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-moz-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-ms-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-o-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}</style><noscript><style amp-boilerplate>body{-webkit-animation:none;-moz-animation:none;-ms-animation:none;animation:none}</style></noscript>\n\n","preview":"","inBody":false,"id":5,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":0,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":""},{"doc_":"\n## Styles\n\nThe CSS used for these samples are included here for reference.\n\nThese rules are simply needed to make the samples work but are not fundamental to the concepts covered here.\n\n","code":"<style amp-custom>\n\n  /*\n   * Fidget Spinner styles\n   */\n  .fidget-spinner-scene {\n    margin: 10px 20%;\n  }\n\n  /*\n   * Card transition styles\n   */\n  .card {\n    margin: 10%;\n    position: relative;\n  }\n  .card-title {\n    padding: 5%;\n    padding-right: 40%;\n    font-size: 50%;\n    font-weight: bold;\n    color: #FAFAFA;\n    transform: translateX(-100%);\n  }\n\n  /*\n   * Parallax window styles\n   */\n  .parallax-image-window {\n    overflow: hidden;\n  }\n  .parallax-image-window amp-img {\n    margin-bottom: -30%;\n  }\n\n  /*\n   * Carousel transition styles\n   */\n  .carousel-component {\n    margin-right: -60%;\n    margin-left: 60%;\n  }\n  .carousel-parent {\n    overflow: hidden;\n  }\n</style>\n","preview":"","inBody":false,"id":6,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":2,"headings":[{"id":"styles","name":"Styles"}],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"\n## Styles\n\nThe CSS used for these samples are included here for reference.\n\nThese rules are simply needed to make the samples work but are not fundamental to the concepts covered here.\n\n"},{"doc_":"","code":"</head>\n\n<body>\n\n","preview":"\n","inBody":false,"id":7,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":0,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":""},{"doc_":"\n## Scrollbound animations\n\nLet's create a fidget spinner that rotates as user scrolls the page.\n\nThis sample showcases the core concept behind combining `amp-position-observer` and `amp-animation`: The ability to progress through a keyframe animation timeline as an element progresses through the viewport via scrolling.\n\nOur fidget spinner scene is a `div` with an `image`. We add an `amp-position-observer` element as child of the scene to monitor its progress through the viewport. Let's take a look at the details:</p>\n\n- **`on:scroll`**: This event is triggered by position observer as the position of the scene is changed when user scrolls. The event provides a percentage value (decimal between 0 and 1) representing how far the scene is between the start and end of its progress through the viewport.\n- **`spinAnimation.seekTo(percent=event.percent)`**: We will define an `amp-animation` that will do the spinning in the next step, here we are coupling `amp-position-observer` and `amp-animation` by triggering a `seekTo` action on the animation as `scroll` events occurs. This is how we specify that we like to progress through the animation timeline as the scene progresses through the viewport via scrolling.\n- **`intersection-ratios`**: Defines how much of the scene should be visible in the viewport before `amp-position-observer` triggers any of its events. Here, we like the spinning to happen only when fidget spinner is fully visible so we set it to `1`.\n\n","code":"<div class=\"fidget-spinner-scene\">\n\n  <amp-position-observer on=\"scroll:spinAnimation.seekTo(percent=event.percent)\"\n    intersection-ratios=\"1\"\n    layout=\"nodisplay\">\n  </amp-position-observer>\n\n  <amp-img id=\"fidgetSpinnerImage\"\n    width=\"1024\"\n    height=\"1114\"\n    layout=\"responsive\"\n    src=\"/static/samples/img/fidget.png\"\n    alt=\"Picture of a fidget spinner\"></amp-img>\n</div>\n","preview":"  <div class=\"fidget-spinner-scene\">\n\n    <amp-position-observer on=\"scroll:spinAnimation.seekTo(percent=event.percent)\"\n      intersection-ratios=\"1\"\n      layout=\"nodisplay\">\n    </amp-position-observer>\n\n    <amp-img id=\"fidgetSpinnerImage\"\n      width=\"1024\"\n      height=\"1114\"\n      layout=\"responsive\"\n      src=\"/static/samples/img/fidget.png\"\n      alt=\"Picture of a fidget spinner\"></amp-img>\n  </div>\n","inBody":true,"id":8,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":2,"headings":[{"id":"scrollbound-animations","name":"Scrollbound animations"}],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"\n## Scrollbound animations\n\nLet's create a fidget spinner that rotates as user scrolls the page.\n\nThis sample showcases the core concept behind combining `amp-position-observer` and `amp-animation`: The ability to progress through a keyframe animation timeline as an element progresses through the viewport via scrolling.\n\nOur fidget spinner scene is a `div` with an `image`. We add an `amp-position-observer` element as child of the scene to monitor its progress through the viewport. Let's take a look at the details:</p>\n\n- **`on:scroll`**: This event is triggered by position observer as the position of the scene is changed when user scrolls. The event provides a percentage value (decimal between 0 and 1) representing how far the scene is between the start and end of its progress through the viewport.\n- **`spinAnimation.seekTo(percent=event.percent)`**: We will define an `amp-animation` that will do the spinning in the next step, here we are coupling `amp-position-observer` and `amp-animation` by triggering a `seekTo` action on the animation as `scroll` events occurs. This is how we specify that we like to progress through the animation timeline as the scene progresses through the viewport via scrolling.\n- **`intersection-ratios`**: Defines how much of the scene should be visible in the viewport before `amp-position-observer` triggers any of its events. Here, we like the spinning to happen only when fidget spinner is fully visible so we set it to `1`.\n\n"},{"doc_":"","code":"\n","preview":"\n","inBody":true,"id":9,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":0,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":""},{"doc_":"\nNow we need to define the animation itself:\n\nFairly straightforward in this case, we want `fidgetSpinnerImage` to rotate 360 degrees, so we just define a `\"transform\": \"rotate(360deg)\"` as the last (and only) keyframe. Let's take a look at the details:\n\n- **`id=\"spinAnimation\"`**: We need to give the animation an Id so we can reference it from postion observer.\n- **`\"duration\": \"1\"`**: The value of `duration` is irrelevant in this case since we progress through the timeline via scrolling so we just set it to `1`\n- **`\"direction\": \"reverse\"`**: This is needed due an iOS bug with Web Animations.\n- **`\"animations\"`**: Here we can define one or more keyframe-based animations. In our case, we only need one.\n- **`\"selector\"`**: `\"#fidgetSpinnerImage\"` is the selector that targets the fidget spinner for the animation.\n- **`\"keyframes\":`** We define a `\"transform\": \"rotate(360deg)\"` as the last (and only) keyframe. Note that `amp-animation` automatically fills the first keyframe if not provided.\n\n`amp-animation` has plenty of other features, please see [the API reference](/documentation/components/amp-animation) to learn more about `amp-animations`.\n\n","code":"<amp-animation id=\"spinAnimation\"\n  layout=\"nodisplay\">\n  <script type=\"application/json\">\n    {\n      \"duration\": \"1\",\n      \"fill\": \"both\",\n      \"direction\": \"reverse\",\n      \"animations\": [{\n        \"selector\": \"#fidgetSpinnerImage\",\n        \"keyframes\": [{\n          \"transform\": \"rotate(360deg)\"\n        }]\n      }]\n    }\n  </script>\n</amp-animation>\n","preview":"  <amp-animation id=\"spinAnimation\"\n    layout=\"nodisplay\">\n    <script type=\"application/json\">\n      {\n        \"duration\": \"1\",\n        \"fill\": \"both\",\n        \"direction\": \"reverse\",\n        \"animations\": [{\n          \"selector\": \"#fidgetSpinnerImage\",\n          \"keyframes\": [{\n            \"transform\": \"rotate(360deg)\"\n          }]\n        }]\n      }\n    </script>\n  </amp-animation>\n","inBody":true,"id":10,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":2,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"\nNow we need to define the animation itself:\n\nFairly straightforward in this case, we want `fidgetSpinnerImage` to rotate 360 degrees, so we just define a `\"transform\": \"rotate(360deg)\"` as the last (and only) keyframe. Let's take a look at the details:\n\n- **`id=\"spinAnimation\"`**: We need to give the animation an Id so we can reference it from postion observer.\n- **`\"duration\": \"1\"`**: The value of `duration` is irrelevant in this case since we progress through the timeline via scrolling so we just set it to `1`\n- **`\"direction\": \"reverse\"`**: This is needed due an iOS bug with Web Animations.\n- **`\"animations\"`**: Here we can define one or more keyframe-based animations. In our case, we only need one.\n- **`\"selector\"`**: `\"#fidgetSpinnerImage\"` is the selector that targets the fidget spinner for the animation.\n- **`\"keyframes\":`** We define a `\"transform\": \"rotate(360deg)\"` as the last (and only) keyframe. Note that `amp-animation` automatically fills the first keyframe if not provided.\n\n`amp-animation` has plenty of other features, please see [the API reference](/documentation/components/amp-animation) to learn more about `amp-animations`.\n\n"},{"doc_":"","code":"\n","preview":"\n","inBody":true,"id":11,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":0,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":""},{"doc_":"\n## Fade & Slide Transitions\n\nNow that we have learned the basic core concepts behind `amp-position-observer` and `amp-animation`, let's dive into more creative ways they can be combined to create interesting transitions.\n\nIn this sample, we will combine timebound and scrollbound transitions together to create an effect where the opacity of the card is tied to how much of it is visible in the viewport (scrollbound) and the title of the card animates in/out (timebound) as the card enters and exits the viewport.</p>\n\nOur card scene is simply composed of an image and an overlayed title. Here we define two position observers with different `intersection-ratios` values:\n\n- The first one will control the opacity of the image as user scrolls.\n- The second one will run a timebound slide animation for the title when the scene becomes mostly visible (80%) and runs it again \"in reverse\" when scene exits the viewport a bit (20%).\n\n","code":"<div class=\"card ampstart-card\">\n\n  <amp-position-observer on=\"scroll:fadeTransition.seekTo(percent=event.percent)\"\n    intersection-ratios=\"0\"\n    layout=\"nodisplay\">\n  </amp-position-observer>\n\n  <amp-position-observer on=\"enter:slideTransition.start; exit:slideTransition.start,slideTransition.reverse\"\n    intersection-ratios=\"0.8\"\n    layout=\"nodisplay\">\n  </amp-position-observer>\n\n  <amp-fit-text layout=\"fill\">\n    <div class=\"card-title\">\n      Organic, fresh tomatoes and pasta!\n    </div>\n  </amp-fit-text>\n\n  <amp-img id=\"cardImage\"\n    width=\"1280\"\n    height=\"898\"\n    layout=\"responsive\"\n    src=\"/static/samples/img/food.jpg\"\n    alt=\"Picture of food table.\"></amp-img>\n</div>\n","preview":"  <div class=\"card ampstart-card\">\n\n    <amp-position-observer on=\"scroll:fadeTransition.seekTo(percent=event.percent)\"\n      intersection-ratios=\"0\"\n      layout=\"nodisplay\">\n    </amp-position-observer>\n\n    <amp-position-observer on=\"enter:slideTransition.start; exit:slideTransition.start,slideTransition.reverse\"\n      intersection-ratios=\"0.8\"\n      layout=\"nodisplay\">\n    </amp-position-observer>\n\n    <amp-fit-text layout=\"fill\">\n      <div class=\"card-title\">\n        Organic, fresh tomatoes and pasta!\n      </div>\n    </amp-fit-text>\n\n    <amp-img id=\"cardImage\"\n      width=\"1280\"\n      height=\"898\"\n      layout=\"responsive\"\n      src=\"/static/samples/img/food.jpg\"\n      alt=\"Picture of food table.\"></amp-img>\n  </div>\n","inBody":true,"id":12,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":2,"headings":[{"id":"fade-&-slide-transitions","name":"Fade & Slide Transitions"}],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"\n## Fade & Slide Transitions\n\nNow that we have learned the basic core concepts behind `amp-position-observer` and `amp-animation`, let's dive into more creative ways they can be combined to create interesting transitions.\n\nIn this sample, we will combine timebound and scrollbound transitions together to create an effect where the opacity of the card is tied to how much of it is visible in the viewport (scrollbound) and the title of the card animates in/out (timebound) as the card enters and exits the viewport.</p>\n\nOur card scene is simply composed of an image and an overlayed title. Here we define two position observers with different `intersection-ratios` values:\n\n- The first one will control the opacity of the image as user scrolls.\n- The second one will run a timebound slide animation for the title when the scene becomes mostly visible (80%) and runs it again \"in reverse\" when scene exits the viewport a bit (20%).\n\n"},{"doc_":"","code":"\n","preview":"\n","inBody":true,"id":13,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":0,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":""},{"doc_":"\nLet's define the keyframes for the scrollbound fade in/out transition.\n\nWe target the `#cardImage` and define keyframes in a way that image gains full opacity within the first 40% of the timeline and starts fading out in the last 40% of the timeline.\n\nNote that since the position observer controlling this animation has `intersection-ratios` set to `0`, we go through the full timeline when user scrolls `ViewportHeight + 2 * SceneHeight` amount of pixels.\n\n","code":"<amp-animation id=\"fadeTransition\"\n  layout=\"nodisplay\">\n  <script type=\"application/json\">\n    {\n      \"duration\": \"1\",\n      \"fill\": \"both\",\n      \"direction\": \"reverse\",\n      \"animations\": [{\n        \"selector\": \"#cardImage\",\n        \"keyframes\": [{\n            \"opacity\": \"0.3\",\n            \"offset\": 0\n          },\n          {\n            \"opacity\": \"1\",\n            \"offset\": 0.4\n          },\n          {\n            \"opacity\": \"1\",\n            \"offset\": 0.6\n          },\n          {\n            \"opacity\": \"0.3\",\n            \"offset\": 1\n          }\n        ]\n      }]\n    }\n  </script>\n</amp-animation>\n","preview":"  <amp-animation id=\"fadeTransition\"\n    layout=\"nodisplay\">\n    <script type=\"application/json\">\n      {\n        \"duration\": \"1\",\n        \"fill\": \"both\",\n        \"direction\": \"reverse\",\n        \"animations\": [{\n          \"selector\": \"#cardImage\",\n          \"keyframes\": [{\n              \"opacity\": \"0.3\",\n              \"offset\": 0\n            },\n            {\n              \"opacity\": \"1\",\n              \"offset\": 0.4\n            },\n            {\n              \"opacity\": \"1\",\n              \"offset\": 0.6\n            },\n            {\n              \"opacity\": \"0.3\",\n              \"offset\": 1\n            }\n          ]\n        }]\n      }\n    </script>\n  </amp-animation>\n","inBody":true,"id":14,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":2,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"\nLet's define the keyframes for the scrollbound fade in/out transition.\n\nWe target the `#cardImage` and define keyframes in a way that image gains full opacity within the first 40% of the timeline and starts fading out in the last 40% of the timeline.\n\nNote that since the position observer controlling this animation has `intersection-ratios` set to `0`, we go through the full timeline when user scrolls `ViewportHeight + 2 * SceneHeight` amount of pixels.\n\n"},{"doc_":"","code":"\n","preview":"\n","inBody":true,"id":15,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":0,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":""},{"doc_":"\nFor the slide in/out effect of the title, we just define a 500ms animation that will move the title along the X-axis.\n\nThis animation will simply be triggered (either in normal or reverse directions) via the second position observer when the scene is mostly visible/invisible.\n\n","code":"<amp-animation id=\"slideTransition\"\n  layout=\"nodisplay\">\n  <script type=\"application/json\">\n    {\n      \"duration\": \"500ms\",\n      \"fill\": \"both\",\n      \"easing\": \"ease-out\",\n      \"iterations\": \"1\",\n      \"animations\": [{\n        \"selector\": \".card-title\",\n        \"keyframes\": [{\n            \"transform\": \"translateX(-100%)\"\n          },\n          {\n            \"transform\": \"translateX(0)\"\n          }\n        ]\n      }]\n    }\n  </script>\n</amp-animation>\n","preview":"  <amp-animation id=\"slideTransition\"\n    layout=\"nodisplay\">\n    <script type=\"application/json\">\n      {\n        \"duration\": \"500ms\",\n        \"fill\": \"both\",\n        \"easing\": \"ease-out\",\n        \"iterations\": \"1\",\n        \"animations\": [{\n          \"selector\": \".card-title\",\n          \"keyframes\": [{\n              \"transform\": \"translateX(-100%)\"\n            },\n            {\n              \"transform\": \"translateX(0)\"\n            }\n          ]\n        }]\n      }\n    </script>\n  </amp-animation>\n","inBody":true,"id":16,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":2,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"\nFor the slide in/out effect of the title, we just define a 500ms animation that will move the title along the X-axis.\n\nThis animation will simply be triggered (either in normal or reverse directions) via the second position observer when the scene is mostly visible/invisible.\n\n"},{"doc_":"","code":"\n","preview":"\n","inBody":true,"id":17,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":0,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":""},{"doc_":"\n## Parallax Image Window\n\nParallax is another effect that is possible with combining `amp-animation` and `amp-position-observer`.\n\nParallax normally involves translating an element on the Y-axis as user scrolls.\n\nHere we define a scene that has a smaller height than the image inside of it, as user scrolls, we move the image creating a parallax window into the image.\n\n","code":"<div class=\"parallax-image-window\">\n\n  <amp-position-observer on=\"scroll:parallaxTransition.seekTo(percent=event.percent)\"\n    intersection-ratios=\"0\"\n    layout=\"nodisplay\">\n  </amp-position-observer>\n\n  <amp-img id=\"parallaxImage\"\n    width=\"1280\"\n    height=\"873\"\n    layout=\"responsive\"\n    src=\"/static/samples/img/elephant.jpg\"\n    alt=\"Picture of an elephant\"></amp-img>\n</div>\n","preview":"  <div class=\"parallax-image-window\">\n\n    <amp-position-observer on=\"scroll:parallaxTransition.seekTo(percent=event.percent)\"\n      intersection-ratios=\"0\"\n      layout=\"nodisplay\">\n    </amp-position-observer>\n\n    <amp-img id=\"parallaxImage\"\n      width=\"1280\"\n      height=\"873\"\n      layout=\"responsive\"\n      src=\"/static/samples/img/elephant.jpg\"\n      alt=\"Picture of an elephant\"></amp-img>\n  </div>\n","inBody":true,"id":18,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":2,"headings":[{"id":"parallax-image-window","name":"Parallax Image Window"}],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"\n## Parallax Image Window\n\nParallax is another effect that is possible with combining `amp-animation` and `amp-position-observer`.\n\nParallax normally involves translating an element on the Y-axis as user scrolls.\n\nHere we define a scene that has a smaller height than the image inside of it, as user scrolls, we move the image creating a parallax window into the image.\n\n"},{"doc_":"","code":"\n","preview":"\n","inBody":true,"id":19,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":0,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":""},{"doc_":"\nThe animation itself simply moves the image up via `\"transform\": \"translateY(-30%)\"`\n\n","code":"<amp-animation id=\"parallaxTransition\"\n  layout=\"nodisplay\">\n  <script type=\"application/json\">\n    {\n      \"duration\": \"1\",\n      \"fill\": \"both\",\n      \"direction\": \"reverse\",\n      \"animations\": [{\n        \"selector\": \"#parallaxImage\",\n        \"keyframes\": [{\n          \"transform\": \"translateY(-30%)\"\n        }]\n      }]\n    }\n  </script>\n</amp-animation>\n","preview":"  <amp-animation id=\"parallaxTransition\"\n    layout=\"nodisplay\">\n    <script type=\"application/json\">\n      {\n        \"duration\": \"1\",\n        \"fill\": \"both\",\n        \"direction\": \"reverse\",\n        \"animations\": [{\n          \"selector\": \"#parallaxImage\",\n          \"keyframes\": [{\n            \"transform\": \"translateY(-30%)\"\n          }]\n        }]\n      }\n    </script>\n  </amp-animation>\n","inBody":true,"id":20,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":2,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"\nThe animation itself simply moves the image up via `\"transform\": \"translateY(-30%)\"`\n\n"},{"doc_":"","code":"\n","preview":"\n","inBody":true,"id":21,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":0,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":""},{"doc_":"\n## Carousel Transition\n\nWe can also use these effects with other AMP components such as `amp-carousel`.\n\nIn this sample, we have a carousel where the first item is pushed to the right and when carousel becomes visible, it snaps back into place providing a visual \"hint\" that the carousel is horizontally scrollable.\n\n","code":"<div class=\"carousel-parent\">\n  <amp-carousel class=\"carousel-component\"\n    height=\"300\"\n    layout=\"fixed-height\"\n    type=\"carousel\">\n\n    <amp-position-observer on=\"enter:carouselTransition.start\"\n      intersection-ratios=\"0.8\"\n      layout=\"nodisplay\">\n    </amp-position-observer>\n\n    <amp-img src=\"https://unsplash.it/800/600?image=1003\"\n      width=\"400\"\n      height=\"300\"\n      alt=\"a sample image\"></amp-img>\n    <amp-img src=\"https://unsplash.it/800/600?image=1043\"\n      width=\"400\"\n      height=\"300\"\n      alt=\"another sample image\"></amp-img>\n    <amp-img src=\"https://unsplash.it/800/600?image=1032\"\n      width=\"400\"\n      height=\"300\"\n      alt=\"and another sample image\"></amp-img>\n  </amp-carousel>\n</div>\n","preview":"  <div class=\"carousel-parent\">\n    <amp-carousel class=\"carousel-component\"\n      height=\"300\"\n      layout=\"fixed-height\"\n      type=\"carousel\">\n\n      <amp-position-observer on=\"enter:carouselTransition.start\"\n        intersection-ratios=\"0.8\"\n        layout=\"nodisplay\">\n      </amp-position-observer>\n\n      <amp-img src=\"https://unsplash.it/800/600?image=1003\"\n        width=\"400\"\n        height=\"300\"\n        alt=\"a sample image\"></amp-img>\n      <amp-img src=\"https://unsplash.it/800/600?image=1043\"\n        width=\"400\"\n        height=\"300\"\n        alt=\"another sample image\"></amp-img>\n      <amp-img src=\"https://unsplash.it/800/600?image=1032\"\n        width=\"400\"\n        height=\"300\"\n        alt=\"and another sample image\"></amp-img>\n    </amp-carousel>\n  </div>\n","inBody":true,"id":22,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":2,"headings":[{"id":"carousel-transition","name":"Carousel Transition"}],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"\n## Carousel Transition\n\nWe can also use these effects with other AMP components such as `amp-carousel`.\n\nIn this sample, we have a carousel where the first item is pushed to the right and when carousel becomes visible, it snaps back into place providing a visual \"hint\" that the carousel is horizontally scrollable.\n\n"},{"doc_":"","code":"\n","preview":"\n","inBody":true,"id":23,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":0,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":""},{"doc_":"\nHere we define our timebound animation with a delay of 200ms which will slide the carousel to the left within 500ms.\n\nThis animation will only be triggered once by the position observer as defined above.\n\n","code":"<amp-animation id=\"carouselTransition\"\n  layout=\"nodisplay\">\n  <script type=\"application/json\">\n    {\n      \"duration\": \"500ms\",\n      \"fill\": \"both\",\n      \"easing\": \"ease-in\",\n      \"delay\": \"200ms\",\n      \"animations\": [{\n        \"selector\": \".carousel-component\",\n        \"keyframes\": [{\n          \"transform\": \"translateX(-60%)\"\n        }]\n      }]\n    }\n  </script>\n</amp-animation>\n","preview":"  <amp-animation id=\"carouselTransition\"\n    layout=\"nodisplay\">\n    <script type=\"application/json\">\n      {\n        \"duration\": \"500ms\",\n        \"fill\": \"both\",\n        \"easing\": \"ease-in\",\n        \"delay\": \"200ms\",\n        \"animations\": [{\n          \"selector\": \".carousel-component\",\n          \"keyframes\": [{\n            \"transform\": \"translateX(-60%)\"\n          }]\n        }]\n      }\n    </script>\n  </amp-animation>\n","inBody":true,"id":24,"cachedMarkedDoc":false,"isLastSection":false,"isFirstSection":false,"commentOffset":0,"codeOffset":2,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":"\nHere we define our timebound animation with a delay of 200ms which will slide the carousel to the left within 500ms.\n\nThis animation will only be triggered once by the position observer as defined above.\n\n"},{"doc_":"","code":"</body>\n</html>\n","preview":"","inBody":false,"id":25,"cachedMarkedDoc":false,"isLastSection":true,"isFirstSection":false,"commentOffset":0,"codeOffset":0,"headings":[],"storyPageId":"","currentHint":"","hints":[],"filters":null,"normalizedDoc_":""}],"head":"<meta charset=\"utf-8\">\n  <title>Basics of scrollbound effects</title>\n  <script async src=\"https://cdn.ampproject.org/v0.js\"></script>\n  <script async custom-element=\"amp-position-observer\" src=\"https://cdn.ampproject.org/v0/amp-position-observer-0.1.js\"></script>\n\n  <script async custom-element=\"amp-animation\" src=\"https://cdn.ampproject.org/v0/amp-animation-0.1.js\"></script>\n\n  <script async custom-element=\"amp-fit-text\" src=\"https://cdn.ampproject.org/v0/amp-fit-text-0.1.js\"></script>\n  <script async custom-element=\"amp-carousel\" src=\"https://cdn.ampproject.org/v0/amp-carousel-0.1.js\"></script>\n  <link rel=\"canonical\" href=\"http://localhost:8080/documentation/examples/visual-effects/basics_of_scrollbound_effects/index.html\">\n  <meta name=\"viewport\" content=\"width=device-width,minimum-scale=1,initial-scale=1\">\n  <style amp-boilerplate>body{-webkit-animation:-amp-start 8s steps(1,end) 0s 1 normal both;-moz-animation:-amp-start 8s steps(1,end) 0s 1 normal both;-ms-animation:-amp-start 8s steps(1,end) 0s 1 normal both;animation:-amp-start 8s steps(1,end) 0s 1 normal both}@-webkit-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-moz-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-ms-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-o-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}</style><noscript><style amp-boilerplate>body{-webkit-animation:none;-moz-animation:none;-ms-animation:none;animation:none}</style></noscript>\n\n","styles":"\n    /*\n     * Fidget Spinner styles\n     */\n    .fidget-spinner-scene {\n      margin: 10px 20%;\n    }\n\n    /*\n     * Card transition styles\n     */\n    .card {\n      margin: 10%;\n      position: relative;\n    }\n    .card-title {\n      padding: 5%;\n      padding-right: 40%;\n      font-size: 50%;\n      font-weight: bold;\n      color: #FAFAFA;\n      transform: translateX(-100%);\n    }\n\n    /*\n     * Parallax window styles\n     */\n    .parallax-image-window {\n      overflow: hidden;\n    }\n    .parallax-image-window amp-img {\n      margin-bottom: -30%;\n    }\n\n    /*\n     * Carousel transition styles\n     */\n    .carousel-component {\n      margin-right: -60%;\n      margin-left: 60%;\n    }\n    .carousel-parent {\n      overflow: hidden;\n    }\n","title":"Basics of scrollbound effects","metadata":{"teaserImage":"/static/samples/img/teaser/basics_of_scrollbound_effects.jpg","author":"aghassemi"},"body":"<body>","elementsAfterBody":"","isAmpStory":false,"isAmpWeb":true,"isAmpAds":false,"isAmpEmail":false,"firstImage":"/favicons/android-chrome-256x256.png","lang":"en","_description":"amp-position-observer combined with amp-animation is a powerful building block that can handle various uses-cases such as scrollbound animations, parallax effects and transitions as elements enter and exit the viewport."},"route":"/documentation/examples/visual-effects/basics_of_scrollbound_effects/index.html"}