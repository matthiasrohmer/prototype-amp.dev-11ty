{% if '/documentation/examples/' in doc.pod_path %}
{% set category = 'examples' %}
{% elif '/documentation/components/' in doc.pod_path %}
{% set category = 'components' %}
{% elif '/documentation/courses/' in doc.pod_path %}
{% set category = 'courses' %}
{% elif '/documentation/guides-and-tutorials/' in doc.pod_path %}
{% set category = 'guides-and-tutorials' %}
{% endif %}

{% set config = {
  'vars': {
    'gtag_id': podspec.gaTrackingId,
    'config': {
      podspec.gaTrackingId: {
        'groups': 'default'
      }
    }
  },
  'triggers': {
    'navigation': {
      'selector': '.ap--header a, .ap-o-burger-menu-link',
      'on': 'click',
      'vars': {
        'event_name': 'navigation',
        'event_label': 'navigation',
        'event_category': category or 'other',
        'event_action': 'link'
      }
    },
    'searchButton': {
      'selector': '#searchTriggerOpen',
      'on': 'click',
      'vars': {
        'event_name': 'search',
        'event_label': 'search',
        'event_category': 'search',
        'event_action': 'open'
      }
    },
    'scrolledHalf': {
      'on': 'scroll',
      'scrollSpec': {
        'verticalBoundaries': [50]
      },
      'vars': {
        'event_name': 'scroll',
        'event_label': 'scroll',
        'event_category': category or 'other',
        'event_action': 'half'
      }
    },
    'scrolledEnd': {
      'on': 'scroll',
      'scrollSpec': {
        'verticalBoundaries': [90]
      },
      'vars': {
        'event_name': 'scroll',
        'event_label': 'scroll',
        'event_category': category or 'other',
        'event_action': 'end'
      }
    }
  }
} %}

{# On the courses page track how often the courses are downloaded #}
{% if doc.pod_path == '/content/amp-dev/documentation/courses/teachers.md' %}
{% do config['triggers'].update({'getCoursesButton': {
  'selector': '#get-courses',
  'on': 'click',
  'vars': {
    'event_name': 'courses',
    'event_label': 'courses',
    'event_category': category,
    'event_action': 'download'
    }
}}) %}
{% endif %}

{% if category %}
{# Table of contents #}
{% if not (doc.format.toc == '<div class="toc">\n<ul></ul>\n</div>\n' or not doc.format.toc) and not (doc.toc == False or doc.collection.toc == False) %}
{# Track click on links inside the TOC #}
{% do config['triggers'].update({'tocLink': {
  'selector': '.ap-o-toc a',
  'on': 'click',
  'vars': {
    'event_name': 'toc',
    'event_label': 'toc',
    'event_category': category,
    'event_action': 'link'
    }
}}) %}

{# Track when the TOC is toggled #}
{% do config['triggers'].update({'tocToggle': {
  'selector': '.ap-o-toc label',
  'on': 'click',
  'vars': {
    'event_name': 'toc',
    'event_label': 'toc',
    'event_category': category,
    'event_action': 'toggle'
    }
}}) %}
{% endif %}

{# Sidebar #}
{# Track clicks on links inside the sidebar #}
{% do config['triggers'].update({'sidebarLink': {
  'selector': '.ap-o-sidebar a',
  'on': 'click',
  'vars': {
    'event_name': 'sidebar',
    'event_label': 'sidebar',
    'event_category': category,
    'event_action': 'link'
    }
}}) %}
{# Track when the sidebar is toggled #}
{% do config['triggers'].update({'sidebarToggle': {
  'selector': 'label[for="sidebar-desktop"], label[for="sidebar"]',
  'on': 'click',
  'vars': {
    'event_name': 'sidebar',
    'event_label': 'sidebar',
    'event_category': category,
    'event_action': 'toggle'
    }
}}) %}

{# Breadcrubms #}
{# Track when a breadcrumb is used #}
{% do config['triggers'].update({'breadcrumbLink': {
  'selector': '.ap-m-breadcrumbs-crumb',
  'on': 'click',
  'vars': {
    'event_name': 'breadcrumbs',
    'event_label': 'breadcrumbs',
    'event_category': category,
    'event_action': 'link'
    }
}}) %}


{# Format toggle #}
{# Track when format is changed #}
{% do config['triggers'].update({'formatToggle': {
  'selector': '.ap-m-format-toggle-link',
  'on': 'click',
  'vars': {
    'event_name': 'format-toggle',
    'event_label': 'format-toggle',
    'event_category': category,
    'event_action': 'link'
  }
}}) %}
{% endif %}

{% do doc.amp_dependencies.add('amp-analytics', '0.1') %}
<amp-analytics type="gtag" data-credentials="include" data-block-on-consent>
  <script type="application/json">
    {{ config|tojson }}
  </script>
</amp-analytics>
